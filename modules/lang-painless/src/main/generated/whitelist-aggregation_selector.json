{
  "name": "aggregation_selector",
  "classes": [
    {
      "name": "boolean",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "byte",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "char",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "double",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "float",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "int",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.Appendable",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Appendable",
          "name": "append",
          "return": "java.lang.Appendable",
          "parameters": [
            "java.lang.CharSequence",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.ArithmeticException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.ArithmeticException",
          "parameters": []
        },
        {
          "declaring": "java.lang.ArithmeticException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.ArrayIndexOutOfBoundsException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.ArrayIndexOutOfBoundsException",
          "parameters": []
        },
        {
          "declaring": "java.lang.ArrayIndexOutOfBoundsException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.ArrayStoreException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.ArrayStoreException",
          "parameters": []
        },
        {
          "declaring": "java.lang.ArrayStoreException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.Boolean",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.lang.Boolean",
          "name": "compare",
          "return": "int",
          "parameters": [
            "boolean",
            "boolean"
          ]
        },
        {
          "declaring": "java.lang.Boolean",
          "name": "hashCode",
          "return": "int",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.lang.Boolean",
          "name": "logicalAnd",
          "return": "boolean",
          "parameters": [
            "boolean",
            "boolean"
          ]
        },
        {
          "declaring": "java.lang.Boolean",
          "name": "logicalOr",
          "return": "boolean",
          "parameters": [
            "boolean",
            "boolean"
          ]
        },
        {
          "declaring": "java.lang.Boolean",
          "name": "logicalXor",
          "return": "boolean",
          "parameters": [
            "boolean",
            "boolean"
          ]
        },
        {
          "declaring": "java.lang.Boolean",
          "name": "parseBoolean",
          "return": "boolean",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Boolean",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.lang.Boolean",
          "name": "valueOf",
          "return": "java.lang.Boolean",
          "parameters": [
            "boolean"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Boolean",
          "name": "booleanValue",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Boolean",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Boolean"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.lang.Boolean",
          "name": "FALSE",
          "type": "java.lang.Boolean"
        },
        {
          "declaring": "java.lang.Boolean",
          "name": "TRUE",
          "type": "java.lang.Boolean"
        }
      ],
      "fields": []
    },
    {
      "name": "java.lang.Byte",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.lang.Byte",
          "name": "compare",
          "return": "int",
          "parameters": [
            "byte",
            "byte"
          ]
        },
        {
          "declaring": "java.lang.Byte",
          "name": "decode",
          "return": "java.lang.Byte",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Byte",
          "name": "hashCode",
          "return": "int",
          "parameters": [
            "byte"
          ]
        },
        {
          "declaring": "java.lang.Byte",
          "name": "parseByte",
          "return": "byte",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Byte",
          "name": "parseByte",
          "return": "byte",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Byte",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": [
            "byte"
          ]
        },
        {
          "declaring": "java.lang.Byte",
          "name": "toUnsignedInt",
          "return": "int",
          "parameters": [
            "byte"
          ]
        },
        {
          "declaring": "java.lang.Byte",
          "name": "toUnsignedLong",
          "return": "long",
          "parameters": [
            "byte"
          ]
        },
        {
          "declaring": "java.lang.Byte",
          "name": "valueOf",
          "return": "java.lang.Byte",
          "parameters": [
            "byte"
          ]
        },
        {
          "declaring": "java.lang.Byte",
          "name": "valueOf",
          "return": "java.lang.Byte",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Number",
          "name": "byteValue",
          "return": "byte",
          "parameters": []
        },
        {
          "declaring": "java.lang.Byte",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Byte"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "doubleValue",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "floatValue",
          "return": "float",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "intValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "longValue",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "shortValue",
          "return": "short",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.lang.Byte",
          "name": "BYTES",
          "type": "int"
        },
        {
          "declaring": "java.lang.Byte",
          "name": "MAX_VALUE",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Byte",
          "name": "MIN_VALUE",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Byte",
          "name": "SIZE",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.lang.CharSequence",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.CharSequence",
          "name": "charAt",
          "return": "char",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "chars",
          "return": "java.util.stream.IntStream",
          "parameters": []
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "codePoints",
          "return": "java.util.stream.IntStream",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "length",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "replaceAll",
          "return": "java.lang.String",
          "parameters": [
            "java.util.regex.Pattern",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "replaceFirst",
          "return": "java.lang.String",
          "parameters": [
            "java.util.regex.Pattern",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "subSequence",
          "return": "java.lang.CharSequence",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.Character",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.lang.Character",
          "name": "charCount",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "codePointAt",
          "return": "int",
          "parameters": [
            "java.lang.CharSequence",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "codePointAt",
          "return": "int",
          "parameters": [
            "[C",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "codePointBefore",
          "return": "int",
          "parameters": [
            "java.lang.CharSequence",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "codePointBefore",
          "return": "int",
          "parameters": [
            "[C",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "codePointCount",
          "return": "int",
          "parameters": [
            "java.lang.CharSequence",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "compare",
          "return": "int",
          "parameters": [
            "char",
            "char"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "digit",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "forDigit",
          "return": "char",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "getDirectionality",
          "return": "byte",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "getName",
          "return": "java.lang.String",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "getNumericValue",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "getType",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "hashCode",
          "return": "int",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "highSurrogate",
          "return": "char",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isAlphabetic",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isBmpCodePoint",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isDefined",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isDigit",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isHighSurrogate",
          "return": "boolean",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isISOControl",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isIdentifierIgnorable",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isIdeographic",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isJavaIdentifierPart",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isJavaIdentifierStart",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isLetter",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isLetterOrDigit",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isLowerCase",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isMirrored",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isSpaceChar",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isSupplementaryCodePoint",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isSurrogate",
          "return": "boolean",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isSurrogatePair",
          "return": "boolean",
          "parameters": [
            "char",
            "char"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isTitleCase",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isUnicodeIdentifierPart",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isUnicodeIdentifierStart",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isUpperCase",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isValidCodePoint",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "isWhitespace",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "lowSurrogate",
          "return": "char",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "offsetByCodePoints",
          "return": "int",
          "parameters": [
            "java.lang.CharSequence",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "offsetByCodePoints",
          "return": "int",
          "parameters": [
            "[C",
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "reverseBytes",
          "return": "char",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "toChars",
          "return": "[C",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "toChars",
          "return": "int",
          "parameters": [
            "int",
            "[C",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "toCodePoint",
          "return": "int",
          "parameters": [
            "char",
            "char"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "toLowerCase",
          "return": "char",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "toTitleCase",
          "return": "char",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "toUpperCase",
          "return": "char",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.lang.Character",
          "name": "valueOf",
          "return": "java.lang.Character",
          "parameters": [
            "char"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Character",
          "name": "charValue",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.lang.Character",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Character"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.lang.Character",
          "name": "BYTES",
          "type": "int"
        },
        {
          "declaring": "java.lang.Character",
          "name": "COMBINING_SPACING_MARK",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "CONNECTOR_PUNCTUATION",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "CONTROL",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "CURRENCY_SYMBOL",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DASH_PUNCTUATION",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DECIMAL_DIGIT_NUMBER",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_ARABIC_NUMBER",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_BOUNDARY_NEUTRAL",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_EUROPEAN_NUMBER",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_LEFT_TO_RIGHT",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_NONSPACING_MARK",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_OTHER_NEUTRALS",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_PARAGRAPH_SEPARATOR",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_RIGHT_TO_LEFT",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_SEGMENT_SEPARATOR",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_UNDEFINED",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "DIRECTIONALITY_WHITESPACE",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "ENCLOSING_MARK",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "END_PUNCTUATION",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "FINAL_QUOTE_PUNCTUATION",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "FORMAT",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "INITIAL_QUOTE_PUNCTUATION",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "LETTER_NUMBER",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "LINE_SEPARATOR",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "LOWERCASE_LETTER",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MATH_SYMBOL",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MAX_CODE_POINT",
          "type": "int"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MAX_HIGH_SURROGATE",
          "type": "char"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MAX_LOW_SURROGATE",
          "type": "char"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MAX_RADIX",
          "type": "int"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MAX_SURROGATE",
          "type": "char"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MAX_VALUE",
          "type": "char"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MIN_CODE_POINT",
          "type": "int"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MIN_HIGH_SURROGATE",
          "type": "char"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MIN_LOW_SURROGATE",
          "type": "char"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MIN_RADIX",
          "type": "int"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MIN_SUPPLEMENTARY_CODE_POINT",
          "type": "int"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MIN_SURROGATE",
          "type": "char"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MIN_VALUE",
          "type": "char"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MODIFIER_LETTER",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "MODIFIER_SYMBOL",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "NON_SPACING_MARK",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "OTHER_LETTER",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "OTHER_NUMBER",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "OTHER_PUNCTUATION",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "OTHER_SYMBOL",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "PARAGRAPH_SEPARATOR",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "PRIVATE_USE",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "SIZE",
          "type": "int"
        },
        {
          "declaring": "java.lang.Character",
          "name": "SPACE_SEPARATOR",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "START_PUNCTUATION",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "SURROGATE",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "TITLECASE_LETTER",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "UNASSIGNED",
          "type": "byte"
        },
        {
          "declaring": "java.lang.Character",
          "name": "UPPERCASE_LETTER",
          "type": "byte"
        }
      ],
      "fields": []
    },
    {
      "name": "java.lang.Character$Subset",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.Character$UnicodeBlock",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "forName",
          "return": "java.lang.Character$UnicodeBlock",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "of",
          "return": "java.lang.Character$UnicodeBlock",
          "parameters": [
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "AEGEAN_NUMBERS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ALCHEMICAL_SYMBOLS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ALPHABETIC_PRESENTATION_FORMS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ANCIENT_GREEK_MUSICAL_NOTATION",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ANCIENT_GREEK_NUMBERS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ANCIENT_SYMBOLS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ARABIC",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ARABIC_EXTENDED_A",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ARABIC_PRESENTATION_FORMS_A",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ARABIC_PRESENTATION_FORMS_B",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ARABIC_SUPPLEMENT",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ARMENIAN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ARROWS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "AVESTAN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "BALINESE",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "BAMUM",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "BAMUM_SUPPLEMENT",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "BASIC_LATIN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "BATAK",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "BENGALI",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "BLOCK_ELEMENTS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "BOPOMOFO",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "BOPOMOFO_EXTENDED",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "BOX_DRAWING",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "BRAHMI",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "BRAILLE_PATTERNS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "BUGINESE",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "BUHID",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "BYZANTINE_MUSICAL_SYMBOLS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CARIAN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CHAKMA",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CHAM",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CHEROKEE",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CJK_COMPATIBILITY",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CJK_COMPATIBILITY_FORMS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CJK_COMPATIBILITY_IDEOGRAPHS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CJK_RADICALS_SUPPLEMENT",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CJK_STROKES",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CJK_SYMBOLS_AND_PUNCTUATION",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CJK_UNIFIED_IDEOGRAPHS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "COMBINING_DIACRITICAL_MARKS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "COMBINING_DIACRITICAL_MARKS_SUPPLEMENT",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "COMBINING_HALF_MARKS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "COMBINING_MARKS_FOR_SYMBOLS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "COMMON_INDIC_NUMBER_FORMS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CONTROL_PICTURES",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "COPTIC",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "COUNTING_ROD_NUMERALS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CUNEIFORM",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CUNEIFORM_NUMBERS_AND_PUNCTUATION",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CURRENCY_SYMBOLS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CYPRIOT_SYLLABARY",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CYRILLIC",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CYRILLIC_EXTENDED_A",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CYRILLIC_EXTENDED_B",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "CYRILLIC_SUPPLEMENTARY",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "DESERET",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "DEVANAGARI",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "DEVANAGARI_EXTENDED",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "DINGBATS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "DOMINO_TILES",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "EGYPTIAN_HIEROGLYPHS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "EMOTICONS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ENCLOSED_ALPHANUMERICS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ENCLOSED_ALPHANUMERIC_SUPPLEMENT",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ENCLOSED_CJK_LETTERS_AND_MONTHS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ENCLOSED_IDEOGRAPHIC_SUPPLEMENT",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ETHIOPIC",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ETHIOPIC_EXTENDED",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ETHIOPIC_EXTENDED_A",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ETHIOPIC_SUPPLEMENT",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "GENERAL_PUNCTUATION",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "GEOMETRIC_SHAPES",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "GEORGIAN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "GEORGIAN_SUPPLEMENT",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "GLAGOLITIC",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "GOTHIC",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "GREEK",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "GREEK_EXTENDED",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "GUJARATI",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "GURMUKHI",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "HALFWIDTH_AND_FULLWIDTH_FORMS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "HANGUL_COMPATIBILITY_JAMO",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "HANGUL_JAMO",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "HANGUL_JAMO_EXTENDED_A",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "HANGUL_JAMO_EXTENDED_B",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "HANGUL_SYLLABLES",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "HANUNOO",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "HEBREW",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "HIGH_PRIVATE_USE_SURROGATES",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "HIGH_SURROGATES",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "HIRAGANA",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "IDEOGRAPHIC_DESCRIPTION_CHARACTERS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "IMPERIAL_ARAMAIC",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "INSCRIPTIONAL_PAHLAVI",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "INSCRIPTIONAL_PARTHIAN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "IPA_EXTENSIONS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "JAVANESE",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "KAITHI",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "KANA_SUPPLEMENT",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "KANBUN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "KANGXI_RADICALS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "KANNADA",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "KATAKANA",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "KATAKANA_PHONETIC_EXTENSIONS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "KAYAH_LI",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "KHAROSHTHI",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "KHMER",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "KHMER_SYMBOLS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LAO",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LATIN_1_SUPPLEMENT",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LATIN_EXTENDED_A",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LATIN_EXTENDED_ADDITIONAL",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LATIN_EXTENDED_B",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LATIN_EXTENDED_C",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LATIN_EXTENDED_D",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LEPCHA",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LETTERLIKE_SYMBOLS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LIMBU",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LINEAR_B_IDEOGRAMS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LINEAR_B_SYLLABARY",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LISU",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LOW_SURROGATES",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LYCIAN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "LYDIAN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MAHJONG_TILES",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MALAYALAM",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MANDAIC",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MATHEMATICAL_ALPHANUMERIC_SYMBOLS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MATHEMATICAL_OPERATORS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MEETEI_MAYEK",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MEETEI_MAYEK_EXTENSIONS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MEROITIC_CURSIVE",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MEROITIC_HIEROGLYPHS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MIAO",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MISCELLANEOUS_SYMBOLS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MISCELLANEOUS_SYMBOLS_AND_ARROWS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MISCELLANEOUS_TECHNICAL",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MODIFIER_TONE_LETTERS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MONGOLIAN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MUSICAL_SYMBOLS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MYANMAR",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "MYANMAR_EXTENDED_A",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "NEW_TAI_LUE",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "NKO",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "NUMBER_FORMS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "OGHAM",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "OLD_ITALIC",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "OLD_PERSIAN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "OLD_SOUTH_ARABIAN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "OLD_TURKIC",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "OL_CHIKI",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "OPTICAL_CHARACTER_RECOGNITION",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "ORIYA",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "OSMANYA",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "PHAGS_PA",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "PHAISTOS_DISC",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "PHOENICIAN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "PHONETIC_EXTENSIONS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "PHONETIC_EXTENSIONS_SUPPLEMENT",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "PLAYING_CARDS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "PRIVATE_USE_AREA",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "REJANG",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "RUMI_NUMERAL_SYMBOLS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "RUNIC",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SAMARITAN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SAURASHTRA",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SHARADA",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SHAVIAN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SINHALA",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SMALL_FORM_VARIANTS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SORA_SOMPENG",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SPACING_MODIFIER_LETTERS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SPECIALS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SUNDANESE",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SUNDANESE_SUPPLEMENT",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SUPPLEMENTAL_ARROWS_A",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SUPPLEMENTAL_ARROWS_B",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SUPPLEMENTAL_MATHEMATICAL_OPERATORS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SUPPLEMENTAL_PUNCTUATION",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SUPPLEMENTARY_PRIVATE_USE_AREA_A",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SUPPLEMENTARY_PRIVATE_USE_AREA_B",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SYLOTI_NAGRI",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "SYRIAC",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "TAGALOG",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "TAGBANWA",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "TAGS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "TAI_LE",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "TAI_THAM",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "TAI_VIET",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "TAI_XUAN_JING_SYMBOLS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "TAKRI",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "TAMIL",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "TELUGU",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "THAANA",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "THAI",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "TIBETAN",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "TIFINAGH",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "TRANSPORT_AND_MAP_SYMBOLS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "UGARITIC",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "VAI",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "VARIATION_SELECTORS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "VARIATION_SELECTORS_SUPPLEMENT",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "VEDIC_EXTENSIONS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "VERTICAL_FORMS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "YIJING_HEXAGRAM_SYMBOLS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "YI_RADICALS",
          "type": "java.lang.Character$UnicodeBlock"
        },
        {
          "declaring": "java.lang.Character$UnicodeBlock",
          "name": "YI_SYLLABLES",
          "type": "java.lang.Character$UnicodeBlock"
        }
      ],
      "fields": []
    },
    {
      "name": "java.lang.Character$UnicodeScript",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "forName",
          "return": "java.lang.Character$UnicodeScript",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "of",
          "return": "java.lang.Character$UnicodeScript",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "valueOf",
          "return": "java.lang.Character$UnicodeScript",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "values",
          "return": "[Ljava.lang.Character$UnicodeScript;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "ARABIC",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "ARMENIAN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "AVESTAN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "BALINESE",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "BAMUM",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "BATAK",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "BENGALI",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "BOPOMOFO",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "BRAHMI",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "BRAILLE",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "BUGINESE",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "BUHID",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "CANADIAN_ABORIGINAL",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "CARIAN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "CHAKMA",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "CHAM",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "CHEROKEE",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "COMMON",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "COPTIC",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "CUNEIFORM",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "CYPRIOT",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "CYRILLIC",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "DESERET",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "DEVANAGARI",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "EGYPTIAN_HIEROGLYPHS",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "ETHIOPIC",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "GEORGIAN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "GLAGOLITIC",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "GOTHIC",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "GREEK",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "GUJARATI",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "GURMUKHI",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "HAN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "HANGUL",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "HANUNOO",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "HEBREW",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "HIRAGANA",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "IMPERIAL_ARAMAIC",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "INHERITED",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "INSCRIPTIONAL_PAHLAVI",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "INSCRIPTIONAL_PARTHIAN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "JAVANESE",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "KAITHI",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "KANNADA",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "KATAKANA",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "KAYAH_LI",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "KHAROSHTHI",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "KHMER",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "LAO",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "LATIN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "LEPCHA",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "LIMBU",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "LINEAR_B",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "LISU",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "LYCIAN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "LYDIAN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "MALAYALAM",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "MANDAIC",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "MEETEI_MAYEK",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "MEROITIC_CURSIVE",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "MEROITIC_HIEROGLYPHS",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "MIAO",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "MONGOLIAN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "MYANMAR",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "NEW_TAI_LUE",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "NKO",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "OGHAM",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "OLD_ITALIC",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "OLD_PERSIAN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "OLD_SOUTH_ARABIAN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "OLD_TURKIC",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "OL_CHIKI",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "ORIYA",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "OSMANYA",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "PHAGS_PA",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "PHOENICIAN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "REJANG",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "RUNIC",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "SAMARITAN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "SAURASHTRA",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "SHARADA",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "SHAVIAN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "SINHALA",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "SORA_SOMPENG",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "SUNDANESE",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "SYLOTI_NAGRI",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "SYRIAC",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "TAGALOG",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "TAGBANWA",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "TAI_LE",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "TAI_THAM",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "TAI_VIET",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "TAKRI",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "TAMIL",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "TELUGU",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "THAANA",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "THAI",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "TIBETAN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "TIFINAGH",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "UGARITIC",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "UNKNOWN",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "VAI",
          "type": "java.lang.Character$UnicodeScript"
        },
        {
          "declaring": "java.lang.Character$UnicodeScript",
          "name": "YI",
          "type": "java.lang.Character$UnicodeScript"
        }
      ],
      "fields": []
    },
    {
      "name": "java.lang.ClassCastException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.ClassCastException",
          "parameters": []
        },
        {
          "declaring": "java.lang.ClassCastException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.ClassNotFoundException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.ClassNotFoundException",
          "parameters": []
        },
        {
          "declaring": "java.lang.ClassNotFoundException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.CloneNotSupportedException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.CloneNotSupportedException",
          "parameters": []
        },
        {
          "declaring": "java.lang.CloneNotSupportedException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.Comparable",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Comparable",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.Double",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.lang.Double",
          "name": "compare",
          "return": "int",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.Double",
          "name": "doubleToLongBits",
          "return": "long",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Double",
          "name": "doubleToRawLongBits",
          "return": "long",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Double",
          "name": "hashCode",
          "return": "int",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Double",
          "name": "isFinite",
          "return": "boolean",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Double",
          "name": "isInfinite",
          "return": "boolean",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Double",
          "name": "isNaN",
          "return": "boolean",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Double",
          "name": "longBitsToDouble",
          "return": "double",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Double",
          "name": "max",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.Double",
          "name": "min",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.Double",
          "name": "parseDouble",
          "return": "double",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Double",
          "name": "sum",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.Double",
          "name": "toHexString",
          "return": "java.lang.String",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Double",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Double",
          "name": "valueOf",
          "return": "java.lang.Double",
          "parameters": [
            "double"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Number",
          "name": "byteValue",
          "return": "byte",
          "parameters": []
        },
        {
          "declaring": "java.lang.Double",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Double"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "doubleValue",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "floatValue",
          "return": "float",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "intValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Double",
          "name": "isInfinite",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Double",
          "name": "isNaN",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "longValue",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "shortValue",
          "return": "short",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.lang.Double",
          "name": "BYTES",
          "type": "int"
        },
        {
          "declaring": "java.lang.Double",
          "name": "MAX_EXPONENT",
          "type": "int"
        },
        {
          "declaring": "java.lang.Double",
          "name": "MAX_VALUE",
          "type": "double"
        },
        {
          "declaring": "java.lang.Double",
          "name": "MIN_EXPONENT",
          "type": "int"
        },
        {
          "declaring": "java.lang.Double",
          "name": "MIN_NORMAL",
          "type": "double"
        },
        {
          "declaring": "java.lang.Double",
          "name": "MIN_VALUE",
          "type": "double"
        },
        {
          "declaring": "java.lang.Double",
          "name": "NEGATIVE_INFINITY",
          "type": "double"
        },
        {
          "declaring": "java.lang.Double",
          "name": "NaN",
          "type": "double"
        },
        {
          "declaring": "java.lang.Double",
          "name": "POSITIVE_INFINITY",
          "type": "double"
        },
        {
          "declaring": "java.lang.Double",
          "name": "SIZE",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.lang.Enum",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.EnumConstantNotPresentException",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.EnumConstantNotPresentException",
          "name": "constantName",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.Exception",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.Exception",
          "parameters": []
        },
        {
          "declaring": "java.lang.Exception",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.Float",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.lang.Float",
          "name": "compare",
          "return": "int",
          "parameters": [
            "float",
            "float"
          ]
        },
        {
          "declaring": "java.lang.Float",
          "name": "floatToIntBits",
          "return": "int",
          "parameters": [
            "float"
          ]
        },
        {
          "declaring": "java.lang.Float",
          "name": "floatToRawIntBits",
          "return": "int",
          "parameters": [
            "float"
          ]
        },
        {
          "declaring": "java.lang.Float",
          "name": "hashCode",
          "return": "int",
          "parameters": [
            "float"
          ]
        },
        {
          "declaring": "java.lang.Float",
          "name": "intBitsToFloat",
          "return": "float",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Float",
          "name": "isFinite",
          "return": "boolean",
          "parameters": [
            "float"
          ]
        },
        {
          "declaring": "java.lang.Float",
          "name": "isInfinite",
          "return": "boolean",
          "parameters": [
            "float"
          ]
        },
        {
          "declaring": "java.lang.Float",
          "name": "isNaN",
          "return": "boolean",
          "parameters": [
            "float"
          ]
        },
        {
          "declaring": "java.lang.Float",
          "name": "max",
          "return": "float",
          "parameters": [
            "float",
            "float"
          ]
        },
        {
          "declaring": "java.lang.Float",
          "name": "min",
          "return": "float",
          "parameters": [
            "float",
            "float"
          ]
        },
        {
          "declaring": "java.lang.Float",
          "name": "parseFloat",
          "return": "float",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Float",
          "name": "sum",
          "return": "float",
          "parameters": [
            "float",
            "float"
          ]
        },
        {
          "declaring": "java.lang.Float",
          "name": "toHexString",
          "return": "java.lang.String",
          "parameters": [
            "float"
          ]
        },
        {
          "declaring": "java.lang.Float",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": [
            "float"
          ]
        },
        {
          "declaring": "java.lang.Float",
          "name": "valueOf",
          "return": "java.lang.Float",
          "parameters": [
            "float"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Number",
          "name": "byteValue",
          "return": "byte",
          "parameters": []
        },
        {
          "declaring": "java.lang.Float",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Float"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "doubleValue",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "floatValue",
          "return": "float",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "intValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Float",
          "name": "isInfinite",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Float",
          "name": "isNaN",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "longValue",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "shortValue",
          "return": "short",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.lang.Float",
          "name": "BYTES",
          "type": "int"
        },
        {
          "declaring": "java.lang.Float",
          "name": "MAX_EXPONENT",
          "type": "int"
        },
        {
          "declaring": "java.lang.Float",
          "name": "MAX_VALUE",
          "type": "float"
        },
        {
          "declaring": "java.lang.Float",
          "name": "MIN_EXPONENT",
          "type": "int"
        },
        {
          "declaring": "java.lang.Float",
          "name": "MIN_NORMAL",
          "type": "float"
        },
        {
          "declaring": "java.lang.Float",
          "name": "MIN_VALUE",
          "type": "float"
        },
        {
          "declaring": "java.lang.Float",
          "name": "NEGATIVE_INFINITY",
          "type": "float"
        },
        {
          "declaring": "java.lang.Float",
          "name": "NaN",
          "type": "float"
        },
        {
          "declaring": "java.lang.Float",
          "name": "POSITIVE_INFINITY",
          "type": "float"
        },
        {
          "declaring": "java.lang.Float",
          "name": "SIZE",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.lang.IllegalAccessException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.IllegalAccessException",
          "parameters": []
        },
        {
          "declaring": "java.lang.IllegalAccessException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.IllegalArgumentException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.IllegalArgumentException",
          "parameters": []
        },
        {
          "declaring": "java.lang.IllegalArgumentException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.IllegalMonitorStateException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.IllegalMonitorStateException",
          "parameters": []
        },
        {
          "declaring": "java.lang.IllegalMonitorStateException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.IllegalStateException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.IllegalStateException",
          "parameters": []
        },
        {
          "declaring": "java.lang.IllegalStateException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.IllegalThreadStateException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.IllegalThreadStateException",
          "parameters": []
        },
        {
          "declaring": "java.lang.IllegalThreadStateException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.IndexOutOfBoundsException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.IndexOutOfBoundsException",
          "parameters": []
        },
        {
          "declaring": "java.lang.IndexOutOfBoundsException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.InstantiationException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.InstantiationException",
          "parameters": []
        },
        {
          "declaring": "java.lang.InstantiationException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.Integer",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.lang.Integer",
          "name": "bitCount",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "compare",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "compareUnsigned",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "decode",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "divideUnsigned",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "hashCode",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "highestOneBit",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "lowestOneBit",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "max",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "min",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "numberOfLeadingZeros",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "numberOfTrailingZeros",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "parseInt",
          "return": "int",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "parseInt",
          "return": "int",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "parseUnsignedInt",
          "return": "int",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "parseUnsignedInt",
          "return": "int",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "remainderUnsigned",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "reverse",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "reverseBytes",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "rotateLeft",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "rotateRight",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "signum",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "toBinaryString",
          "return": "java.lang.String",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "toHexString",
          "return": "java.lang.String",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "toOctalString",
          "return": "java.lang.String",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "toUnsignedLong",
          "return": "long",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "toUnsignedString",
          "return": "java.lang.String",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "toUnsignedString",
          "return": "java.lang.String",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "valueOf",
          "return": "java.lang.Integer",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Integer",
          "name": "valueOf",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Number",
          "name": "byteValue",
          "return": "byte",
          "parameters": []
        },
        {
          "declaring": "java.lang.Integer",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Integer"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "doubleValue",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "floatValue",
          "return": "float",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "intValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "longValue",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "shortValue",
          "return": "short",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.lang.Integer",
          "name": "BYTES",
          "type": "int"
        },
        {
          "declaring": "java.lang.Integer",
          "name": "MAX_VALUE",
          "type": "int"
        },
        {
          "declaring": "java.lang.Integer",
          "name": "MIN_VALUE",
          "type": "int"
        },
        {
          "declaring": "java.lang.Integer",
          "name": "SIZE",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.lang.InterruptedException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.InterruptedException",
          "parameters": []
        },
        {
          "declaring": "java.lang.InterruptedException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.Iterable",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.Long",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.lang.Long",
          "name": "bitCount",
          "return": "int",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "compare",
          "return": "int",
          "parameters": [
            "long",
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "compareUnsigned",
          "return": "int",
          "parameters": [
            "long",
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "decode",
          "return": "java.lang.Long",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "divideUnsigned",
          "return": "long",
          "parameters": [
            "long",
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "hashCode",
          "return": "int",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "highestOneBit",
          "return": "long",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "lowestOneBit",
          "return": "long",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "max",
          "return": "long",
          "parameters": [
            "long",
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "min",
          "return": "long",
          "parameters": [
            "long",
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "numberOfLeadingZeros",
          "return": "int",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "numberOfTrailingZeros",
          "return": "int",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "parseLong",
          "return": "long",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "parseLong",
          "return": "long",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "parseUnsignedLong",
          "return": "long",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "parseUnsignedLong",
          "return": "long",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "remainderUnsigned",
          "return": "long",
          "parameters": [
            "long",
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "reverse",
          "return": "long",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "reverseBytes",
          "return": "long",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "rotateLeft",
          "return": "long",
          "parameters": [
            "long",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "rotateRight",
          "return": "long",
          "parameters": [
            "long",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "signum",
          "return": "int",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "sum",
          "return": "long",
          "parameters": [
            "long",
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "toBinaryString",
          "return": "java.lang.String",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "toHexString",
          "return": "java.lang.String",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "toOctalString",
          "return": "java.lang.String",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": [
            "long",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "toUnsignedString",
          "return": "java.lang.String",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "toUnsignedString",
          "return": "java.lang.String",
          "parameters": [
            "long",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "valueOf",
          "return": "java.lang.Long",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Long",
          "name": "valueOf",
          "return": "java.lang.Long",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Number",
          "name": "byteValue",
          "return": "byte",
          "parameters": []
        },
        {
          "declaring": "java.lang.Long",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Long"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "doubleValue",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "floatValue",
          "return": "float",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "intValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "longValue",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "shortValue",
          "return": "short",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.lang.Long",
          "name": "BYTES",
          "type": "int"
        },
        {
          "declaring": "java.lang.Long",
          "name": "MAX_VALUE",
          "type": "long"
        },
        {
          "declaring": "java.lang.Long",
          "name": "MIN_VALUE",
          "type": "long"
        },
        {
          "declaring": "java.lang.Long",
          "name": "SIZE",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.lang.Math",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.lang.Math",
          "name": "IEEEremainder",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "abs",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "acos",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "asin",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "atan",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "atan2",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "cbrt",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "ceil",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "copySign",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "cos",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "cosh",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "exp",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "expm1",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "floor",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "hypot",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "log",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "log10",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "log1p",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "max",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "min",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "nextAfter",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "nextDown",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "nextUp",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "pow",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "random",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.Math",
          "name": "rint",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "round",
          "return": "long",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "scalb",
          "return": "double",
          "parameters": [
            "double",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "signum",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "sin",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "sinh",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "sqrt",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "tan",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "tanh",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "toDegrees",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "toRadians",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Math",
          "name": "ulp",
          "return": "double",
          "parameters": [
            "double"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.lang.Math",
          "name": "E",
          "type": "double"
        },
        {
          "declaring": "java.lang.Math",
          "name": "PI",
          "type": "double"
        }
      ],
      "fields": []
    },
    {
      "name": "java.lang.NegativeArraySizeException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.NegativeArraySizeException",
          "parameters": []
        },
        {
          "declaring": "java.lang.NegativeArraySizeException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.NoSuchFieldException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.NoSuchFieldException",
          "parameters": []
        },
        {
          "declaring": "java.lang.NoSuchFieldException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.NoSuchMethodException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.NoSuchMethodException",
          "parameters": []
        },
        {
          "declaring": "java.lang.NoSuchMethodException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.NullPointerException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.NullPointerException",
          "parameters": []
        },
        {
          "declaring": "java.lang.NullPointerException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.Number",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Number",
          "name": "byteValue",
          "return": "byte",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "doubleValue",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "floatValue",
          "return": "float",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "intValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "longValue",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "shortValue",
          "return": "short",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.NumberFormatException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.NumberFormatException",
          "parameters": []
        },
        {
          "declaring": "java.lang.NumberFormatException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.Object",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.ReflectiveOperationException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.ReflectiveOperationException",
          "parameters": []
        },
        {
          "declaring": "java.lang.ReflectiveOperationException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.RuntimeException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.RuntimeException",
          "parameters": []
        },
        {
          "declaring": "java.lang.RuntimeException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.SecurityException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.SecurityException",
          "parameters": []
        },
        {
          "declaring": "java.lang.SecurityException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.Short",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.lang.Short",
          "name": "compare",
          "return": "int",
          "parameters": [
            "short",
            "short"
          ]
        },
        {
          "declaring": "java.lang.Short",
          "name": "decode",
          "return": "java.lang.Short",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Short",
          "name": "hashCode",
          "return": "int",
          "parameters": [
            "short"
          ]
        },
        {
          "declaring": "java.lang.Short",
          "name": "parseShort",
          "return": "short",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Short",
          "name": "parseShort",
          "return": "short",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Short",
          "name": "reverseBytes",
          "return": "short",
          "parameters": [
            "short"
          ]
        },
        {
          "declaring": "java.lang.Short",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": [
            "short"
          ]
        },
        {
          "declaring": "java.lang.Short",
          "name": "toUnsignedInt",
          "return": "int",
          "parameters": [
            "short"
          ]
        },
        {
          "declaring": "java.lang.Short",
          "name": "toUnsignedLong",
          "return": "long",
          "parameters": [
            "short"
          ]
        },
        {
          "declaring": "java.lang.Short",
          "name": "valueOf",
          "return": "java.lang.Short",
          "parameters": [
            "short"
          ]
        },
        {
          "declaring": "java.lang.Short",
          "name": "valueOf",
          "return": "java.lang.Short",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Number",
          "name": "byteValue",
          "return": "byte",
          "parameters": []
        },
        {
          "declaring": "java.lang.Short",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Short"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "doubleValue",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "floatValue",
          "return": "float",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "intValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "longValue",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "shortValue",
          "return": "short",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.lang.Short",
          "name": "BYTES",
          "type": "int"
        },
        {
          "declaring": "java.lang.Short",
          "name": "MAX_VALUE",
          "type": "short"
        },
        {
          "declaring": "java.lang.Short",
          "name": "MIN_VALUE",
          "type": "short"
        },
        {
          "declaring": "java.lang.Short",
          "name": "SIZE",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.lang.StackTraceElement",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.StackTraceElement",
          "parameters": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.String",
            "int"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.StackTraceElement",
          "name": "getClassName",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.StackTraceElement",
          "name": "getFileName",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.StackTraceElement",
          "name": "getLineNumber",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.StackTraceElement",
          "name": "getMethodName",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.StackTraceElement",
          "name": "isNativeMethod",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.StrictMath",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.lang.StrictMath",
          "name": "IEEEremainder",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "abs",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "acos",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "asin",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "atan",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "atan2",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "cbrt",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "ceil",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "copySign",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "cos",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "cosh",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "exp",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "expm1",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "floor",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "hypot",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "log",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "log10",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "log1p",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "max",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "min",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "nextAfter",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "nextDown",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "nextUp",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "pow",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "random",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "rint",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "round",
          "return": "long",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "scalb",
          "return": "double",
          "parameters": [
            "double",
            "int"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "signum",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "sin",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "sinh",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "sqrt",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "tan",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "tanh",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "toDegrees",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "toRadians",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "ulp",
          "return": "double",
          "parameters": [
            "double"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.lang.StrictMath",
          "name": "E",
          "type": "double"
        },
        {
          "declaring": "java.lang.StrictMath",
          "name": "PI",
          "type": "double"
        }
      ],
      "fields": []
    },
    {
      "name": "java.lang.String",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.String",
          "parameters": []
        }
      ],
      "static_methods": [
        {
          "declaring": "java.lang.String",
          "name": "copyValueOf",
          "return": "java.lang.String",
          "parameters": [
            "[C"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "copyValueOf",
          "return": "java.lang.String",
          "parameters": [
            "[C",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String",
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.util.Locale",
            "java.lang.String",
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.CharSequence",
            "java.lang.Iterable"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "valueOf",
          "return": "java.lang.String",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.CharSequence",
          "name": "charAt",
          "return": "char",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "chars",
          "return": "java.util.stream.IntStream",
          "parameters": []
        },
        {
          "declaring": "java.lang.String",
          "name": "codePointAt",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "codePointBefore",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "codePointCount",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "codePoints",
          "return": "java.util.stream.IntStream",
          "parameters": []
        },
        {
          "declaring": "java.lang.String",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "compareToIgnoreCase",
          "return": "int",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "concat",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "contentEquals",
          "return": "boolean",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "decodeBase64",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "encodeBase64",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.String",
          "name": "endsWith",
          "return": "boolean",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "equalsIgnoreCase",
          "return": "boolean",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "getChars",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "[C",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.String",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.String",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "length",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.String",
          "name": "offsetByCodePoints",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "regionMatches",
          "return": "boolean",
          "parameters": [
            "int",
            "java.lang.String",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "regionMatches",
          "return": "boolean",
          "parameters": [
            "boolean",
            "int",
            "java.lang.String",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "replace",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.CharSequence",
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "replaceAll",
          "return": "java.lang.String",
          "parameters": [
            "java.util.regex.Pattern",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "replaceFirst",
          "return": "java.lang.String",
          "parameters": [
            "java.util.regex.Pattern",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "splitOnToken",
          "return": "[Ljava.lang.String;",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "splitOnToken",
          "return": "[Ljava.lang.String;",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "startsWith",
          "return": "boolean",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "startsWith",
          "return": "boolean",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "subSequence",
          "return": "java.lang.CharSequence",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "substring",
          "return": "java.lang.String",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "substring",
          "return": "java.lang.String",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "toCharArray",
          "return": "[C",
          "parameters": []
        },
        {
          "declaring": "java.lang.String",
          "name": "toLowerCase",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.String",
          "name": "toLowerCase",
          "return": "java.lang.String",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.String",
          "name": "toUpperCase",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.String",
          "name": "toUpperCase",
          "return": "java.lang.String",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.lang.String",
          "name": "trim",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.StringBuffer",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.StringBuffer",
          "parameters": []
        },
        {
          "declaring": "java.lang.StringBuffer",
          "parameters": [
            "java.lang.CharSequence"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.StringBuffer",
          "name": "append",
          "return": "java.lang.StringBuffer",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "append",
          "return": "java.lang.StringBuffer",
          "parameters": [
            "java.lang.CharSequence",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "appendCodePoint",
          "return": "java.lang.StringBuffer",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "capacity",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "charAt",
          "return": "char",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "chars",
          "return": "java.util.stream.IntStream",
          "parameters": []
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "codePointAt",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "codePointBefore",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "codePointCount",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "codePoints",
          "return": "java.util.stream.IntStream",
          "parameters": []
        },
        {
          "declaring": "java.lang.Comparable",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "delete",
          "return": "java.lang.StringBuffer",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "deleteCharAt",
          "return": "java.lang.StringBuffer",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "getChars",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "[C",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "insert",
          "return": "java.lang.StringBuffer",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "length",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "offsetByCodePoints",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "replace",
          "return": "java.lang.StringBuffer",
          "parameters": [
            "int",
            "int",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "replaceAll",
          "return": "java.lang.String",
          "parameters": [
            "java.util.regex.Pattern",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "replaceFirst",
          "return": "java.lang.String",
          "parameters": [
            "java.util.regex.Pattern",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "reverse",
          "return": "java.lang.StringBuffer",
          "parameters": []
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "setCharAt",
          "return": "void",
          "parameters": [
            "int",
            "char"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "setLength",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "subSequence",
          "return": "java.lang.CharSequence",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "substring",
          "return": "java.lang.String",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuffer",
          "name": "substring",
          "return": "java.lang.String",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.StringBuilder",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.StringBuilder",
          "parameters": []
        },
        {
          "declaring": "java.lang.StringBuilder",
          "parameters": [
            "java.lang.CharSequence"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.StringBuilder",
          "name": "append",
          "return": "java.lang.StringBuilder",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "append",
          "return": "java.lang.StringBuilder",
          "parameters": [
            "java.lang.CharSequence",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "appendCodePoint",
          "return": "java.lang.StringBuilder",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "capacity",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "charAt",
          "return": "char",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "chars",
          "return": "java.util.stream.IntStream",
          "parameters": []
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "codePointAt",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "codePointBefore",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "codePointCount",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "codePoints",
          "return": "java.util.stream.IntStream",
          "parameters": []
        },
        {
          "declaring": "java.lang.Comparable",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "delete",
          "return": "java.lang.StringBuilder",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "deleteCharAt",
          "return": "java.lang.StringBuilder",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "getChars",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "[C",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "insert",
          "return": "java.lang.StringBuilder",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "length",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "offsetByCodePoints",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "replace",
          "return": "java.lang.StringBuilder",
          "parameters": [
            "int",
            "int",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "replaceAll",
          "return": "java.lang.String",
          "parameters": [
            "java.util.regex.Pattern",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "replaceFirst",
          "return": "java.lang.String",
          "parameters": [
            "java.util.regex.Pattern",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "reverse",
          "return": "java.lang.StringBuilder",
          "parameters": []
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "setCharAt",
          "return": "void",
          "parameters": [
            "int",
            "char"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "setLength",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "subSequence",
          "return": "java.lang.CharSequence",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "substring",
          "return": "java.lang.String",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.StringBuilder",
          "name": "substring",
          "return": "java.lang.String",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.CharSequence",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.StringIndexOutOfBoundsException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.StringIndexOutOfBoundsException",
          "parameters": []
        },
        {
          "declaring": "java.lang.StringIndexOutOfBoundsException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.System",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.lang.System",
          "name": "arraycopy",
          "return": "void",
          "parameters": [
            "java.lang.Object",
            "int",
            "java.lang.Object",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.System",
          "name": "currentTimeMillis",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.System",
          "name": "nanoTime",
          "return": "long",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.TypeNotPresentException",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.TypeNotPresentException",
          "name": "typeName",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.UnsupportedOperationException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.lang.UnsupportedOperationException",
          "parameters": []
        },
        {
          "declaring": "java.lang.UnsupportedOperationException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.lang.Void",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.math.BigDecimal",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.math.BigDecimal",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "parameters": [
            "java.lang.String",
            "java.math.MathContext"
          ]
        }
      ],
      "static_methods": [
        {
          "declaring": "java.math.BigDecimal",
          "name": "valueOf",
          "return": "java.math.BigDecimal",
          "parameters": [
            "double"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.math.BigDecimal",
          "name": "abs",
          "return": "java.math.BigDecimal",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "abs",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.MathContext"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "add",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.BigDecimal"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "add",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.BigDecimal",
            "java.math.MathContext"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "byteValue",
          "return": "byte",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "byteValueExact",
          "return": "byte",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.math.BigDecimal"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "divide",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.BigDecimal"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "divide",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.BigDecimal",
            "java.math.MathContext"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "divideAndRemainder",
          "return": "[Ljava.math.BigDecimal;",
          "parameters": [
            "java.math.BigDecimal"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "divideAndRemainder",
          "return": "[Ljava.math.BigDecimal;",
          "parameters": [
            "java.math.BigDecimal",
            "java.math.MathContext"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "divideToIntegralValue",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.BigDecimal"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "divideToIntegralValue",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.BigDecimal",
            "java.math.MathContext"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "doubleValue",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "floatValue",
          "return": "float",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "intValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "intValueExact",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "longValue",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "longValueExact",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "max",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.BigDecimal"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "min",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.BigDecimal"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "movePointLeft",
          "return": "java.math.BigDecimal",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "movePointRight",
          "return": "java.math.BigDecimal",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "multiply",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.BigDecimal"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "multiply",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.BigDecimal",
            "java.math.MathContext"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "negate",
          "return": "java.math.BigDecimal",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "negate",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.MathContext"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "plus",
          "return": "java.math.BigDecimal",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "plus",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.MathContext"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "pow",
          "return": "java.math.BigDecimal",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "pow",
          "return": "java.math.BigDecimal",
          "parameters": [
            "int",
            "java.math.MathContext"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "precision",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "remainder",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.BigDecimal"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "remainder",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.BigDecimal",
            "java.math.MathContext"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "round",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.MathContext"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "scale",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "scaleByPowerOfTen",
          "return": "java.math.BigDecimal",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "setScale",
          "return": "java.math.BigDecimal",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "setScale",
          "return": "java.math.BigDecimal",
          "parameters": [
            "int",
            "java.math.RoundingMode"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "shortValue",
          "return": "short",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "shortValueExact",
          "return": "short",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "signum",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "stripTrailingZeros",
          "return": "java.math.BigDecimal",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "subtract",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.BigDecimal"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "subtract",
          "return": "java.math.BigDecimal",
          "parameters": [
            "java.math.BigDecimal",
            "java.math.MathContext"
          ]
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "toBigInteger",
          "return": "java.math.BigInteger",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "toBigIntegerExact",
          "return": "java.math.BigInteger",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "toEngineeringString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "toPlainString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "ulp",
          "return": "java.math.BigDecimal",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.math.BigDecimal",
          "name": "ONE",
          "type": "java.math.BigDecimal"
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "TEN",
          "type": "java.math.BigDecimal"
        },
        {
          "declaring": "java.math.BigDecimal",
          "name": "ZERO",
          "type": "java.math.BigDecimal"
        }
      ],
      "fields": []
    },
    {
      "name": "java.math.BigInteger",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.math.BigInteger",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        }
      ],
      "static_methods": [
        {
          "declaring": "java.math.BigInteger",
          "name": "valueOf",
          "return": "java.math.BigInteger",
          "parameters": [
            "long"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.math.BigInteger",
          "name": "abs",
          "return": "java.math.BigInteger",
          "parameters": []
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "add",
          "return": "java.math.BigInteger",
          "parameters": [
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "and",
          "return": "java.math.BigInteger",
          "parameters": [
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "andNot",
          "return": "java.math.BigInteger",
          "parameters": [
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "bitCount",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "bitLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "byteValue",
          "return": "byte",
          "parameters": []
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "byteValueExact",
          "return": "byte",
          "parameters": []
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "clearBit",
          "return": "java.math.BigInteger",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "divide",
          "return": "java.math.BigInteger",
          "parameters": [
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "divideAndRemainder",
          "return": "[Ljava.math.BigInteger;",
          "parameters": [
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "doubleValue",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "flipBit",
          "return": "java.math.BigInteger",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "floatValue",
          "return": "float",
          "parameters": []
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "gcd",
          "return": "java.math.BigInteger",
          "parameters": [
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "getLowestSetBit",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "intValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "intValueExact",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Number",
          "name": "longValue",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "longValueExact",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "max",
          "return": "java.math.BigInteger",
          "parameters": [
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "min",
          "return": "java.math.BigInteger",
          "parameters": [
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "mod",
          "return": "java.math.BigInteger",
          "parameters": [
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "modInverse",
          "return": "java.math.BigInteger",
          "parameters": [
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "modPow",
          "return": "java.math.BigInteger",
          "parameters": [
            "java.math.BigInteger",
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "multiply",
          "return": "java.math.BigInteger",
          "parameters": [
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "negate",
          "return": "java.math.BigInteger",
          "parameters": []
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "not",
          "return": "java.math.BigInteger",
          "parameters": []
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "or",
          "return": "java.math.BigInteger",
          "parameters": [
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "pow",
          "return": "java.math.BigInteger",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "remainder",
          "return": "java.math.BigInteger",
          "parameters": [
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "setBit",
          "return": "java.math.BigInteger",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "shiftLeft",
          "return": "java.math.BigInteger",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "shiftRight",
          "return": "java.math.BigInteger",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Number",
          "name": "shortValue",
          "return": "short",
          "parameters": []
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "shortValueExact",
          "return": "short",
          "parameters": []
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "signum",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "subtract",
          "return": "java.math.BigInteger",
          "parameters": [
            "java.math.BigInteger"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "testBit",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "toByteArray",
          "return": "[B",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "xor",
          "return": "java.math.BigInteger",
          "parameters": [
            "java.math.BigInteger"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.math.BigInteger",
          "name": "ONE",
          "type": "java.math.BigInteger"
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "TEN",
          "type": "java.math.BigInteger"
        },
        {
          "declaring": "java.math.BigInteger",
          "name": "ZERO",
          "type": "java.math.BigInteger"
        }
      ],
      "fields": []
    },
    {
      "name": "java.math.MathContext",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.math.MathContext",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.math.MathContext",
          "parameters": [
            "int",
            "java.math.RoundingMode"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.math.MathContext",
          "name": "getPrecision",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.math.MathContext",
          "name": "getRoundingMode",
          "return": "java.math.RoundingMode",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.math.MathContext",
          "name": "DECIMAL128",
          "type": "java.math.MathContext"
        },
        {
          "declaring": "java.math.MathContext",
          "name": "DECIMAL32",
          "type": "java.math.MathContext"
        },
        {
          "declaring": "java.math.MathContext",
          "name": "DECIMAL64",
          "type": "java.math.MathContext"
        },
        {
          "declaring": "java.math.MathContext",
          "name": "UNLIMITED",
          "type": "java.math.MathContext"
        }
      ],
      "fields": []
    },
    {
      "name": "java.math.RoundingMode",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.math.RoundingMode",
          "name": "valueOf",
          "return": "java.math.RoundingMode",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.math.RoundingMode",
          "name": "values",
          "return": "[Ljava.math.RoundingMode;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.math.RoundingMode",
          "name": "CEILING",
          "type": "java.math.RoundingMode"
        },
        {
          "declaring": "java.math.RoundingMode",
          "name": "DOWN",
          "type": "java.math.RoundingMode"
        },
        {
          "declaring": "java.math.RoundingMode",
          "name": "FLOOR",
          "type": "java.math.RoundingMode"
        },
        {
          "declaring": "java.math.RoundingMode",
          "name": "HALF_DOWN",
          "type": "java.math.RoundingMode"
        },
        {
          "declaring": "java.math.RoundingMode",
          "name": "HALF_EVEN",
          "type": "java.math.RoundingMode"
        },
        {
          "declaring": "java.math.RoundingMode",
          "name": "HALF_UP",
          "type": "java.math.RoundingMode"
        },
        {
          "declaring": "java.math.RoundingMode",
          "name": "UNNECESSARY",
          "type": "java.math.RoundingMode"
        },
        {
          "declaring": "java.math.RoundingMode",
          "name": "UP",
          "type": "java.math.RoundingMode"
        }
      ],
      "fields": []
    },
    {
      "name": "java.text.Annotation",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.text.Annotation",
          "parameters": [
            "java.lang.Object"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Annotation",
          "name": "getValue",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.AttributedCharacterIterator",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.text.CharacterIterator",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "current",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "first",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.AttributedCharacterIterator",
          "name": "getAllAttributeKeys",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.text.AttributedCharacterIterator",
          "name": "getAttribute",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.text.AttributedCharacterIterator$Attribute"
          ]
        },
        {
          "declaring": "java.text.AttributedCharacterIterator",
          "name": "getAttributes",
          "return": "java.util.Map",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "getBeginIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "getEndIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "getIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.AttributedCharacterIterator",
          "name": "getRunLimit",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.AttributedCharacterIterator",
          "name": "getRunLimit",
          "return": "int",
          "parameters": [
            "java.util.Set"
          ]
        },
        {
          "declaring": "java.text.AttributedCharacterIterator",
          "name": "getRunStart",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.AttributedCharacterIterator",
          "name": "getRunStart",
          "return": "int",
          "parameters": [
            "java.util.Set"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "last",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "next",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "previous",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "setIndex",
          "return": "char",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.AttributedCharacterIterator$Attribute",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.text.AttributedCharacterIterator$Attribute",
          "name": "INPUT_METHOD_SEGMENT",
          "type": "java.text.AttributedCharacterIterator$Attribute"
        },
        {
          "declaring": "java.text.AttributedCharacterIterator$Attribute",
          "name": "LANGUAGE",
          "type": "java.text.AttributedCharacterIterator$Attribute"
        },
        {
          "declaring": "java.text.AttributedCharacterIterator$Attribute",
          "name": "READING",
          "type": "java.text.AttributedCharacterIterator$Attribute"
        }
      ],
      "fields": []
    },
    {
      "name": "java.text.AttributedString",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.text.AttributedString",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.AttributedString",
          "parameters": [
            "java.lang.String",
            "java.util.Map"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.text.AttributedString",
          "name": "addAttribute",
          "return": "void",
          "parameters": [
            "java.text.AttributedCharacterIterator$Attribute",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.AttributedString",
          "name": "addAttribute",
          "return": "void",
          "parameters": [
            "java.text.AttributedCharacterIterator$Attribute",
            "java.lang.Object",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.text.AttributedString",
          "name": "addAttributes",
          "return": "void",
          "parameters": [
            "java.util.Map",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.AttributedString",
          "name": "getIterator",
          "return": "java.text.AttributedCharacterIterator",
          "parameters": []
        },
        {
          "declaring": "java.text.AttributedString",
          "name": "getIterator",
          "return": "java.text.AttributedCharacterIterator",
          "parameters": [
            "[Ljava.text.AttributedCharacterIterator$Attribute;"
          ]
        },
        {
          "declaring": "java.text.AttributedString",
          "name": "getIterator",
          "return": "java.text.AttributedCharacterIterator",
          "parameters": [
            "[Ljava.text.AttributedCharacterIterator$Attribute;",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.Bidi",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.text.Bidi",
          "parameters": [
            "java.text.AttributedCharacterIterator"
          ]
        },
        {
          "declaring": "java.text.Bidi",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.text.Bidi",
          "parameters": [
            "[C",
            "int",
            "[B",
            "int",
            "int",
            "int"
          ]
        }
      ],
      "static_methods": [
        {
          "declaring": "java.text.Bidi",
          "name": "reorderVisually",
          "return": "void",
          "parameters": [
            "[B",
            "int",
            "[Ljava.lang.Object;",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.text.Bidi",
          "name": "requiresBidi",
          "return": "boolean",
          "parameters": [
            "[C",
            "int",
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.text.Bidi",
          "name": "baseIsLeftToRight",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.text.Bidi",
          "name": "createLineBidi",
          "return": "java.text.Bidi",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Bidi",
          "name": "getBaseLevel",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.Bidi",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.Bidi",
          "name": "getLevelAt",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.Bidi",
          "name": "getRunCount",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.Bidi",
          "name": "getRunLevel",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.Bidi",
          "name": "getRunLimit",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.Bidi",
          "name": "getRunStart",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.Bidi",
          "name": "isLeftToRight",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.text.Bidi",
          "name": "isMixed",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.text.Bidi",
          "name": "isRightToLeft",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.text.Bidi",
          "name": "DIRECTION_DEFAULT_LEFT_TO_RIGHT",
          "type": "int"
        },
        {
          "declaring": "java.text.Bidi",
          "name": "DIRECTION_DEFAULT_RIGHT_TO_LEFT",
          "type": "int"
        },
        {
          "declaring": "java.text.Bidi",
          "name": "DIRECTION_LEFT_TO_RIGHT",
          "type": "int"
        },
        {
          "declaring": "java.text.Bidi",
          "name": "DIRECTION_RIGHT_TO_LEFT",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.text.BreakIterator",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.text.BreakIterator",
          "name": "getAvailableLocales",
          "return": "[Ljava.util.Locale;",
          "parameters": []
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "getCharacterInstance",
          "return": "java.text.BreakIterator",
          "parameters": []
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "getCharacterInstance",
          "return": "java.text.BreakIterator",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "getLineInstance",
          "return": "java.text.BreakIterator",
          "parameters": []
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "getLineInstance",
          "return": "java.text.BreakIterator",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "getSentenceInstance",
          "return": "java.text.BreakIterator",
          "parameters": []
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "getSentenceInstance",
          "return": "java.text.BreakIterator",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "getWordInstance",
          "return": "java.text.BreakIterator",
          "parameters": []
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "getWordInstance",
          "return": "java.text.BreakIterator",
          "parameters": [
            "java.util.Locale"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.text.BreakIterator",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "current",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "first",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "following",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "getText",
          "return": "java.text.CharacterIterator",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "isBoundary",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "last",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "next",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "next",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "preceding",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "previous",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.BreakIterator",
          "name": "setText",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.text.BreakIterator",
          "name": "DONE",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.text.CharacterIterator",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.text.CharacterIterator",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "current",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "first",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "getBeginIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "getEndIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "getIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "last",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "next",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "previous",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "setIndex",
          "return": "char",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.text.CharacterIterator",
          "name": "DONE",
          "type": "char"
        }
      ],
      "fields": []
    },
    {
      "name": "java.text.ChoiceFormat",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.text.ChoiceFormat",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.ChoiceFormat",
          "parameters": [
            "[D",
            "[Ljava.lang.String;"
          ]
        }
      ],
      "static_methods": [
        {
          "declaring": "java.text.ChoiceFormat",
          "name": "nextDouble",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.text.ChoiceFormat",
          "name": "nextDouble",
          "return": "double",
          "parameters": [
            "double",
            "boolean"
          ]
        },
        {
          "declaring": "java.text.ChoiceFormat",
          "name": "previousDouble",
          "return": "double",
          "parameters": [
            "double"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.text.ChoiceFormat",
          "name": "applyPattern",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "format",
          "return": "java.lang.StringBuffer",
          "parameters": [
            "java.lang.Object",
            "java.lang.StringBuffer",
            "java.text.FieldPosition"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "formatToCharacterIterator",
          "return": "java.text.AttributedCharacterIterator",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getCurrency",
          "return": "java.util.Currency",
          "parameters": []
        },
        {
          "declaring": "java.text.ChoiceFormat",
          "name": "getFormats",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.text.ChoiceFormat",
          "name": "getLimits",
          "return": "[D",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getMaximumFractionDigits",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getMaximumIntegerDigits",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getMinimumFractionDigits",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getMinimumIntegerDigits",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getRoundingMode",
          "return": "java.math.RoundingMode",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "isGroupingUsed",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "isParseIntegerOnly",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "parse",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "parse",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.String",
            "java.text.ParsePosition"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "parseObject",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "parseObject",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.text.ParsePosition"
          ]
        },
        {
          "declaring": "java.text.ChoiceFormat",
          "name": "setChoices",
          "return": "void",
          "parameters": [
            "[D",
            "[Ljava.lang.String;"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setCurrency",
          "return": "void",
          "parameters": [
            "java.util.Currency"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setGroupingUsed",
          "return": "void",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setMaximumFractionDigits",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setMaximumIntegerDigits",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setMinimumFractionDigits",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setMinimumIntegerDigits",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setParseIntegerOnly",
          "return": "void",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setRoundingMode",
          "return": "void",
          "parameters": [
            "java.math.RoundingMode"
          ]
        },
        {
          "declaring": "java.text.ChoiceFormat",
          "name": "toPattern",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.CollationElementIterator",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.text.CollationElementIterator",
          "name": "primaryOrder",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.CollationElementIterator",
          "name": "secondaryOrder",
          "return": "short",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.CollationElementIterator",
          "name": "tertiaryOrder",
          "return": "short",
          "parameters": [
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.CollationElementIterator",
          "name": "getMaxExpansion",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.CollationElementIterator",
          "name": "getOffset",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.CollationElementIterator",
          "name": "next",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.CollationElementIterator",
          "name": "previous",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.CollationElementIterator",
          "name": "reset",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.text.CollationElementIterator",
          "name": "setOffset",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.CollationElementIterator",
          "name": "setText",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.text.CollationElementIterator",
          "name": "NULLORDER",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.text.CollationKey",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.text.CollationKey",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.text.CollationKey"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.CollationKey",
          "name": "getSourceString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.CollationKey",
          "name": "toByteArray",
          "return": "[B",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.Collator",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.text.Collator",
          "name": "getAvailableLocales",
          "return": "[Ljava.util.Locale;",
          "parameters": []
        },
        {
          "declaring": "java.text.Collator",
          "name": "getInstance",
          "return": "java.text.Collator",
          "parameters": []
        },
        {
          "declaring": "java.text.Collator",
          "name": "getInstance",
          "return": "java.text.Collator",
          "parameters": [
            "java.util.Locale"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.text.Collator",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Comparator",
          "name": "compare",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Collator",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Collator",
          "name": "getCollationKey",
          "return": "java.text.CollationKey",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Collator",
          "name": "getDecomposition",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.Collator",
          "name": "getStrength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Comparator",
          "name": "reversed",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.text.Collator",
          "name": "setDecomposition",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.Collator",
          "name": "setStrength",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "thenComparing",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "thenComparing",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.Function",
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "thenComparingDouble",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "thenComparingInt",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.ToIntFunction"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "thenComparingLong",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.ToLongFunction"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.text.Collator",
          "name": "CANONICAL_DECOMPOSITION",
          "type": "int"
        },
        {
          "declaring": "java.text.Collator",
          "name": "FULL_DECOMPOSITION",
          "type": "int"
        },
        {
          "declaring": "java.text.Collator",
          "name": "IDENTICAL",
          "type": "int"
        },
        {
          "declaring": "java.text.Collator",
          "name": "NO_DECOMPOSITION",
          "type": "int"
        },
        {
          "declaring": "java.text.Collator",
          "name": "PRIMARY",
          "type": "int"
        },
        {
          "declaring": "java.text.Collator",
          "name": "SECONDARY",
          "type": "int"
        },
        {
          "declaring": "java.text.Collator",
          "name": "TERTIARY",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.text.DateFormat",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.text.DateFormat",
          "name": "getAvailableLocales",
          "return": "[Ljava.util.Locale;",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getDateInstance",
          "return": "java.text.DateFormat",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getDateInstance",
          "return": "java.text.DateFormat",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getDateInstance",
          "return": "java.text.DateFormat",
          "parameters": [
            "int",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getDateTimeInstance",
          "return": "java.text.DateFormat",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getDateTimeInstance",
          "return": "java.text.DateFormat",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getDateTimeInstance",
          "return": "java.text.DateFormat",
          "parameters": [
            "int",
            "int",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getInstance",
          "return": "java.text.DateFormat",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getTimeInstance",
          "return": "java.text.DateFormat",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getTimeInstance",
          "return": "java.text.DateFormat",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getTimeInstance",
          "return": "java.text.DateFormat",
          "parameters": [
            "int",
            "java.util.Locale"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.text.Format",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "format",
          "return": "java.lang.StringBuffer",
          "parameters": [
            "java.lang.Object",
            "java.lang.StringBuffer",
            "java.text.FieldPosition"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "formatToCharacterIterator",
          "return": "java.text.AttributedCharacterIterator",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getCalendar",
          "return": "java.util.Calendar",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getNumberFormat",
          "return": "java.text.NumberFormat",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getTimeZone",
          "return": "java.util.TimeZone",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "isLenient",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "parse",
          "return": "java.util.Date",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "parse",
          "return": "java.util.Date",
          "parameters": [
            "java.lang.String",
            "java.text.ParsePosition"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "parseObject",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "parseObject",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.text.ParsePosition"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "setCalendar",
          "return": "void",
          "parameters": [
            "java.util.Calendar"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "setLenient",
          "return": "void",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "setNumberFormat",
          "return": "void",
          "parameters": [
            "java.text.NumberFormat"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "setTimeZone",
          "return": "void",
          "parameters": [
            "java.util.TimeZone"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.text.DateFormat",
          "name": "AM_PM_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "DATE_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "DAY_OF_WEEK_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "DAY_OF_WEEK_IN_MONTH_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "DAY_OF_YEAR_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "DEFAULT",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "ERA_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "FULL",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "HOUR0_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "HOUR1_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "HOUR_OF_DAY0_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "HOUR_OF_DAY1_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "LONG",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "MEDIUM",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "MILLISECOND_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "MINUTE_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "MONTH_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "SECOND_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "SHORT",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "TIMEZONE_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "WEEK_OF_MONTH_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "WEEK_OF_YEAR_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "YEAR_FIELD",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.text.DateFormat$Field",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "ofCalendarField",
          "return": "java.text.DateFormat$Field",
          "parameters": [
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "getCalendarField",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "AM_PM",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "DAY_OF_MONTH",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "DAY_OF_WEEK",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "DAY_OF_WEEK_IN_MONTH",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "DAY_OF_YEAR",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "ERA",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "HOUR0",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "HOUR1",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "HOUR_OF_DAY0",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "HOUR_OF_DAY1",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "MILLISECOND",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "MINUTE",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "MONTH",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "SECOND",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "TIME_ZONE",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "WEEK_OF_MONTH",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "WEEK_OF_YEAR",
          "type": "java.text.DateFormat$Field"
        },
        {
          "declaring": "java.text.DateFormat$Field",
          "name": "YEAR",
          "type": "java.text.DateFormat$Field"
        }
      ],
      "fields": []
    },
    {
      "name": "java.text.DateFormatSymbols",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.text.DateFormatSymbols",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "parameters": [
            "java.util.Locale"
          ]
        }
      ],
      "static_methods": [
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "getAvailableLocales",
          "return": "[Ljava.util.Locale;",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "getInstance",
          "return": "java.text.DateFormatSymbols",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "getInstance",
          "return": "java.text.DateFormatSymbols",
          "parameters": [
            "java.util.Locale"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "getAmPmStrings",
          "return": "[Ljava.lang.String;",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "getEras",
          "return": "[Ljava.lang.String;",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "getLocalPatternChars",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "getMonths",
          "return": "[Ljava.lang.String;",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "getShortMonths",
          "return": "[Ljava.lang.String;",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "getShortWeekdays",
          "return": "[Ljava.lang.String;",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "getWeekdays",
          "return": "[Ljava.lang.String;",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "getZoneStrings",
          "return": "[[Ljava.lang.String;",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "setAmPmStrings",
          "return": "void",
          "parameters": [
            "[Ljava.lang.String;"
          ]
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "setEras",
          "return": "void",
          "parameters": [
            "[Ljava.lang.String;"
          ]
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "setLocalPatternChars",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "setMonths",
          "return": "void",
          "parameters": [
            "[Ljava.lang.String;"
          ]
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "setShortMonths",
          "return": "void",
          "parameters": [
            "[Ljava.lang.String;"
          ]
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "setShortWeekdays",
          "return": "void",
          "parameters": [
            "[Ljava.lang.String;"
          ]
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "setWeekdays",
          "return": "void",
          "parameters": [
            "[Ljava.lang.String;"
          ]
        },
        {
          "declaring": "java.text.DateFormatSymbols",
          "name": "setZoneStrings",
          "return": "void",
          "parameters": [
            "[[Ljava.lang.String;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.DecimalFormat",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.text.DecimalFormat",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormat",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.DecimalFormat",
          "parameters": [
            "java.lang.String",
            "java.text.DecimalFormatSymbols"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.text.DecimalFormat",
          "name": "applyLocalizedPattern",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "applyPattern",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "format",
          "return": "java.lang.StringBuffer",
          "parameters": [
            "java.lang.Object",
            "java.lang.StringBuffer",
            "java.text.FieldPosition"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "formatToCharacterIterator",
          "return": "java.text.AttributedCharacterIterator",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getCurrency",
          "return": "java.util.Currency",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "getDecimalFormatSymbols",
          "return": "java.text.DecimalFormatSymbols",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "getGroupingSize",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getMaximumFractionDigits",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getMaximumIntegerDigits",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getMinimumFractionDigits",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getMinimumIntegerDigits",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "getMultiplier",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "getNegativePrefix",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "getNegativeSuffix",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "getPositivePrefix",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "getPositiveSuffix",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getRoundingMode",
          "return": "java.math.RoundingMode",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "isDecimalSeparatorAlwaysShown",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "isGroupingUsed",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "isParseBigDecimal",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "isParseIntegerOnly",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "parse",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "parse",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.String",
            "java.text.ParsePosition"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "parseObject",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "parseObject",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.text.ParsePosition"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setCurrency",
          "return": "void",
          "parameters": [
            "java.util.Currency"
          ]
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "setDecimalFormatSymbols",
          "return": "void",
          "parameters": [
            "java.text.DecimalFormatSymbols"
          ]
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "setDecimalSeparatorAlwaysShown",
          "return": "void",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "setGroupingSize",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setGroupingUsed",
          "return": "void",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setMaximumFractionDigits",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setMaximumIntegerDigits",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setMinimumFractionDigits",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setMinimumIntegerDigits",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "setMultiplier",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "setNegativePrefix",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "setNegativeSuffix",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "setParseBigDecimal",
          "return": "void",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setParseIntegerOnly",
          "return": "void",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "setPositivePrefix",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "setPositiveSuffix",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setRoundingMode",
          "return": "void",
          "parameters": [
            "java.math.RoundingMode"
          ]
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "toLocalizedPattern",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormat",
          "name": "toPattern",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.DecimalFormatSymbols",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "parameters": [
            "java.util.Locale"
          ]
        }
      ],
      "static_methods": [
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getAvailableLocales",
          "return": "[Ljava.util.Locale;",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getInstance",
          "return": "java.text.DecimalFormatSymbols",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getInstance",
          "return": "java.text.DecimalFormatSymbols",
          "parameters": [
            "java.util.Locale"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getCurrency",
          "return": "java.util.Currency",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getCurrencySymbol",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getDecimalSeparator",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getDigit",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getExponentSeparator",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getGroupingSeparator",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getInfinity",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getInternationalCurrencySymbol",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getMinusSign",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getMonetaryDecimalSeparator",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getNaN",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getPatternSeparator",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getPerMill",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getPercent",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "getZeroDigit",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "setCurrency",
          "return": "void",
          "parameters": [
            "java.util.Currency"
          ]
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "setCurrencySymbol",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "setDecimalSeparator",
          "return": "void",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "setDigit",
          "return": "void",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "setExponentSeparator",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "setGroupingSeparator",
          "return": "void",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "setInfinity",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "setInternationalCurrencySymbol",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "setMinusSign",
          "return": "void",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "setMonetaryDecimalSeparator",
          "return": "void",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "setNaN",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "setPatternSeparator",
          "return": "void",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "setPerMill",
          "return": "void",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "setPercent",
          "return": "void",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.text.DecimalFormatSymbols",
          "name": "setZeroDigit",
          "return": "void",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.FieldPosition",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.text.FieldPosition",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.FieldPosition",
          "parameters": [
            "java.text.Format$Field",
            "int"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.FieldPosition",
          "name": "getBeginIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.FieldPosition",
          "name": "getEndIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.FieldPosition",
          "name": "getField",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.FieldPosition",
          "name": "getFieldAttribute",
          "return": "java.text.Format$Field",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.FieldPosition",
          "name": "setBeginIndex",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.FieldPosition",
          "name": "setEndIndex",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.Format",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.text.Format",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "format",
          "return": "java.lang.StringBuffer",
          "parameters": [
            "java.lang.Object",
            "java.lang.StringBuffer",
            "java.text.FieldPosition"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "formatToCharacterIterator",
          "return": "java.text.AttributedCharacterIterator",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.Format",
          "name": "parseObject",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "parseObject",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.text.ParsePosition"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.Format$Field",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.MessageFormat",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.text.MessageFormat",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String",
            "[Ljava.lang.Object;"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.text.MessageFormat",
          "name": "applyPattern",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "format",
          "return": "java.lang.StringBuffer",
          "parameters": [
            "java.lang.Object",
            "java.lang.StringBuffer",
            "java.text.FieldPosition"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "formatToCharacterIterator",
          "return": "java.text.AttributedCharacterIterator",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.MessageFormat",
          "name": "getFormats",
          "return": "[Ljava.text.Format;",
          "parameters": []
        },
        {
          "declaring": "java.text.MessageFormat",
          "name": "getFormatsByArgumentIndex",
          "return": "[Ljava.text.Format;",
          "parameters": []
        },
        {
          "declaring": "java.text.MessageFormat",
          "name": "getLocale",
          "return": "java.util.Locale",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.MessageFormat",
          "name": "parse",
          "return": "[Ljava.lang.Object;",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.MessageFormat",
          "name": "parse",
          "return": "[Ljava.lang.Object;",
          "parameters": [
            "java.lang.String",
            "java.text.ParsePosition"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "parseObject",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "parseObject",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.text.ParsePosition"
          ]
        },
        {
          "declaring": "java.text.MessageFormat",
          "name": "setFormat",
          "return": "void",
          "parameters": [
            "int",
            "java.text.Format"
          ]
        },
        {
          "declaring": "java.text.MessageFormat",
          "name": "setFormatByArgumentIndex",
          "return": "void",
          "parameters": [
            "int",
            "java.text.Format"
          ]
        },
        {
          "declaring": "java.text.MessageFormat",
          "name": "setFormats",
          "return": "void",
          "parameters": [
            "[Ljava.text.Format;"
          ]
        },
        {
          "declaring": "java.text.MessageFormat",
          "name": "setFormatsByArgumentIndex",
          "return": "void",
          "parameters": [
            "[Ljava.text.Format;"
          ]
        },
        {
          "declaring": "java.text.MessageFormat",
          "name": "setLocale",
          "return": "void",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.text.MessageFormat",
          "name": "toPattern",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.MessageFormat$Field",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.text.MessageFormat$Field",
          "name": "ARGUMENT",
          "type": "java.text.MessageFormat$Field"
        }
      ],
      "fields": []
    },
    {
      "name": "java.text.Normalizer",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.text.Normalizer",
          "name": "isNormalized",
          "return": "boolean",
          "parameters": [
            "java.lang.CharSequence",
            "java.text.Normalizer$Form"
          ]
        },
        {
          "declaring": "java.text.Normalizer",
          "name": "normalize",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.CharSequence",
            "java.text.Normalizer$Form"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.Normalizer$Form",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.text.Normalizer$Form",
          "name": "valueOf",
          "return": "java.text.Normalizer$Form",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Normalizer$Form",
          "name": "values",
          "return": "[Ljava.text.Normalizer$Form;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.text.Normalizer$Form",
          "name": "NFC",
          "type": "java.text.Normalizer$Form"
        },
        {
          "declaring": "java.text.Normalizer$Form",
          "name": "NFD",
          "type": "java.text.Normalizer$Form"
        },
        {
          "declaring": "java.text.Normalizer$Form",
          "name": "NFKC",
          "type": "java.text.Normalizer$Form"
        },
        {
          "declaring": "java.text.Normalizer$Form",
          "name": "NFKD",
          "type": "java.text.Normalizer$Form"
        }
      ],
      "fields": []
    },
    {
      "name": "java.text.NumberFormat",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.text.NumberFormat",
          "name": "getAvailableLocales",
          "return": "[Ljava.util.Locale;",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getCurrencyInstance",
          "return": "java.text.NumberFormat",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getCurrencyInstance",
          "return": "java.text.NumberFormat",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getInstance",
          "return": "java.text.NumberFormat",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getInstance",
          "return": "java.text.NumberFormat",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getIntegerInstance",
          "return": "java.text.NumberFormat",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getIntegerInstance",
          "return": "java.text.NumberFormat",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getNumberInstance",
          "return": "java.text.NumberFormat",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getNumberInstance",
          "return": "java.text.NumberFormat",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getPercentInstance",
          "return": "java.text.NumberFormat",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getPercentInstance",
          "return": "java.text.NumberFormat",
          "parameters": [
            "java.util.Locale"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.text.Format",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "format",
          "return": "java.lang.StringBuffer",
          "parameters": [
            "java.lang.Object",
            "java.lang.StringBuffer",
            "java.text.FieldPosition"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "formatToCharacterIterator",
          "return": "java.text.AttributedCharacterIterator",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getCurrency",
          "return": "java.util.Currency",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getMaximumFractionDigits",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getMaximumIntegerDigits",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getMinimumFractionDigits",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getMinimumIntegerDigits",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "getRoundingMode",
          "return": "java.math.RoundingMode",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "isGroupingUsed",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "isParseIntegerOnly",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "parse",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "parse",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.String",
            "java.text.ParsePosition"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "parseObject",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "parseObject",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.text.ParsePosition"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setCurrency",
          "return": "void",
          "parameters": [
            "java.util.Currency"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setGroupingUsed",
          "return": "void",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setMaximumFractionDigits",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setMaximumIntegerDigits",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setMinimumFractionDigits",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setMinimumIntegerDigits",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setParseIntegerOnly",
          "return": "void",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "setRoundingMode",
          "return": "void",
          "parameters": [
            "java.math.RoundingMode"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.text.NumberFormat",
          "name": "FRACTION_FIELD",
          "type": "int"
        },
        {
          "declaring": "java.text.NumberFormat",
          "name": "INTEGER_FIELD",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.text.NumberFormat$Field",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.text.NumberFormat$Field",
          "name": "CURRENCY",
          "type": "java.text.NumberFormat$Field"
        },
        {
          "declaring": "java.text.NumberFormat$Field",
          "name": "DECIMAL_SEPARATOR",
          "type": "java.text.NumberFormat$Field"
        },
        {
          "declaring": "java.text.NumberFormat$Field",
          "name": "EXPONENT",
          "type": "java.text.NumberFormat$Field"
        },
        {
          "declaring": "java.text.NumberFormat$Field",
          "name": "EXPONENT_SIGN",
          "type": "java.text.NumberFormat$Field"
        },
        {
          "declaring": "java.text.NumberFormat$Field",
          "name": "EXPONENT_SYMBOL",
          "type": "java.text.NumberFormat$Field"
        },
        {
          "declaring": "java.text.NumberFormat$Field",
          "name": "FRACTION",
          "type": "java.text.NumberFormat$Field"
        },
        {
          "declaring": "java.text.NumberFormat$Field",
          "name": "GROUPING_SEPARATOR",
          "type": "java.text.NumberFormat$Field"
        },
        {
          "declaring": "java.text.NumberFormat$Field",
          "name": "INTEGER",
          "type": "java.text.NumberFormat$Field"
        },
        {
          "declaring": "java.text.NumberFormat$Field",
          "name": "PERCENT",
          "type": "java.text.NumberFormat$Field"
        },
        {
          "declaring": "java.text.NumberFormat$Field",
          "name": "PERMILLE",
          "type": "java.text.NumberFormat$Field"
        },
        {
          "declaring": "java.text.NumberFormat$Field",
          "name": "SIGN",
          "type": "java.text.NumberFormat$Field"
        }
      ],
      "fields": []
    },
    {
      "name": "java.text.ParseException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.text.ParseException",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.ParseException",
          "name": "getErrorOffset",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.ParsePosition",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.text.ParsePosition",
          "parameters": [
            "int"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.ParsePosition",
          "name": "getErrorIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.ParsePosition",
          "name": "getIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.ParsePosition",
          "name": "setErrorIndex",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.ParsePosition",
          "name": "setIndex",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.RuleBasedCollator",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.text.RuleBasedCollator",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.text.Collator",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Comparator",
          "name": "compare",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Collator",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.RuleBasedCollator",
          "name": "getCollationElementIterator",
          "return": "java.text.CollationElementIterator",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Collator",
          "name": "getCollationKey",
          "return": "java.text.CollationKey",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Collator",
          "name": "getDecomposition",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.RuleBasedCollator",
          "name": "getRules",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.text.Collator",
          "name": "getStrength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Comparator",
          "name": "reversed",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.text.Collator",
          "name": "setDecomposition",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.Collator",
          "name": "setStrength",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "thenComparing",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "thenComparing",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.Function",
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "thenComparingDouble",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "thenComparingInt",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.ToIntFunction"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "thenComparingLong",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.ToLongFunction"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.SimpleDateFormat",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.text.SimpleDateFormat",
          "parameters": []
        },
        {
          "declaring": "java.text.SimpleDateFormat",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.SimpleDateFormat",
          "parameters": [
            "java.lang.String",
            "java.util.Locale"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.text.SimpleDateFormat",
          "name": "applyLocalizedPattern",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.SimpleDateFormat",
          "name": "applyPattern",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "format",
          "return": "java.lang.StringBuffer",
          "parameters": [
            "java.lang.Object",
            "java.lang.StringBuffer",
            "java.text.FieldPosition"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "formatToCharacterIterator",
          "return": "java.text.AttributedCharacterIterator",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.SimpleDateFormat",
          "name": "get2DigitYearStart",
          "return": "java.util.Date",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getCalendar",
          "return": "java.util.Calendar",
          "parameters": []
        },
        {
          "declaring": "java.text.SimpleDateFormat",
          "name": "getDateFormatSymbols",
          "return": "java.text.DateFormatSymbols",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getNumberFormat",
          "return": "java.text.NumberFormat",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "getTimeZone",
          "return": "java.util.TimeZone",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "isLenient",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "parse",
          "return": "java.util.Date",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "parse",
          "return": "java.util.Date",
          "parameters": [
            "java.lang.String",
            "java.text.ParsePosition"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "parseObject",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.Format",
          "name": "parseObject",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.text.ParsePosition"
          ]
        },
        {
          "declaring": "java.text.SimpleDateFormat",
          "name": "set2DigitYearStart",
          "return": "void",
          "parameters": [
            "java.util.Date"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "setCalendar",
          "return": "void",
          "parameters": [
            "java.util.Calendar"
          ]
        },
        {
          "declaring": "java.text.SimpleDateFormat",
          "name": "setDateFormatSymbols",
          "return": "void",
          "parameters": [
            "java.text.DateFormatSymbols"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "setLenient",
          "return": "void",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "setNumberFormat",
          "return": "void",
          "parameters": [
            "java.text.NumberFormat"
          ]
        },
        {
          "declaring": "java.text.DateFormat",
          "name": "setTimeZone",
          "return": "void",
          "parameters": [
            "java.util.TimeZone"
          ]
        },
        {
          "declaring": "java.text.SimpleDateFormat",
          "name": "toLocalizedPattern",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.text.SimpleDateFormat",
          "name": "toPattern",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.text.StringCharacterIterator",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.text.StringCharacterIterator",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.text.StringCharacterIterator",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        },
        {
          "declaring": "java.text.StringCharacterIterator",
          "parameters": [
            "java.lang.String",
            "int",
            "int",
            "int"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.text.CharacterIterator",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "current",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "first",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "getBeginIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "getEndIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "getIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "last",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "next",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "previous",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.text.CharacterIterator",
          "name": "setIndex",
          "return": "char",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.text.StringCharacterIterator",
          "name": "setText",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.Clock",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.Clock",
          "name": "fixed",
          "return": "java.time.Clock",
          "parameters": [
            "java.time.Instant",
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.Clock",
          "name": "offset",
          "return": "java.time.Clock",
          "parameters": [
            "java.time.Clock",
            "java.time.Duration"
          ]
        },
        {
          "declaring": "java.time.Clock",
          "name": "tick",
          "return": "java.time.Clock",
          "parameters": [
            "java.time.Clock",
            "java.time.Duration"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.Clock",
          "name": "getZone",
          "return": "java.time.ZoneId",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.Clock",
          "name": "instant",
          "return": "java.time.Instant",
          "parameters": []
        },
        {
          "declaring": "java.time.Clock",
          "name": "millis",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.DateTimeException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.time.DateTimeException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.DayOfWeek",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.DayOfWeek",
          "name": "from",
          "return": "java.time.DayOfWeek",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.DayOfWeek",
          "name": "of",
          "return": "java.time.DayOfWeek",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.DayOfWeek",
          "name": "valueOf",
          "return": "java.time.DayOfWeek",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.DayOfWeek",
          "name": "values",
          "return": "[Ljava.time.DayOfWeek;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.DayOfWeek",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.DayOfWeek",
          "name": "getValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.DayOfWeek",
          "name": "minus",
          "return": "java.time.DayOfWeek",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.DayOfWeek",
          "name": "plus",
          "return": "java.time.DayOfWeek",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.DayOfWeek",
          "name": "FRIDAY",
          "type": "java.time.DayOfWeek"
        },
        {
          "declaring": "java.time.DayOfWeek",
          "name": "MONDAY",
          "type": "java.time.DayOfWeek"
        },
        {
          "declaring": "java.time.DayOfWeek",
          "name": "SATURDAY",
          "type": "java.time.DayOfWeek"
        },
        {
          "declaring": "java.time.DayOfWeek",
          "name": "SUNDAY",
          "type": "java.time.DayOfWeek"
        },
        {
          "declaring": "java.time.DayOfWeek",
          "name": "THURSDAY",
          "type": "java.time.DayOfWeek"
        },
        {
          "declaring": "java.time.DayOfWeek",
          "name": "TUESDAY",
          "type": "java.time.DayOfWeek"
        },
        {
          "declaring": "java.time.DayOfWeek",
          "name": "WEDNESDAY",
          "type": "java.time.DayOfWeek"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.Duration",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.Duration",
          "name": "between",
          "return": "java.time.Duration",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "from",
          "return": "java.time.Duration",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "of",
          "return": "java.time.Duration",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "ofDays",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "ofHours",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "ofMillis",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "ofMinutes",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "ofNanos",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "ofSeconds",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "ofSeconds",
          "return": "java.time.Duration",
          "parameters": [
            "long",
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "parse",
          "return": "java.time.Duration",
          "parameters": [
            "java.lang.CharSequence"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.Duration",
          "name": "abs",
          "return": "java.time.Duration",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAmount",
          "name": "addTo",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.Duration"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "dividedBy",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAmount",
          "name": "get",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "getNano",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.Duration",
          "name": "getSeconds",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAmount",
          "name": "getUnits",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.Duration",
          "name": "isNegative",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.Duration",
          "name": "isZero",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.Duration",
          "name": "minus",
          "return": "java.time.Duration",
          "parameters": [
            "java.time.Duration"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "minus",
          "return": "java.time.Duration",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "minusDays",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "minusHours",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "minusMillis",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "minusMinutes",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "minusNanos",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "minusSeconds",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "multipliedBy",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "negated",
          "return": "java.time.Duration",
          "parameters": []
        },
        {
          "declaring": "java.time.Duration",
          "name": "plus",
          "return": "java.time.Duration",
          "parameters": [
            "java.time.Duration"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "plus",
          "return": "java.time.Duration",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "plusDays",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "plusHours",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "plusMillis",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "plusMinutes",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "plusNanos",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "plusSeconds",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAmount",
          "name": "subtractFrom",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "toDays",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.Duration",
          "name": "toHours",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.Duration",
          "name": "toMillis",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.Duration",
          "name": "toMinutes",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.Duration",
          "name": "toNanos",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.Duration",
          "name": "withNanos",
          "return": "java.time.Duration",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.Duration",
          "name": "withSeconds",
          "return": "java.time.Duration",
          "parameters": [
            "long"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.Duration",
          "name": "ZERO",
          "type": "java.time.Duration"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.Instant",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.Instant",
          "name": "from",
          "return": "java.time.Instant",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "ofEpochMilli",
          "return": "java.time.Instant",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "ofEpochSecond",
          "return": "java.time.Instant",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "ofEpochSecond",
          "return": "java.time.Instant",
          "parameters": [
            "long",
            "long"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "parse",
          "return": "java.time.Instant",
          "parameters": [
            "java.lang.CharSequence"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "atOffset",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "atZone",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.Instant"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "getEpochSecond",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "getNano",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.Instant",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.Instant"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.Instant"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "minus",
          "return": "java.time.Instant",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "minus",
          "return": "java.time.Instant",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "minusMillis",
          "return": "java.time.Instant",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "minusNanos",
          "return": "java.time.Instant",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "minusSeconds",
          "return": "java.time.Instant",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "plus",
          "return": "java.time.Instant",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "plus",
          "return": "java.time.Instant",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "plusMillis",
          "return": "java.time.Instant",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "plusNanos",
          "return": "java.time.Instant",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "plusSeconds",
          "return": "java.time.Instant",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.Instant",
          "name": "truncatedTo",
          "return": "java.time.Instant",
          "parameters": [
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "with",
          "return": "java.time.Instant",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.Instant",
          "name": "with",
          "return": "java.time.Instant",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.Instant",
          "name": "EPOCH",
          "type": "java.time.Instant"
        },
        {
          "declaring": "java.time.Instant",
          "name": "MAX",
          "type": "java.time.Instant"
        },
        {
          "declaring": "java.time.Instant",
          "name": "MIN",
          "type": "java.time.Instant"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.LocalDate",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.LocalDate",
          "name": "from",
          "return": "java.time.LocalDate",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "of",
          "return": "java.time.LocalDate",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "ofEpochDay",
          "return": "java.time.LocalDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "ofYearDay",
          "return": "java.time.LocalDate",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "parse",
          "return": "java.time.LocalDate",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "parse",
          "return": "java.time.LocalDate",
          "parameters": [
            "java.lang.CharSequence",
            "java.time.format.DateTimeFormatter"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "atStartOfDay",
          "return": "java.time.LocalDateTime",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "atStartOfDay",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "atTime",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "java.time.LocalTime"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "atTime",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "atTime",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "atTime",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "getChronology",
          "return": "java.time.chrono.IsoChronology",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "getDayOfMonth",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "getDayOfWeek",
          "return": "java.time.DayOfWeek",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "getDayOfYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "getEra",
          "return": "java.time.chrono.Era",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "getMonth",
          "return": "java.time.Month",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "getMonthValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "getYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isEqual",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isLeapYear",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "lengthOfMonth",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "lengthOfYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "minus",
          "return": "java.time.LocalDate",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "minus",
          "return": "java.time.LocalDate",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "minusDays",
          "return": "java.time.LocalDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "minusMonths",
          "return": "java.time.LocalDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "minusWeeks",
          "return": "java.time.LocalDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "minusYears",
          "return": "java.time.LocalDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "plus",
          "return": "java.time.LocalDate",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "plus",
          "return": "java.time.LocalDate",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "plusDays",
          "return": "java.time.LocalDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "plusMonths",
          "return": "java.time.LocalDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "plusWeeks",
          "return": "java.time.LocalDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "plusYears",
          "return": "java.time.LocalDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "toEpochDay",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "until",
          "return": "java.time.Period",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "with",
          "return": "java.time.LocalDate",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "with",
          "return": "java.time.LocalDate",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "withDayOfMonth",
          "return": "java.time.LocalDate",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "withDayOfYear",
          "return": "java.time.LocalDate",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "withMonth",
          "return": "java.time.LocalDate",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "withYear",
          "return": "java.time.LocalDate",
          "parameters": [
            "int"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.LocalDate",
          "name": "MAX",
          "type": "java.time.LocalDate"
        },
        {
          "declaring": "java.time.LocalDate",
          "name": "MIN",
          "type": "java.time.LocalDate"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.LocalDateTime",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.LocalDateTime",
          "name": "from",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "of",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "java.time.LocalDate",
            "java.time.LocalTime"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "of",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "of",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "of",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "ofEpochSecond",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long",
            "int",
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "ofInstant",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "java.time.Instant",
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "parse",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "parse",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "java.lang.CharSequence",
            "java.time.format.DateTimeFormatter"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "atOffset",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "atZone",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.ChronoLocalDateTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "getChronology",
          "return": "java.time.chrono.Chronology",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "getDayOfMonth",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "getDayOfWeek",
          "return": "java.time.DayOfWeek",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "getDayOfYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "getHour",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "getMinute",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "getMonth",
          "return": "java.time.Month",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "getMonthValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "getNano",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "getSecond",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "getYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDateTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDateTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "isEqual",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDateTime"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "minus",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "minus",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "minusDays",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "minusHours",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "minusMinutes",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "minusMonths",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "minusNanos",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "minusSeconds",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "minusWeeks",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "minusYears",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "plus",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "plus",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "plusDays",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "plusHours",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "plusMinutes",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "plusMonths",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "plusNanos",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "plusSeconds",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "plusWeeks",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "plusYears",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "toEpochSecond",
          "return": "long",
          "parameters": [
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "toInstant",
          "return": "java.time.Instant",
          "parameters": [
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "toLocalDate",
          "return": "java.time.LocalDate",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "toLocalTime",
          "return": "java.time.LocalTime",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "truncatedTo",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "with",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "with",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "withDayOfMonth",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "withDayOfYear",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "withHour",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "withMinute",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "withMonth",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "withSecond",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "withYear",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "int"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.LocalDateTime",
          "name": "MAX",
          "type": "java.time.LocalDateTime"
        },
        {
          "declaring": "java.time.LocalDateTime",
          "name": "MIN",
          "type": "java.time.LocalDateTime"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.LocalTime",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.LocalTime",
          "name": "from",
          "return": "java.time.LocalTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "of",
          "return": "java.time.LocalTime",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "of",
          "return": "java.time.LocalTime",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "of",
          "return": "java.time.LocalTime",
          "parameters": [
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "ofNanoOfDay",
          "return": "java.time.LocalTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "ofSecondOfDay",
          "return": "java.time.LocalTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "parse",
          "return": "java.time.LocalTime",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "parse",
          "return": "java.time.LocalTime",
          "parameters": [
            "java.lang.CharSequence",
            "java.time.format.DateTimeFormatter"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "atDate",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "java.time.LocalDate"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "atOffset",
          "return": "java.time.OffsetTime",
          "parameters": [
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.LocalTime"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "getHour",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "getMinute",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "getNano",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "getSecond",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.LocalTime"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.LocalTime"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "minus",
          "return": "java.time.LocalTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "minus",
          "return": "java.time.LocalTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "minusHours",
          "return": "java.time.LocalTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "minusMinutes",
          "return": "java.time.LocalTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "minusNanos",
          "return": "java.time.LocalTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "minusSeconds",
          "return": "java.time.LocalTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "plus",
          "return": "java.time.LocalTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "plus",
          "return": "java.time.LocalTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "plusHours",
          "return": "java.time.LocalTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "plusMinutes",
          "return": "java.time.LocalTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "plusNanos",
          "return": "java.time.LocalTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "plusSeconds",
          "return": "java.time.LocalTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "toNanoOfDay",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "toSecondOfDay",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "truncatedTo",
          "return": "java.time.LocalTime",
          "parameters": [
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "with",
          "return": "java.time.LocalTime",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "with",
          "return": "java.time.LocalTime",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "withHour",
          "return": "java.time.LocalTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "withMinute",
          "return": "java.time.LocalTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "withNano",
          "return": "java.time.LocalTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "withSecond",
          "return": "java.time.LocalTime",
          "parameters": [
            "int"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.LocalTime",
          "name": "MAX",
          "type": "java.time.LocalTime"
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "MIDNIGHT",
          "type": "java.time.LocalTime"
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "MIN",
          "type": "java.time.LocalTime"
        },
        {
          "declaring": "java.time.LocalTime",
          "name": "NOON",
          "type": "java.time.LocalTime"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.Month",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.Month",
          "name": "from",
          "return": "java.time.Month",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.Month",
          "name": "of",
          "return": "java.time.Month",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.Month",
          "name": "valueOf",
          "return": "java.time.Month",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.Month",
          "name": "values",
          "return": "[Ljava.time.Month;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.Month",
          "name": "firstDayOfYear",
          "return": "int",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.time.Month",
          "name": "firstMonthOfQuarter",
          "return": "java.time.Month",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.Month",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.Month",
          "name": "getValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.Month",
          "name": "length",
          "return": "int",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.time.Month",
          "name": "maxLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.Month",
          "name": "minLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.Month",
          "name": "minus",
          "return": "java.time.Month",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.Month",
          "name": "plus",
          "return": "java.time.Month",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.Month",
          "name": "APRIL",
          "type": "java.time.Month"
        },
        {
          "declaring": "java.time.Month",
          "name": "AUGUST",
          "type": "java.time.Month"
        },
        {
          "declaring": "java.time.Month",
          "name": "DECEMBER",
          "type": "java.time.Month"
        },
        {
          "declaring": "java.time.Month",
          "name": "FEBRUARY",
          "type": "java.time.Month"
        },
        {
          "declaring": "java.time.Month",
          "name": "JANUARY",
          "type": "java.time.Month"
        },
        {
          "declaring": "java.time.Month",
          "name": "JULY",
          "type": "java.time.Month"
        },
        {
          "declaring": "java.time.Month",
          "name": "JUNE",
          "type": "java.time.Month"
        },
        {
          "declaring": "java.time.Month",
          "name": "MARCH",
          "type": "java.time.Month"
        },
        {
          "declaring": "java.time.Month",
          "name": "MAY",
          "type": "java.time.Month"
        },
        {
          "declaring": "java.time.Month",
          "name": "NOVEMBER",
          "type": "java.time.Month"
        },
        {
          "declaring": "java.time.Month",
          "name": "OCTOBER",
          "type": "java.time.Month"
        },
        {
          "declaring": "java.time.Month",
          "name": "SEPTEMBER",
          "type": "java.time.Month"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.MonthDay",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.MonthDay",
          "name": "from",
          "return": "java.time.MonthDay",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.MonthDay",
          "name": "of",
          "return": "java.time.MonthDay",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.MonthDay",
          "name": "parse",
          "return": "java.time.MonthDay",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.time.MonthDay",
          "name": "parse",
          "return": "java.time.MonthDay",
          "parameters": [
            "java.lang.CharSequence",
            "java.time.format.DateTimeFormatter"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.MonthDay",
          "name": "atYear",
          "return": "java.time.LocalDate",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.MonthDay",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.MonthDay"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.MonthDay",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.MonthDay",
          "name": "getDayOfMonth",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.MonthDay",
          "name": "getMonth",
          "return": "java.time.Month",
          "parameters": []
        },
        {
          "declaring": "java.time.MonthDay",
          "name": "getMonthValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.MonthDay",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.MonthDay"
          ]
        },
        {
          "declaring": "java.time.MonthDay",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.MonthDay"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.MonthDay",
          "name": "isValidYear",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.MonthDay",
          "name": "with",
          "return": "java.time.MonthDay",
          "parameters": [
            "java.time.Month"
          ]
        },
        {
          "declaring": "java.time.MonthDay",
          "name": "withDayOfMonth",
          "return": "java.time.MonthDay",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.MonthDay",
          "name": "withMonth",
          "return": "java.time.MonthDay",
          "parameters": [
            "int"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.OffsetDateTime",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "from",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "of",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "java.time.LocalDateTime",
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "of",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "java.time.LocalDate",
            "java.time.LocalTime",
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "of",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "ofInstant",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "java.time.Instant",
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "parse",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "parse",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "java.lang.CharSequence",
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "timeLineOrder",
          "return": "java.util.Comparator",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "atZoneSameInstant",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "atZoneSimilarLocal",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.OffsetDateTime"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "getDayOfMonth",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "getDayOfWeek",
          "return": "java.time.DayOfWeek",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "getDayOfYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "getHour",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "getMinute",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "getMonth",
          "return": "java.time.Month",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "getMonthValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "getNano",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "getOffset",
          "return": "java.time.ZoneOffset",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "getSecond",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "getYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.OffsetDateTime"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.OffsetDateTime"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "isEqual",
          "return": "boolean",
          "parameters": [
            "java.time.OffsetDateTime"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "minus",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "minus",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "minusDays",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "minusHours",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "minusMinutes",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "minusMonths",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "minusNanos",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "minusSeconds",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "minusWeeks",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "minusYears",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "plus",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "plus",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "plusDays",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "plusHours",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "plusMinutes",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "plusMonths",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "plusNanos",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "plusSeconds",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "plusWeeks",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "plusYears",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "toEpochSecond",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "toInstant",
          "return": "java.time.Instant",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "toLocalDate",
          "return": "java.time.LocalDate",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "toLocalDateTime",
          "return": "java.time.LocalDateTime",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "toLocalTime",
          "return": "java.time.LocalTime",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "toOffsetTime",
          "return": "java.time.OffsetTime",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "toZonedDateTime",
          "return": "java.time.ZonedDateTime",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "truncatedTo",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "with",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "with",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "withDayOfMonth",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "withDayOfYear",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "withHour",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "withMinute",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "withMonth",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "withNano",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "withOffsetSameInstant",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "withOffsetSameLocal",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "withSecond",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "withYear",
          "return": "java.time.OffsetDateTime",
          "parameters": [
            "int"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "MAX",
          "type": "java.time.OffsetDateTime"
        },
        {
          "declaring": "java.time.OffsetDateTime",
          "name": "MIN",
          "type": "java.time.OffsetDateTime"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.OffsetTime",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.OffsetTime",
          "name": "from",
          "return": "java.time.OffsetTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "of",
          "return": "java.time.OffsetTime",
          "parameters": [
            "java.time.LocalTime",
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "of",
          "return": "java.time.OffsetTime",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "ofInstant",
          "return": "java.time.OffsetTime",
          "parameters": [
            "java.time.Instant",
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "parse",
          "return": "java.time.OffsetTime",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "parse",
          "return": "java.time.OffsetTime",
          "parameters": [
            "java.lang.CharSequence",
            "java.time.format.DateTimeFormatter"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.OffsetTime"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "getHour",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "getMinute",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "getNano",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "getOffset",
          "return": "java.time.ZoneOffset",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "getSecond",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.OffsetTime"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.OffsetTime"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "isEqual",
          "return": "boolean",
          "parameters": [
            "java.time.OffsetTime"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "minus",
          "return": "java.time.OffsetTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "minus",
          "return": "java.time.OffsetTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "minusHours",
          "return": "java.time.OffsetTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "minusMinutes",
          "return": "java.time.OffsetTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "minusNanos",
          "return": "java.time.OffsetTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "minusSeconds",
          "return": "java.time.OffsetTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "plus",
          "return": "java.time.OffsetTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "plus",
          "return": "java.time.OffsetTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "plusHours",
          "return": "java.time.OffsetTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "plusMinutes",
          "return": "java.time.OffsetTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "plusNanos",
          "return": "java.time.OffsetTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "plusSeconds",
          "return": "java.time.OffsetTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "toLocalTime",
          "return": "java.time.LocalTime",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "truncatedTo",
          "return": "java.time.OffsetTime",
          "parameters": [
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "with",
          "return": "java.time.OffsetTime",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "with",
          "return": "java.time.OffsetTime",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "withHour",
          "return": "java.time.OffsetTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "withMinute",
          "return": "java.time.OffsetTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "withNano",
          "return": "java.time.OffsetTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "withOffsetSameInstant",
          "return": "java.time.OffsetTime",
          "parameters": [
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "withOffsetSameLocal",
          "return": "java.time.OffsetTime",
          "parameters": [
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "withSecond",
          "return": "java.time.OffsetTime",
          "parameters": [
            "int"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.OffsetTime",
          "name": "MAX",
          "type": "java.time.OffsetTime"
        },
        {
          "declaring": "java.time.OffsetTime",
          "name": "MIN",
          "type": "java.time.OffsetTime"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.Period",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.Period",
          "name": "between",
          "return": "java.time.Period",
          "parameters": [
            "java.time.LocalDate",
            "java.time.LocalDate"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "from",
          "return": "java.time.Period",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "of",
          "return": "java.time.Period",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "ofDays",
          "return": "java.time.Period",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "ofMonths",
          "return": "java.time.Period",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "ofWeeks",
          "return": "java.time.Period",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "ofYears",
          "return": "java.time.Period",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "parse",
          "return": "java.time.Period",
          "parameters": [
            "java.lang.CharSequence"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAmount",
          "name": "addTo",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAmount",
          "name": "get",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "getChronology",
          "return": "java.time.chrono.IsoChronology",
          "parameters": []
        },
        {
          "declaring": "java.time.Period",
          "name": "getDays",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.Period",
          "name": "getMonths",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "getUnits",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.time.Period",
          "name": "getYears",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "isNegative",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "isZero",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.Period",
          "name": "minus",
          "return": "java.time.Period",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "minusDays",
          "return": "java.time.Period",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "minusMonths",
          "return": "java.time.Period",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "minusYears",
          "return": "java.time.Period",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "multipliedBy",
          "return": "java.time.Period",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "negated",
          "return": "java.time.Period",
          "parameters": []
        },
        {
          "declaring": "java.time.Period",
          "name": "normalized",
          "return": "java.time.Period",
          "parameters": []
        },
        {
          "declaring": "java.time.Period",
          "name": "plus",
          "return": "java.time.Period",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "plusDays",
          "return": "java.time.Period",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "plusMonths",
          "return": "java.time.Period",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "plusYears",
          "return": "java.time.Period",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAmount",
          "name": "subtractFrom",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.Period",
          "name": "toTotalMonths",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.Period",
          "name": "withDays",
          "return": "java.time.Period",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "withMonths",
          "return": "java.time.Period",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.Period",
          "name": "withYears",
          "return": "java.time.Period",
          "parameters": [
            "int"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.Period",
          "name": "ZERO",
          "type": "java.time.Period"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.Year",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.Year",
          "name": "from",
          "return": "java.time.Year",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "isLeap",
          "return": "boolean",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "of",
          "return": "java.time.Year",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "parse",
          "return": "java.time.Year",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "parse",
          "return": "java.time.Year",
          "parameters": [
            "java.lang.CharSequence",
            "java.time.format.DateTimeFormatter"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "atDay",
          "return": "java.time.LocalDate",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "atMonth",
          "return": "java.time.YearMonth",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "atMonthDay",
          "return": "java.time.LocalDate",
          "parameters": [
            "java.time.MonthDay"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.Year"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "getValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.Year",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.Year"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "isLeap",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "isValidMonthDay",
          "return": "boolean",
          "parameters": [
            "java.time.MonthDay"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "length",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.Year",
          "name": "minus",
          "return": "java.time.Year",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "minus",
          "return": "java.time.Year",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "minusYears",
          "return": "java.time.Year",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "plus",
          "return": "java.time.Year",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "plus",
          "return": "java.time.Year",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "plusYears",
          "return": "java.time.Year",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "with",
          "return": "java.time.Year",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.Year",
          "name": "with",
          "return": "java.time.Year",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.Year",
          "name": "MAX_VALUE",
          "type": "int"
        },
        {
          "declaring": "java.time.Year",
          "name": "MIN_VALUE",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.YearMonth",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.YearMonth",
          "name": "from",
          "return": "java.time.YearMonth",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "of",
          "return": "java.time.YearMonth",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "parse",
          "return": "java.time.YearMonth",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "parse",
          "return": "java.time.YearMonth",
          "parameters": [
            "java.lang.CharSequence",
            "java.time.format.DateTimeFormatter"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "atDay",
          "return": "java.time.LocalDate",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "atEndOfMonth",
          "return": "java.time.LocalDate",
          "parameters": []
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.YearMonth"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "getMonth",
          "return": "java.time.Month",
          "parameters": []
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "getMonthValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "getYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.YearMonth"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.YearMonth"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "isLeapYear",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "isValidDay",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "lengthOfMonth",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "lengthOfYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "minus",
          "return": "java.time.YearMonth",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "minus",
          "return": "java.time.YearMonth",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "minusMonths",
          "return": "java.time.YearMonth",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "minusYears",
          "return": "java.time.YearMonth",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "plus",
          "return": "java.time.YearMonth",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "plus",
          "return": "java.time.YearMonth",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "plusMonths",
          "return": "java.time.YearMonth",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "plusYears",
          "return": "java.time.YearMonth",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "with",
          "return": "java.time.YearMonth",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "with",
          "return": "java.time.YearMonth",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "withMonth",
          "return": "java.time.YearMonth",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.YearMonth",
          "name": "withYear",
          "return": "java.time.YearMonth",
          "parameters": [
            "int"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.ZoneId",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.ZoneId",
          "name": "from",
          "return": "java.time.ZoneId",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.ZoneId",
          "name": "getAvailableZoneIds",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.time.ZoneId",
          "name": "of",
          "return": "java.time.ZoneId",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.ZoneId",
          "name": "of",
          "return": "java.time.ZoneId",
          "parameters": [
            "java.lang.String",
            "java.util.Map"
          ]
        },
        {
          "declaring": "java.time.ZoneId",
          "name": "ofOffset",
          "return": "java.time.ZoneId",
          "parameters": [
            "java.lang.String",
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.ZoneId",
          "name": "systemDefault",
          "return": "java.time.ZoneId",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.ZoneId",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.ZoneId",
          "name": "getId",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.ZoneId",
          "name": "getRules",
          "return": "java.time.zone.ZoneRules",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.ZoneId",
          "name": "normalized",
          "return": "java.time.ZoneId",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.ZoneId",
          "name": "SHORT_IDS",
          "type": "java.util.Map"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.ZoneOffset",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.ZoneOffset",
          "name": "from",
          "return": "java.time.ZoneOffset",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.ZoneOffset",
          "name": "of",
          "return": "java.time.ZoneOffset",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.ZoneOffset",
          "name": "ofHours",
          "return": "java.time.ZoneOffset",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.ZoneOffset",
          "name": "ofHoursMinutes",
          "return": "java.time.ZoneOffset",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.ZoneOffset",
          "name": "ofHoursMinutesSeconds",
          "return": "java.time.ZoneOffset",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.ZoneOffset",
          "name": "ofTotalSeconds",
          "return": "java.time.ZoneOffset",
          "parameters": [
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.lang.Comparable",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.ZoneId",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.ZoneId",
          "name": "getId",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.ZoneId",
          "name": "getRules",
          "return": "java.time.zone.ZoneRules",
          "parameters": []
        },
        {
          "declaring": "java.time.ZoneOffset",
          "name": "getTotalSeconds",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.ZoneId",
          "name": "normalized",
          "return": "java.time.ZoneId",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.ZoneOffset",
          "name": "MAX",
          "type": "java.time.ZoneOffset"
        },
        {
          "declaring": "java.time.ZoneOffset",
          "name": "MIN",
          "type": "java.time.ZoneOffset"
        },
        {
          "declaring": "java.time.ZoneOffset",
          "name": "UTC",
          "type": "java.time.ZoneOffset"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.ZonedDateTime",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "from",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "of",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.LocalDateTime",
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "of",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.LocalDate",
            "java.time.LocalTime",
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "of",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "ofInstant",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.Instant",
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "ofInstant",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.LocalDateTime",
            "java.time.ZoneOffset",
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "ofLocal",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.LocalDateTime",
            "java.time.ZoneId",
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "ofStrict",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.LocalDateTime",
            "java.time.ZoneOffset",
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "parse",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "parse",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.lang.CharSequence",
            "java.time.format.DateTimeFormatter"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.ChronoZonedDateTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "getChronology",
          "return": "java.time.chrono.Chronology",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "getDayOfMonth",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "getDayOfWeek",
          "return": "java.time.DayOfWeek",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "getDayOfYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "getHour",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "getMinute",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "getMonth",
          "return": "java.time.Month",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "getMonthValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "getNano",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "getOffset",
          "return": "java.time.ZoneOffset",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "getSecond",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "getYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "getZone",
          "return": "java.time.ZoneId",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoZonedDateTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoZonedDateTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "isEqual",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoZonedDateTime"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "minus",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "minus",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "minusDays",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "minusHours",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "minusMinutes",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "minusMonths",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "minusNanos",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "minusSeconds",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "minusWeeks",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "minusYears",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "plus",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "plus",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "plusDays",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "plusHours",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "plusMinutes",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "plusMonths",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "plusNanos",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "plusSeconds",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "plusWeeks",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "plusYears",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "toEpochSecond",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "toInstant",
          "return": "java.time.Instant",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "toLocalDate",
          "return": "java.time.LocalDate",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "toLocalDateTime",
          "return": "java.time.LocalDateTime",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "toLocalTime",
          "return": "java.time.LocalTime",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "toOffsetDateTime",
          "return": "java.time.OffsetDateTime",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "truncatedTo",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "with",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "with",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "withDayOfMonth",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "withDayOfYear",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "withEarlierOffsetAtOverlap",
          "return": "java.time.ZonedDateTime",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "withFixedOffsetZone",
          "return": "java.time.ZonedDateTime",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "withHour",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "withLaterOffsetAtOverlap",
          "return": "java.time.ZonedDateTime",
          "parameters": []
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "withMinute",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "withMonth",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "withNano",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "withSecond",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "withYear",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "withZoneSameInstant",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.ZonedDateTime",
          "name": "withZoneSameLocal",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.ZoneId"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.chrono.AbstractChronology",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.Chronology"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "date",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "date",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "date",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "java.time.chrono.Era",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "dateEpochDay",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "dateYearDay",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "dateYearDay",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "java.time.chrono.Era",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "eraOf",
          "return": "java.time.chrono.Era",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "eras",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getCalendarType",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getId",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "isLeapYear",
          "return": "boolean",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "localDateTime",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "period",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "prolepticYear",
          "return": "int",
          "parameters": [
            "java.time.chrono.Era",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.ChronoField"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "resolveDate",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "java.util.Map",
            "java.time.format.ResolverStyle"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "zonedDateTime",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "zonedDateTime",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.Instant",
            "java.time.ZoneId"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.chrono.ChronoLocalDate",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "from",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "timeLineOrder",
          "return": "java.util.Comparator",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "atTime",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.LocalTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "getChronology",
          "return": "java.time.chrono.Chronology",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "getEra",
          "return": "java.time.chrono.Era",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isEqual",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isLeapYear",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "lengthOfMonth",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "lengthOfYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "minus",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "minus",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "plus",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "plus",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "toEpochDay",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "until",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "with",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "with",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.chrono.ChronoLocalDateTime",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "from",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "timeLineOrder",
          "return": "java.util.Comparator",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "atZone",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.ChronoLocalDateTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "getChronology",
          "return": "java.time.chrono.Chronology",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDateTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDateTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "isEqual",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDateTime"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "minus",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "minus",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "plus",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "plus",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "toEpochSecond",
          "return": "long",
          "parameters": [
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "toInstant",
          "return": "java.time.Instant",
          "parameters": [
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "toLocalDate",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "toLocalTime",
          "return": "java.time.LocalTime",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "with",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDateTime",
          "name": "with",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.chrono.ChronoPeriod",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "between",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": [
            "java.time.chrono.ChronoLocalDate",
            "java.time.chrono.ChronoLocalDate"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAmount",
          "name": "addTo",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAmount",
          "name": "get",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "getChronology",
          "return": "java.time.chrono.Chronology",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "getUnits",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "isNegative",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "isZero",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "minus",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "multipliedBy",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "negated",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "normalized",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "plus",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAmount",
          "name": "subtractFrom",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoPeriod",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.chrono.ChronoZonedDateTime",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "from",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "timeLineOrder",
          "return": "java.util.Comparator",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.ChronoZonedDateTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "getChronology",
          "return": "java.time.chrono.Chronology",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "getOffset",
          "return": "java.time.ZoneOffset",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "getZone",
          "return": "java.time.ZoneId",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoZonedDateTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoZonedDateTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "isEqual",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoZonedDateTime"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "minus",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "minus",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "plus",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "plus",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "toEpochSecond",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "toInstant",
          "return": "java.time.Instant",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "toLocalDate",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "toLocalDateTime",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "toLocalTime",
          "return": "java.time.LocalTime",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "with",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "with",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "withEarlierOffsetAtOverlap",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "withLaterOffsetAtOverlap",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "withZoneSameInstant",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "withZoneSameLocal",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.ZoneId"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.chrono.Chronology",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "from",
          "return": "java.time.chrono.Chronology",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getAvailableChronologies",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "of",
          "return": "java.time.chrono.Chronology",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "ofLocale",
          "return": "java.time.chrono.Chronology",
          "parameters": [
            "java.util.Locale"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.Chronology"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "date",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "date",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "date",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "java.time.chrono.Era",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "dateEpochDay",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "dateYearDay",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "dateYearDay",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "java.time.chrono.Era",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "eraOf",
          "return": "java.time.chrono.Era",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "eras",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getCalendarType",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getId",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "isLeapYear",
          "return": "boolean",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "localDateTime",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "period",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "prolepticYear",
          "return": "int",
          "parameters": [
            "java.time.chrono.Era",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.ChronoField"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "resolveDate",
          "return": "java.time.chrono.ChronoLocalDate",
          "parameters": [
            "java.util.Map",
            "java.time.format.ResolverStyle"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "zonedDateTime",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "zonedDateTime",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.Instant",
            "java.time.ZoneId"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.chrono.Era",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.Era",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.Era",
          "name": "getValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.chrono.HijrahChronology",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.Chronology"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahChronology",
          "name": "date",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahChronology",
          "name": "date",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahChronology",
          "name": "date",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "java.time.chrono.Era",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahChronology",
          "name": "dateEpochDay",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahChronology",
          "name": "dateYearDay",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahChronology",
          "name": "dateYearDay",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "java.time.chrono.Era",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahChronology",
          "name": "eraOf",
          "return": "java.time.chrono.HijrahEra",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "eras",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getCalendarType",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getId",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "isLeapYear",
          "return": "boolean",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "localDateTime",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "period",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "prolepticYear",
          "return": "int",
          "parameters": [
            "java.time.chrono.Era",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.ChronoField"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahChronology",
          "name": "resolveDate",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "java.util.Map",
            "java.time.format.ResolverStyle"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "zonedDateTime",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "zonedDateTime",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.Instant",
            "java.time.ZoneId"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.chrono.HijrahChronology",
          "name": "INSTANCE",
          "type": "java.time.chrono.HijrahChronology"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.chrono.HijrahDate",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.chrono.HijrahDate",
          "name": "from",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahDate",
          "name": "of",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "atTime",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.LocalTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahDate",
          "name": "getChronology",
          "return": "java.time.chrono.HijrahChronology",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.HijrahDate",
          "name": "getEra",
          "return": "java.time.chrono.HijrahEra",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isEqual",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isLeapYear",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "lengthOfMonth",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "lengthOfYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.HijrahDate",
          "name": "minus",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahDate",
          "name": "minus",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahDate",
          "name": "plus",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahDate",
          "name": "plus",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "toEpochDay",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "until",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahDate",
          "name": "with",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahDate",
          "name": "with",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahDate",
          "name": "withVariant",
          "return": "java.time.chrono.HijrahDate",
          "parameters": [
            "java.time.chrono.HijrahChronology"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.chrono.HijrahEra",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.chrono.HijrahEra",
          "name": "of",
          "return": "java.time.chrono.HijrahEra",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahEra",
          "name": "valueOf",
          "return": "java.time.chrono.HijrahEra",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahEra",
          "name": "values",
          "return": "[Ljava.time.chrono.HijrahEra;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.Era",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.HijrahEra",
          "name": "getValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.chrono.HijrahEra",
          "name": "AH",
          "type": "java.time.chrono.HijrahEra"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.chrono.IsoChronology",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.Chronology"
          ]
        },
        {
          "declaring": "java.time.chrono.IsoChronology",
          "name": "date",
          "return": "java.time.LocalDate",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.IsoChronology",
          "name": "date",
          "return": "java.time.LocalDate",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.IsoChronology",
          "name": "date",
          "return": "java.time.LocalDate",
          "parameters": [
            "java.time.chrono.Era",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.IsoChronology",
          "name": "dateEpochDay",
          "return": "java.time.LocalDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.IsoChronology",
          "name": "dateYearDay",
          "return": "java.time.LocalDate",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.IsoChronology",
          "name": "dateYearDay",
          "return": "java.time.LocalDate",
          "parameters": [
            "java.time.chrono.Era",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.IsoChronology",
          "name": "eraOf",
          "return": "java.time.chrono.IsoEra",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "eras",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getCalendarType",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getId",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "isLeapYear",
          "return": "boolean",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.IsoChronology",
          "name": "localDateTime",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.IsoChronology",
          "name": "period",
          "return": "java.time.Period",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "prolepticYear",
          "return": "int",
          "parameters": [
            "java.time.chrono.Era",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.ChronoField"
          ]
        },
        {
          "declaring": "java.time.chrono.IsoChronology",
          "name": "resolveDate",
          "return": "java.time.LocalDate",
          "parameters": [
            "java.util.Map",
            "java.time.format.ResolverStyle"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.IsoChronology",
          "name": "zonedDateTime",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.IsoChronology",
          "name": "zonedDateTime",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.Instant",
            "java.time.ZoneId"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.chrono.IsoChronology",
          "name": "INSTANCE",
          "type": "java.time.chrono.IsoChronology"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.chrono.IsoEra",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.chrono.IsoEra",
          "name": "of",
          "return": "java.time.chrono.IsoEra",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.IsoEra",
          "name": "valueOf",
          "return": "java.time.chrono.IsoEra",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.chrono.IsoEra",
          "name": "values",
          "return": "[Ljava.time.chrono.IsoEra;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.Era",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.IsoEra",
          "name": "getValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.chrono.IsoEra",
          "name": "BCE",
          "type": "java.time.chrono.IsoEra"
        },
        {
          "declaring": "java.time.chrono.IsoEra",
          "name": "CE",
          "type": "java.time.chrono.IsoEra"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.chrono.JapaneseChronology",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.Chronology"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseChronology",
          "name": "date",
          "return": "java.time.chrono.JapaneseDate",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseChronology",
          "name": "date",
          "return": "java.time.chrono.JapaneseDate",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseChronology",
          "name": "date",
          "return": "java.time.chrono.JapaneseDate",
          "parameters": [
            "java.time.chrono.Era",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseChronology",
          "name": "dateEpochDay",
          "return": "java.time.chrono.JapaneseDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseChronology",
          "name": "dateYearDay",
          "return": "java.time.chrono.JapaneseDate",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseChronology",
          "name": "dateYearDay",
          "return": "java.time.chrono.JapaneseDate",
          "parameters": [
            "java.time.chrono.Era",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseChronology",
          "name": "eraOf",
          "return": "java.time.chrono.JapaneseEra",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "eras",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getCalendarType",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getId",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "isLeapYear",
          "return": "boolean",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "localDateTime",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "period",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "prolepticYear",
          "return": "int",
          "parameters": [
            "java.time.chrono.Era",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.ChronoField"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseChronology",
          "name": "resolveDate",
          "return": "java.time.chrono.JapaneseDate",
          "parameters": [
            "java.util.Map",
            "java.time.format.ResolverStyle"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "zonedDateTime",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "zonedDateTime",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.Instant",
            "java.time.ZoneId"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.chrono.JapaneseChronology",
          "name": "INSTANCE",
          "type": "java.time.chrono.JapaneseChronology"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.chrono.JapaneseDate",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.chrono.JapaneseDate",
          "name": "from",
          "return": "java.time.chrono.JapaneseDate",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseDate",
          "name": "of",
          "return": "java.time.chrono.JapaneseDate",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "atTime",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.LocalTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseDate",
          "name": "getChronology",
          "return": "java.time.chrono.JapaneseChronology",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.JapaneseDate",
          "name": "getEra",
          "return": "java.time.chrono.JapaneseEra",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isEqual",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isLeapYear",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "lengthOfMonth",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "lengthOfYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.JapaneseDate",
          "name": "minus",
          "return": "java.time.chrono.JapaneseDate",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseDate",
          "name": "minus",
          "return": "java.time.chrono.JapaneseDate",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseDate",
          "name": "plus",
          "return": "java.time.chrono.JapaneseDate",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseDate",
          "name": "plus",
          "return": "java.time.chrono.JapaneseDate",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "toEpochDay",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "until",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseDate",
          "name": "with",
          "return": "java.time.chrono.JapaneseDate",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseDate",
          "name": "with",
          "return": "java.time.chrono.JapaneseDate",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.chrono.JapaneseEra",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.chrono.JapaneseEra",
          "name": "of",
          "return": "java.time.chrono.JapaneseEra",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseEra",
          "name": "valueOf",
          "return": "java.time.chrono.JapaneseEra",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseEra",
          "name": "values",
          "return": "[Ljava.time.chrono.JapaneseEra;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.Era",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.JapaneseEra",
          "name": "getValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.chrono.JapaneseEra",
          "name": "HEISEI",
          "type": "java.time.chrono.JapaneseEra"
        },
        {
          "declaring": "java.time.chrono.JapaneseEra",
          "name": "MEIJI",
          "type": "java.time.chrono.JapaneseEra"
        },
        {
          "declaring": "java.time.chrono.JapaneseEra",
          "name": "SHOWA",
          "type": "java.time.chrono.JapaneseEra"
        },
        {
          "declaring": "java.time.chrono.JapaneseEra",
          "name": "TAISHO",
          "type": "java.time.chrono.JapaneseEra"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.chrono.MinguoChronology",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.Chronology"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoChronology",
          "name": "date",
          "return": "java.time.chrono.MinguoDate",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoChronology",
          "name": "date",
          "return": "java.time.chrono.MinguoDate",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoChronology",
          "name": "date",
          "return": "java.time.chrono.MinguoDate",
          "parameters": [
            "java.time.chrono.Era",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoChronology",
          "name": "dateEpochDay",
          "return": "java.time.chrono.MinguoDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoChronology",
          "name": "dateYearDay",
          "return": "java.time.chrono.MinguoDate",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoChronology",
          "name": "dateYearDay",
          "return": "java.time.chrono.MinguoDate",
          "parameters": [
            "java.time.chrono.Era",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoChronology",
          "name": "eraOf",
          "return": "java.time.chrono.MinguoEra",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "eras",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getCalendarType",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getId",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "isLeapYear",
          "return": "boolean",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "localDateTime",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "period",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "prolepticYear",
          "return": "int",
          "parameters": [
            "java.time.chrono.Era",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.ChronoField"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoChronology",
          "name": "resolveDate",
          "return": "java.time.chrono.MinguoDate",
          "parameters": [
            "java.util.Map",
            "java.time.format.ResolverStyle"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "zonedDateTime",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "zonedDateTime",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.Instant",
            "java.time.ZoneId"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.chrono.MinguoChronology",
          "name": "INSTANCE",
          "type": "java.time.chrono.MinguoChronology"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.chrono.MinguoDate",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.chrono.MinguoDate",
          "name": "from",
          "return": "java.time.chrono.MinguoDate",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoDate",
          "name": "of",
          "return": "java.time.chrono.MinguoDate",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "atTime",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.LocalTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoDate",
          "name": "getChronology",
          "return": "java.time.chrono.MinguoChronology",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.MinguoDate",
          "name": "getEra",
          "return": "java.time.chrono.MinguoEra",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isEqual",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isLeapYear",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "lengthOfMonth",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "lengthOfYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.MinguoDate",
          "name": "minus",
          "return": "java.time.chrono.MinguoDate",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoDate",
          "name": "minus",
          "return": "java.time.chrono.MinguoDate",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoDate",
          "name": "plus",
          "return": "java.time.chrono.MinguoDate",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoDate",
          "name": "plus",
          "return": "java.time.chrono.MinguoDate",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "toEpochDay",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "until",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoDate",
          "name": "with",
          "return": "java.time.chrono.MinguoDate",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoDate",
          "name": "with",
          "return": "java.time.chrono.MinguoDate",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.chrono.MinguoEra",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.chrono.MinguoEra",
          "name": "of",
          "return": "java.time.chrono.MinguoEra",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoEra",
          "name": "valueOf",
          "return": "java.time.chrono.MinguoEra",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoEra",
          "name": "values",
          "return": "[Ljava.time.chrono.MinguoEra;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.Era",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.MinguoEra",
          "name": "getValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.chrono.MinguoEra",
          "name": "BEFORE_ROC",
          "type": "java.time.chrono.MinguoEra"
        },
        {
          "declaring": "java.time.chrono.MinguoEra",
          "name": "ROC",
          "type": "java.time.chrono.MinguoEra"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.chrono.ThaiBuddhistChronology",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.Chronology"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistChronology",
          "name": "date",
          "return": "java.time.chrono.ThaiBuddhistDate",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistChronology",
          "name": "date",
          "return": "java.time.chrono.ThaiBuddhistDate",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistChronology",
          "name": "date",
          "return": "java.time.chrono.ThaiBuddhistDate",
          "parameters": [
            "java.time.chrono.Era",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistChronology",
          "name": "dateEpochDay",
          "return": "java.time.chrono.ThaiBuddhistDate",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistChronology",
          "name": "dateYearDay",
          "return": "java.time.chrono.ThaiBuddhistDate",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistChronology",
          "name": "dateYearDay",
          "return": "java.time.chrono.ThaiBuddhistDate",
          "parameters": [
            "java.time.chrono.Era",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistChronology",
          "name": "eraOf",
          "return": "java.time.chrono.ThaiBuddhistEra",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "eras",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getCalendarType",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "getId",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "isLeapYear",
          "return": "boolean",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "localDateTime",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "period",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "prolepticYear",
          "return": "int",
          "parameters": [
            "java.time.chrono.Era",
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.ChronoField"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistChronology",
          "name": "resolveDate",
          "return": "java.time.chrono.ThaiBuddhistDate",
          "parameters": [
            "java.util.Map",
            "java.time.format.ResolverStyle"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "zonedDateTime",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.Chronology",
          "name": "zonedDateTime",
          "return": "java.time.chrono.ChronoZonedDateTime",
          "parameters": [
            "java.time.Instant",
            "java.time.ZoneId"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.chrono.ThaiBuddhistChronology",
          "name": "INSTANCE",
          "type": "java.time.chrono.ThaiBuddhistChronology"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.chrono.ThaiBuddhistDate",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.chrono.ThaiBuddhistDate",
          "name": "from",
          "return": "java.time.chrono.ThaiBuddhistDate",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistDate",
          "name": "of",
          "return": "java.time.chrono.ThaiBuddhistDate",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "atTime",
          "return": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            "java.time.LocalTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistDate",
          "name": "getChronology",
          "return": "java.time.chrono.ThaiBuddhistChronology",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistDate",
          "name": "getEra",
          "return": "java.time.chrono.ThaiBuddhistEra",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isEqual",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "isLeapYear",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "lengthOfMonth",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "lengthOfYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistDate",
          "name": "minus",
          "return": "java.time.chrono.ThaiBuddhistDate",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistDate",
          "name": "minus",
          "return": "java.time.chrono.ThaiBuddhistDate",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistDate",
          "name": "plus",
          "return": "java.time.chrono.ThaiBuddhistDate",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistDate",
          "name": "plus",
          "return": "java.time.chrono.ThaiBuddhistDate",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "toEpochDay",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoLocalDate",
          "name": "until",
          "return": "java.time.chrono.ChronoPeriod",
          "parameters": [
            "java.time.chrono.ChronoLocalDate"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistDate",
          "name": "with",
          "return": "java.time.chrono.ThaiBuddhistDate",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistDate",
          "name": "with",
          "return": "java.time.chrono.ThaiBuddhistDate",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.chrono.ThaiBuddhistEra",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.chrono.ThaiBuddhistEra",
          "name": "of",
          "return": "java.time.chrono.ThaiBuddhistEra",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistEra",
          "name": "valueOf",
          "return": "java.time.chrono.ThaiBuddhistEra",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistEra",
          "name": "values",
          "return": "[Ljava.time.chrono.ThaiBuddhistEra;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.Era",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistEra",
          "name": "getValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.chrono.ThaiBuddhistEra",
          "name": "BE",
          "type": "java.time.chrono.ThaiBuddhistEra"
        },
        {
          "declaring": "java.time.chrono.ThaiBuddhistEra",
          "name": "BEFORE_BE",
          "type": "java.time.chrono.ThaiBuddhistEra"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.format.DateTimeFormatter",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ofLocalizedDate",
          "return": "java.time.format.DateTimeFormatter",
          "parameters": [
            "java.time.format.FormatStyle"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ofLocalizedDateTime",
          "return": "java.time.format.DateTimeFormatter",
          "parameters": [
            "java.time.format.FormatStyle"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ofLocalizedDateTime",
          "return": "java.time.format.DateTimeFormatter",
          "parameters": [
            "java.time.format.FormatStyle",
            "java.time.format.FormatStyle"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ofLocalizedTime",
          "return": "java.time.format.DateTimeFormatter",
          "parameters": [
            "java.time.format.FormatStyle"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ofPattern",
          "return": "java.time.format.DateTimeFormatter",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ofPattern",
          "return": "java.time.format.DateTimeFormatter",
          "parameters": [
            "java.lang.String",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "parsedExcessDays",
          "return": "java.time.temporal.TemporalQuery",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "parsedLeapSecond",
          "return": "java.time.temporal.TemporalQuery",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "formatTo",
          "return": "void",
          "parameters": [
            "java.time.temporal.TemporalAccessor",
            "java.lang.Appendable"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "getChronology",
          "return": "java.time.chrono.Chronology",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "getDecimalStyle",
          "return": "java.time.format.DecimalStyle",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "getLocale",
          "return": "java.util.Locale",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "getResolverFields",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "getResolverStyle",
          "return": "java.time.format.ResolverStyle",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "getZone",
          "return": "java.time.ZoneId",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "parse",
          "return": "java.time.temporal.TemporalAccessor",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "parse",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.lang.CharSequence",
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "parseBest",
          "return": "java.time.temporal.TemporalAccessor",
          "parameters": [
            "java.lang.CharSequence",
            "[Ljava.time.temporal.TemporalQuery;"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "parseUnresolved",
          "return": "java.time.temporal.TemporalAccessor",
          "parameters": [
            "java.lang.CharSequence",
            "java.text.ParsePosition"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "toFormat",
          "return": "java.text.Format",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "toFormat",
          "return": "java.text.Format",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "withChronology",
          "return": "java.time.format.DateTimeFormatter",
          "parameters": [
            "java.time.chrono.Chronology"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "withDecimalStyle",
          "return": "java.time.format.DateTimeFormatter",
          "parameters": [
            "java.time.format.DecimalStyle"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "withLocale",
          "return": "java.time.format.DateTimeFormatter",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "withResolverFields",
          "return": "java.time.format.DateTimeFormatter",
          "parameters": [
            "java.util.Set"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "withResolverStyle",
          "return": "java.time.format.DateTimeFormatter",
          "parameters": [
            "java.time.format.ResolverStyle"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "withZone",
          "return": "java.time.format.DateTimeFormatter",
          "parameters": [
            "java.time.ZoneId"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "BASIC_ISO_DATE",
          "type": "java.time.format.DateTimeFormatter"
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ISO_DATE",
          "type": "java.time.format.DateTimeFormatter"
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ISO_DATE_TIME",
          "type": "java.time.format.DateTimeFormatter"
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ISO_INSTANT",
          "type": "java.time.format.DateTimeFormatter"
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ISO_LOCAL_DATE",
          "type": "java.time.format.DateTimeFormatter"
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ISO_LOCAL_DATE_TIME",
          "type": "java.time.format.DateTimeFormatter"
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ISO_LOCAL_TIME",
          "type": "java.time.format.DateTimeFormatter"
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ISO_OFFSET_DATE",
          "type": "java.time.format.DateTimeFormatter"
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ISO_OFFSET_DATE_TIME",
          "type": "java.time.format.DateTimeFormatter"
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ISO_OFFSET_TIME",
          "type": "java.time.format.DateTimeFormatter"
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ISO_ORDINAL_DATE",
          "type": "java.time.format.DateTimeFormatter"
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ISO_TIME",
          "type": "java.time.format.DateTimeFormatter"
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ISO_WEEK_DATE",
          "type": "java.time.format.DateTimeFormatter"
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "ISO_ZONED_DATE_TIME",
          "type": "java.time.format.DateTimeFormatter"
        },
        {
          "declaring": "java.time.format.DateTimeFormatter",
          "name": "RFC_1123_DATE_TIME",
          "type": "java.time.format.DateTimeFormatter"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.format.DateTimeFormatterBuilder",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "parameters": []
        }
      ],
      "static_methods": [
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "getLocalizedDateTimePattern",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.FormatStyle",
            "java.time.format.FormatStyle",
            "java.time.chrono.Chronology",
            "java.util.Locale"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "append",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendChronologyId",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendChronologyText",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.time.format.TextStyle"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendFraction",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.time.temporal.TemporalField",
            "int",
            "int",
            "boolean"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendInstant",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendInstant",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendLiteral",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendLocalized",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.time.format.FormatStyle",
            "java.time.format.FormatStyle"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendLocalizedOffset",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.time.format.TextStyle"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendOffset",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendOffsetId",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendOptional",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendPattern",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendText",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendText",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.time.temporal.TemporalField",
            "java.time.format.TextStyle"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendValue",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendValue",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.time.temporal.TemporalField",
            "int"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendValue",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.time.temporal.TemporalField",
            "int",
            "int",
            "java.time.format.SignStyle"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendValueReduced",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.time.temporal.TemporalField",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendZoneId",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendZoneOrOffsetId",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendZoneRegionId",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendZoneText",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.time.format.TextStyle"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "appendZoneText",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.time.format.TextStyle",
            "java.util.Set"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "optionalEnd",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "optionalStart",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "padNext",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "padNext",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "int",
            "char"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "parseCaseInsensitive",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "parseCaseSensitive",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "parseDefaulting",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "parseLenient",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "parseStrict",
          "return": "java.time.format.DateTimeFormatterBuilder",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "toFormatter",
          "return": "java.time.format.DateTimeFormatter",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeFormatterBuilder",
          "name": "toFormatter",
          "return": "java.time.format.DateTimeFormatter",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.format.DateTimeParseException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.time.format.DateTimeParseException",
          "parameters": [
            "java.lang.String",
            "java.lang.CharSequence",
            "int"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.format.DateTimeParseException",
          "name": "getErrorIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DateTimeParseException",
          "name": "getParsedString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.format.DecimalStyle",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.format.DecimalStyle",
          "name": "getAvailableLocales",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DecimalStyle",
          "name": "of",
          "return": "java.time.format.DecimalStyle",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.format.DecimalStyle",
          "name": "ofDefaultLocale",
          "return": "java.time.format.DecimalStyle",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.format.DecimalStyle",
          "name": "getDecimalSeparator",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DecimalStyle",
          "name": "getNegativeSign",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DecimalStyle",
          "name": "getPositiveSign",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DecimalStyle",
          "name": "getZeroDigit",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.format.DecimalStyle",
          "name": "withDecimalSeparator",
          "return": "java.time.format.DecimalStyle",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.time.format.DecimalStyle",
          "name": "withNegativeSign",
          "return": "java.time.format.DecimalStyle",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.time.format.DecimalStyle",
          "name": "withPositiveSign",
          "return": "java.time.format.DecimalStyle",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.time.format.DecimalStyle",
          "name": "withZeroDigit",
          "return": "java.time.format.DecimalStyle",
          "parameters": [
            "char"
          ]
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.format.DecimalStyle",
          "name": "STANDARD",
          "type": "java.time.format.DecimalStyle"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.format.FormatStyle",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.format.FormatStyle",
          "name": "valueOf",
          "return": "java.time.format.FormatStyle",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.format.FormatStyle",
          "name": "values",
          "return": "[Ljava.time.format.FormatStyle;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.format.FormatStyle",
          "name": "FULL",
          "type": "java.time.format.FormatStyle"
        },
        {
          "declaring": "java.time.format.FormatStyle",
          "name": "LONG",
          "type": "java.time.format.FormatStyle"
        },
        {
          "declaring": "java.time.format.FormatStyle",
          "name": "MEDIUM",
          "type": "java.time.format.FormatStyle"
        },
        {
          "declaring": "java.time.format.FormatStyle",
          "name": "SHORT",
          "type": "java.time.format.FormatStyle"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.format.ResolverStyle",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.format.ResolverStyle",
          "name": "valueOf",
          "return": "java.time.format.ResolverStyle",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.format.ResolverStyle",
          "name": "values",
          "return": "[Ljava.time.format.ResolverStyle;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.format.ResolverStyle",
          "name": "LENIENT",
          "type": "java.time.format.ResolverStyle"
        },
        {
          "declaring": "java.time.format.ResolverStyle",
          "name": "SMART",
          "type": "java.time.format.ResolverStyle"
        },
        {
          "declaring": "java.time.format.ResolverStyle",
          "name": "STRICT",
          "type": "java.time.format.ResolverStyle"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.format.SignStyle",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.format.SignStyle",
          "name": "valueOf",
          "return": "java.time.format.SignStyle",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.format.SignStyle",
          "name": "values",
          "return": "[Ljava.time.format.SignStyle;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.format.SignStyle",
          "name": "ALWAYS",
          "type": "java.time.format.SignStyle"
        },
        {
          "declaring": "java.time.format.SignStyle",
          "name": "EXCEEDS_PAD",
          "type": "java.time.format.SignStyle"
        },
        {
          "declaring": "java.time.format.SignStyle",
          "name": "NEVER",
          "type": "java.time.format.SignStyle"
        },
        {
          "declaring": "java.time.format.SignStyle",
          "name": "NORMAL",
          "type": "java.time.format.SignStyle"
        },
        {
          "declaring": "java.time.format.SignStyle",
          "name": "NOT_NEGATIVE",
          "type": "java.time.format.SignStyle"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.format.TextStyle",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.format.TextStyle",
          "name": "valueOf",
          "return": "java.time.format.TextStyle",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.format.TextStyle",
          "name": "values",
          "return": "[Ljava.time.format.TextStyle;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.time.format.TextStyle",
          "name": "asNormal",
          "return": "java.time.format.TextStyle",
          "parameters": []
        },
        {
          "declaring": "java.time.format.TextStyle",
          "name": "asStandalone",
          "return": "java.time.format.TextStyle",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.format.TextStyle",
          "name": "isStandalone",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.format.TextStyle",
          "name": "FULL",
          "type": "java.time.format.TextStyle"
        },
        {
          "declaring": "java.time.format.TextStyle",
          "name": "FULL_STANDALONE",
          "type": "java.time.format.TextStyle"
        },
        {
          "declaring": "java.time.format.TextStyle",
          "name": "NARROW",
          "type": "java.time.format.TextStyle"
        },
        {
          "declaring": "java.time.format.TextStyle",
          "name": "NARROW_STANDALONE",
          "type": "java.time.format.TextStyle"
        },
        {
          "declaring": "java.time.format.TextStyle",
          "name": "SHORT",
          "type": "java.time.format.TextStyle"
        },
        {
          "declaring": "java.time.format.TextStyle",
          "name": "SHORT_STANDALONE",
          "type": "java.time.format.TextStyle"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.temporal.ChronoField",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "valueOf",
          "return": "java.time.temporal.ChronoField",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "values",
          "return": "[Ljava.time.temporal.ChronoField;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal",
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "checkValidIntValue",
          "return": "int",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "checkValidValue",
          "return": "long",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "getBaseUnit",
          "return": "java.time.temporal.TemporalUnit",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "getFrom",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "getRangeUnit",
          "return": "java.time.temporal.TemporalUnit",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "isDateBased",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "isSupportedBy",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "isTimeBased",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "rangeRefinedBy",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "resolve",
          "return": "java.time.temporal.TemporalAccessor",
          "parameters": [
            "java.util.Map",
            "java.time.temporal.TemporalAccessor",
            "java.time.format.ResolverStyle"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "ALIGNED_DAY_OF_WEEK_IN_MONTH",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "ALIGNED_DAY_OF_WEEK_IN_YEAR",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "ALIGNED_WEEK_OF_MONTH",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "ALIGNED_WEEK_OF_YEAR",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "AMPM_OF_DAY",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "CLOCK_HOUR_OF_AMPM",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "CLOCK_HOUR_OF_DAY",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "DAY_OF_MONTH",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "DAY_OF_WEEK",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "DAY_OF_YEAR",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "EPOCH_DAY",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "ERA",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "HOUR_OF_AMPM",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "HOUR_OF_DAY",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "INSTANT_SECONDS",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "MICRO_OF_DAY",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "MICRO_OF_SECOND",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "MILLI_OF_DAY",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "MILLI_OF_SECOND",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "MINUTE_OF_DAY",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "MINUTE_OF_HOUR",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "MONTH_OF_YEAR",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "NANO_OF_DAY",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "NANO_OF_SECOND",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "OFFSET_SECONDS",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "PROLEPTIC_MONTH",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "SECOND_OF_DAY",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "SECOND_OF_MINUTE",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "YEAR",
          "type": "java.time.temporal.ChronoField"
        },
        {
          "declaring": "java.time.temporal.ChronoField",
          "name": "YEAR_OF_ERA",
          "type": "java.time.temporal.ChronoField"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.temporal.ChronoUnit",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "valueOf",
          "return": "java.time.temporal.ChronoUnit",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "values",
          "return": "[Ljava.time.temporal.ChronoUnit;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "addTo",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal",
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "between",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "getDuration",
          "return": "java.time.Duration",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "isDateBased",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "isDurationEstimated",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "isSupportedBy",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "isTimeBased",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "CENTURIES",
          "type": "java.time.temporal.ChronoUnit"
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "DAYS",
          "type": "java.time.temporal.ChronoUnit"
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "DECADES",
          "type": "java.time.temporal.ChronoUnit"
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "ERAS",
          "type": "java.time.temporal.ChronoUnit"
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "FOREVER",
          "type": "java.time.temporal.ChronoUnit"
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "HALF_DAYS",
          "type": "java.time.temporal.ChronoUnit"
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "HOURS",
          "type": "java.time.temporal.ChronoUnit"
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "MICROS",
          "type": "java.time.temporal.ChronoUnit"
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "MILLENNIA",
          "type": "java.time.temporal.ChronoUnit"
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "MILLIS",
          "type": "java.time.temporal.ChronoUnit"
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "MINUTES",
          "type": "java.time.temporal.ChronoUnit"
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "MONTHS",
          "type": "java.time.temporal.ChronoUnit"
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "NANOS",
          "type": "java.time.temporal.ChronoUnit"
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "SECONDS",
          "type": "java.time.temporal.ChronoUnit"
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "WEEKS",
          "type": "java.time.temporal.ChronoUnit"
        },
        {
          "declaring": "java.time.temporal.ChronoUnit",
          "name": "YEARS",
          "type": "java.time.temporal.ChronoUnit"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.temporal.IsoFields",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.temporal.IsoFields",
          "name": "DAY_OF_QUARTER",
          "type": "java.time.temporal.TemporalField"
        },
        {
          "declaring": "java.time.temporal.IsoFields",
          "name": "QUARTER_OF_YEAR",
          "type": "java.time.temporal.TemporalField"
        },
        {
          "declaring": "java.time.temporal.IsoFields",
          "name": "QUARTER_YEARS",
          "type": "java.time.temporal.TemporalUnit"
        },
        {
          "declaring": "java.time.temporal.IsoFields",
          "name": "WEEK_BASED_YEAR",
          "type": "java.time.temporal.TemporalField"
        },
        {
          "declaring": "java.time.temporal.IsoFields",
          "name": "WEEK_BASED_YEARS",
          "type": "java.time.temporal.TemporalUnit"
        },
        {
          "declaring": "java.time.temporal.IsoFields",
          "name": "WEEK_OF_WEEK_BASED_YEAR",
          "type": "java.time.temporal.TemporalField"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.temporal.JulianFields",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.temporal.JulianFields",
          "name": "JULIAN_DAY",
          "type": "java.time.temporal.TemporalField"
        },
        {
          "declaring": "java.time.temporal.JulianFields",
          "name": "MODIFIED_JULIAN_DAY",
          "type": "java.time.temporal.TemporalField"
        },
        {
          "declaring": "java.time.temporal.JulianFields",
          "name": "RATA_DIE",
          "type": "java.time.temporal.TemporalField"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.temporal.Temporal",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "minus",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "minus",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "plus",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "plus",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "with",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "with",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.temporal.TemporalAccessor",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.temporal.TemporalAdjuster",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjuster",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.temporal.TemporalAdjusters",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.temporal.TemporalAdjusters",
          "name": "dayOfWeekInMonth",
          "return": "java.time.temporal.TemporalAdjuster",
          "parameters": [
            "int",
            "java.time.DayOfWeek"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAdjusters",
          "name": "firstDayOfMonth",
          "return": "java.time.temporal.TemporalAdjuster",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAdjusters",
          "name": "firstDayOfNextMonth",
          "return": "java.time.temporal.TemporalAdjuster",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAdjusters",
          "name": "firstDayOfNextYear",
          "return": "java.time.temporal.TemporalAdjuster",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAdjusters",
          "name": "firstDayOfYear",
          "return": "java.time.temporal.TemporalAdjuster",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAdjusters",
          "name": "firstInMonth",
          "return": "java.time.temporal.TemporalAdjuster",
          "parameters": [
            "java.time.DayOfWeek"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAdjusters",
          "name": "lastDayOfMonth",
          "return": "java.time.temporal.TemporalAdjuster",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAdjusters",
          "name": "lastDayOfYear",
          "return": "java.time.temporal.TemporalAdjuster",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAdjusters",
          "name": "lastInMonth",
          "return": "java.time.temporal.TemporalAdjuster",
          "parameters": [
            "java.time.DayOfWeek"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAdjusters",
          "name": "next",
          "return": "java.time.temporal.TemporalAdjuster",
          "parameters": [
            "java.time.DayOfWeek"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAdjusters",
          "name": "nextOrSame",
          "return": "java.time.temporal.TemporalAdjuster",
          "parameters": [
            "java.time.DayOfWeek"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAdjusters",
          "name": "ofDateAdjuster",
          "return": "java.time.temporal.TemporalAdjuster",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAdjusters",
          "name": "previous",
          "return": "java.time.temporal.TemporalAdjuster",
          "parameters": [
            "java.time.DayOfWeek"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAdjusters",
          "name": "previousOrSame",
          "return": "java.time.temporal.TemporalAdjuster",
          "parameters": [
            "java.time.DayOfWeek"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.temporal.TemporalAmount",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalAmount",
          "name": "addTo",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAmount",
          "name": "get",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAmount",
          "name": "getUnits",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAmount",
          "name": "subtractFrom",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.temporal.TemporalField",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "adjustInto",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal",
            "long"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "getBaseUnit",
          "return": "java.time.temporal.TemporalUnit",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "getFrom",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "getRangeUnit",
          "return": "java.time.temporal.TemporalUnit",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "isDateBased",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "isSupportedBy",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "isTimeBased",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "rangeRefinedBy",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "resolve",
          "return": "java.time.temporal.TemporalAccessor",
          "parameters": [
            "java.util.Map",
            "java.time.temporal.TemporalAccessor",
            "java.time.format.ResolverStyle"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalField",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.temporal.TemporalQueries",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.temporal.TemporalQueries",
          "name": "chronology",
          "return": "java.time.temporal.TemporalQuery",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalQueries",
          "name": "localDate",
          "return": "java.time.temporal.TemporalQuery",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalQueries",
          "name": "localTime",
          "return": "java.time.temporal.TemporalQuery",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalQueries",
          "name": "offset",
          "return": "java.time.temporal.TemporalQuery",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalQueries",
          "name": "precision",
          "return": "java.time.temporal.TemporalQuery",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalQueries",
          "name": "zone",
          "return": "java.time.temporal.TemporalQuery",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalQueries",
          "name": "zoneId",
          "return": "java.time.temporal.TemporalQuery",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.temporal.TemporalQuery",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalQuery",
          "name": "queryFrom",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalAccessor"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.temporal.TemporalUnit",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "addTo",
          "return": "java.time.temporal.Temporal",
          "parameters": [
            "java.time.temporal.Temporal",
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "between",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "getDuration",
          "return": "java.time.Duration",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "isDateBased",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "isDurationEstimated",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "isSupportedBy",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.Temporal"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "isTimeBased",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalUnit",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.temporal.UnsupportedTemporalTypeException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.time.temporal.UnsupportedTemporalTypeException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.temporal.ValueRange",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.temporal.ValueRange",
          "name": "of",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "long",
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.ValueRange",
          "name": "of",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "long",
            "long",
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.ValueRange",
          "name": "of",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "long",
            "long",
            "long",
            "long"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.ValueRange",
          "name": "checkValidIntValue",
          "return": "int",
          "parameters": [
            "long",
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.time.temporal.ValueRange",
          "name": "checkValidValue",
          "return": "long",
          "parameters": [
            "long",
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.ValueRange",
          "name": "getLargestMinimum",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.ValueRange",
          "name": "getMaximum",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.ValueRange",
          "name": "getMinimum",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.ValueRange",
          "name": "getSmallestMaximum",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.ValueRange",
          "name": "isFixed",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.ValueRange",
          "name": "isIntValue",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.ValueRange",
          "name": "isValidIntValue",
          "return": "boolean",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.ValueRange",
          "name": "isValidValue",
          "return": "boolean",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.temporal.WeekFields",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.temporal.WeekFields",
          "name": "of",
          "return": "java.time.temporal.WeekFields",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.time.temporal.WeekFields",
          "name": "of",
          "return": "java.time.temporal.WeekFields",
          "parameters": [
            "java.time.DayOfWeek",
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.temporal.WeekFields",
          "name": "dayOfWeek",
          "return": "java.time.temporal.TemporalField",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.temporal.WeekFields",
          "name": "getFirstDayOfWeek",
          "return": "java.time.DayOfWeek",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.WeekFields",
          "name": "getMinimalDaysInFirstWeek",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.WeekFields",
          "name": "weekBasedYear",
          "return": "java.time.temporal.TemporalField",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.WeekFields",
          "name": "weekOfMonth",
          "return": "java.time.temporal.TemporalField",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.WeekFields",
          "name": "weekOfWeekBasedYear",
          "return": "java.time.temporal.TemporalField",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.WeekFields",
          "name": "weekOfYear",
          "return": "java.time.temporal.TemporalField",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.temporal.WeekFields",
          "name": "ISO",
          "type": "java.time.temporal.WeekFields"
        },
        {
          "declaring": "java.time.temporal.WeekFields",
          "name": "SUNDAY_START",
          "type": "java.time.temporal.WeekFields"
        },
        {
          "declaring": "java.time.temporal.WeekFields",
          "name": "WEEK_BASED_YEARS",
          "type": "java.time.temporal.TemporalUnit"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.zone.ZoneOffsetTransition",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.zone.ZoneOffsetTransition",
          "name": "of",
          "return": "java.time.zone.ZoneOffsetTransition",
          "parameters": [
            "java.time.LocalDateTime",
            "java.time.ZoneOffset",
            "java.time.ZoneOffset"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.zone.ZoneOffsetTransition",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.zone.ZoneOffsetTransition"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransition",
          "name": "getDateTimeAfter",
          "return": "java.time.LocalDateTime",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransition",
          "name": "getDateTimeBefore",
          "return": "java.time.LocalDateTime",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransition",
          "name": "getDuration",
          "return": "java.time.Duration",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransition",
          "name": "getInstant",
          "return": "java.time.Instant",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransition",
          "name": "getOffsetAfter",
          "return": "java.time.ZoneOffset",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransition",
          "name": "getOffsetBefore",
          "return": "java.time.ZoneOffset",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransition",
          "name": "isGap",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransition",
          "name": "isOverlap",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransition",
          "name": "isValidOffset",
          "return": "boolean",
          "parameters": [
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransition",
          "name": "toEpochSecond",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.zone.ZoneOffsetTransitionRule",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule",
          "name": "of",
          "return": "java.time.zone.ZoneOffsetTransitionRule",
          "parameters": [
            "java.time.Month",
            "int",
            "java.time.DayOfWeek",
            "java.time.LocalTime",
            "boolean",
            "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition",
            "java.time.ZoneOffset",
            "java.time.ZoneOffset",
            "java.time.ZoneOffset"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule",
          "name": "createTransition",
          "return": "java.time.zone.ZoneOffsetTransition",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule",
          "name": "getDayOfMonthIndicator",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule",
          "name": "getDayOfWeek",
          "return": "java.time.DayOfWeek",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule",
          "name": "getLocalTime",
          "return": "java.time.LocalTime",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule",
          "name": "getMonth",
          "return": "java.time.Month",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule",
          "name": "getOffsetAfter",
          "return": "java.time.ZoneOffset",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule",
          "name": "getOffsetBefore",
          "return": "java.time.ZoneOffset",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule",
          "name": "getStandardOffset",
          "return": "java.time.ZoneOffset",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule",
          "name": "getTimeDefinition",
          "return": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule",
          "name": "isMidnightEndOfDay",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition",
          "name": "valueOf",
          "return": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition",
          "name": "values",
          "return": "[Ljava.time.zone.ZoneOffsetTransitionRule$TimeDefinition;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition",
          "name": "createDateTime",
          "return": "java.time.LocalDateTime",
          "parameters": [
            "java.time.LocalDateTime",
            "java.time.ZoneOffset",
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition",
          "name": "STANDARD",
          "type": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition"
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition",
          "name": "UTC",
          "type": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition"
        },
        {
          "declaring": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition",
          "name": "WALL",
          "type": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition"
        }
      ],
      "fields": []
    },
    {
      "name": "java.time.zone.ZoneRules",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.zone.ZoneRules",
          "name": "of",
          "return": "java.time.zone.ZoneRules",
          "parameters": [
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.zone.ZoneRules",
          "name": "of",
          "return": "java.time.zone.ZoneRules",
          "parameters": [
            "java.time.ZoneOffset",
            "java.time.ZoneOffset",
            "java.util.List",
            "java.util.List",
            "java.util.List"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.zone.ZoneRules",
          "name": "getDaylightSavings",
          "return": "java.time.Duration",
          "parameters": [
            "java.time.Instant"
          ]
        },
        {
          "declaring": "java.time.zone.ZoneRules",
          "name": "getOffset",
          "return": "java.time.ZoneOffset",
          "parameters": [
            "java.time.Instant"
          ]
        },
        {
          "declaring": "java.time.zone.ZoneRules",
          "name": "getStandardOffset",
          "return": "java.time.ZoneOffset",
          "parameters": [
            "java.time.Instant"
          ]
        },
        {
          "declaring": "java.time.zone.ZoneRules",
          "name": "getTransition",
          "return": "java.time.zone.ZoneOffsetTransition",
          "parameters": [
            "java.time.LocalDateTime"
          ]
        },
        {
          "declaring": "java.time.zone.ZoneRules",
          "name": "getTransitionRules",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneRules",
          "name": "getTransitions",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneRules",
          "name": "getValidOffsets",
          "return": "java.util.List",
          "parameters": [
            "java.time.LocalDateTime"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneRules",
          "name": "isDaylightSavings",
          "return": "boolean",
          "parameters": [
            "java.time.Instant"
          ]
        },
        {
          "declaring": "java.time.zone.ZoneRules",
          "name": "isFixedOffset",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneRules",
          "name": "isValidOffset",
          "return": "boolean",
          "parameters": [
            "java.time.LocalDateTime",
            "java.time.ZoneOffset"
          ]
        },
        {
          "declaring": "java.time.zone.ZoneRules",
          "name": "nextTransition",
          "return": "java.time.zone.ZoneOffsetTransition",
          "parameters": [
            "java.time.Instant"
          ]
        },
        {
          "declaring": "java.time.zone.ZoneRules",
          "name": "previousTransition",
          "return": "java.time.zone.ZoneOffsetTransition",
          "parameters": [
            "java.time.Instant"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.zone.ZoneRulesException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.time.zone.ZoneRulesException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.time.zone.ZoneRulesProvider",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.time.zone.ZoneRulesProvider",
          "name": "getAvailableZoneIds",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.time.zone.ZoneRulesProvider",
          "name": "getRules",
          "return": "java.time.zone.ZoneRules",
          "parameters": [
            "java.lang.String",
            "boolean"
          ]
        },
        {
          "declaring": "java.time.zone.ZoneRulesProvider",
          "name": "getVersions",
          "return": "java.util.NavigableMap",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.AbstractCollection",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.AbstractList",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.AbstractMap",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Map",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "compute",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfPresent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsKey",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsValue",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "count",
          "return": "int",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "entrySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "java.util.Map$Entry",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "getOrDefault",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "keySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "merge",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "put",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putAll",
          "return": "void",
          "parameters": [
            "java.util.Map"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "values",
          "return": "java.util.Collection",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.AbstractMap$SimpleEntry",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.AbstractMap$SimpleEntry",
          "parameters": [
            "java.util.Map$Entry"
          ]
        },
        {
          "declaring": "java.util.AbstractMap$SimpleEntry",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Map$Entry",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Map$Entry",
          "name": "getKey",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Map$Entry",
          "name": "getValue",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Map$Entry",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Map$Entry",
          "name": "setValue",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.AbstractMap$SimpleImmutableEntry",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.AbstractMap$SimpleImmutableEntry",
          "parameters": [
            "java.util.Map$Entry"
          ]
        },
        {
          "declaring": "java.util.AbstractMap$SimpleImmutableEntry",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Map$Entry",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Map$Entry",
          "name": "getKey",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Map$Entry",
          "name": "getValue",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Map$Entry",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Map$Entry",
          "name": "setValue",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.AbstractQueue",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "element",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "offer",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "peek",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Queue",
          "name": "poll",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Queue",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.AbstractSequentialList",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.AbstractSet",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.ArrayDeque",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.ArrayDeque",
          "parameters": []
        },
        {
          "declaring": "java.util.ArrayDeque",
          "parameters": [
            "java.util.Collection"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "addFirst",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "addLast",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.ArrayDeque",
          "name": "clone",
          "return": "java.util.ArrayDeque",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "descendingIterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "element",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "getFirst",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "getLast",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "offer",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "offerFirst",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "offerLast",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "peek",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "peekFirst",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "peekLast",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Queue",
          "name": "poll",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "pollFirst",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "pollLast",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "pop",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "push",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "removeFirst",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "removeFirstOccurrence",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "removeLast",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "removeLastOccurrence",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.ArrayList",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.ArrayList",
          "parameters": []
        },
        {
          "declaring": "java.util.ArrayList",
          "parameters": [
            "java.util.Collection"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.ArrayList",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.ArrayList",
          "name": "trimToSize",
          "return": "void",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Arrays",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.Arrays",
          "name": "asList",
          "return": "java.util.List",
          "parameters": [
            "[Ljava.lang.Object;"
          ]
        },
        {
          "declaring": "java.util.Arrays",
          "name": "deepEquals",
          "return": "boolean",
          "parameters": [
            "[Ljava.lang.Object;",
            "[Ljava.lang.Object;"
          ]
        },
        {
          "declaring": "java.util.Arrays",
          "name": "deepHashCode",
          "return": "int",
          "parameters": [
            "[Ljava.lang.Object;"
          ]
        },
        {
          "declaring": "java.util.Arrays",
          "name": "deepToString",
          "return": "java.lang.String",
          "parameters": [
            "[Ljava.lang.Object;"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Base64",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.Base64",
          "name": "getDecoder",
          "return": "java.util.Base64$Decoder",
          "parameters": []
        },
        {
          "declaring": "java.util.Base64",
          "name": "getEncoder",
          "return": "java.util.Base64$Encoder",
          "parameters": []
        },
        {
          "declaring": "java.util.Base64",
          "name": "getMimeDecoder",
          "return": "java.util.Base64$Decoder",
          "parameters": []
        },
        {
          "declaring": "java.util.Base64",
          "name": "getMimeEncoder",
          "return": "java.util.Base64$Encoder",
          "parameters": []
        },
        {
          "declaring": "java.util.Base64",
          "name": "getMimeEncoder",
          "return": "java.util.Base64$Encoder",
          "parameters": [
            "int",
            "[B"
          ]
        },
        {
          "declaring": "java.util.Base64",
          "name": "getUrlDecoder",
          "return": "java.util.Base64$Decoder",
          "parameters": []
        },
        {
          "declaring": "java.util.Base64",
          "name": "getUrlEncoder",
          "return": "java.util.Base64$Encoder",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Base64$Decoder",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Base64$Decoder",
          "name": "decode",
          "return": "[B",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Base64$Decoder",
          "name": "decode",
          "return": "int",
          "parameters": [
            "[B",
            "[B"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Base64$Encoder",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Base64$Encoder",
          "name": "encode",
          "return": "int",
          "parameters": [
            "[B",
            "[B"
          ]
        },
        {
          "declaring": "java.util.Base64$Encoder",
          "name": "encodeToString",
          "return": "java.lang.String",
          "parameters": [
            "[B"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Base64$Encoder",
          "name": "withoutPadding",
          "return": "java.util.Base64$Encoder",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.BitSet",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.BitSet",
          "parameters": []
        },
        {
          "declaring": "java.util.BitSet",
          "parameters": [
            "int"
          ]
        }
      ],
      "static_methods": [
        {
          "declaring": "java.util.BitSet",
          "name": "valueOf",
          "return": "java.util.BitSet",
          "parameters": [
            "[J"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.BitSet",
          "name": "and",
          "return": "void",
          "parameters": [
            "java.util.BitSet"
          ]
        },
        {
          "declaring": "java.util.BitSet",
          "name": "andNot",
          "return": "void",
          "parameters": [
            "java.util.BitSet"
          ]
        },
        {
          "declaring": "java.util.BitSet",
          "name": "cardinality",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.BitSet",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.BitSet",
          "name": "clear",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.BitSet",
          "name": "clear",
          "return": "void",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.BitSet",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.BitSet",
          "name": "flip",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.BitSet",
          "name": "flip",
          "return": "void",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.BitSet",
          "name": "intersects",
          "return": "boolean",
          "parameters": [
            "java.util.BitSet"
          ]
        },
        {
          "declaring": "java.util.BitSet",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.BitSet",
          "name": "length",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.BitSet",
          "name": "nextClearBit",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.BitSet",
          "name": "nextSetBit",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.BitSet",
          "name": "or",
          "return": "void",
          "parameters": [
            "java.util.BitSet"
          ]
        },
        {
          "declaring": "java.util.BitSet",
          "name": "previousClearBit",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.BitSet",
          "name": "previousSetBit",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.BitSet",
          "name": "set",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.BitSet",
          "name": "set",
          "return": "void",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.BitSet",
          "name": "set",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "boolean"
          ]
        },
        {
          "declaring": "java.util.BitSet",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.BitSet",
          "name": "toByteArray",
          "return": "[B",
          "parameters": []
        },
        {
          "declaring": "java.util.BitSet",
          "name": "toLongArray",
          "return": "[J",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.BitSet",
          "name": "xor",
          "return": "void",
          "parameters": [
            "java.util.BitSet"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Calendar",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.Calendar",
          "name": "getAvailableCalendarTypes",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getAvailableLocales",
          "return": "[Ljava.util.Locale;",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getInstance",
          "return": "java.util.Calendar",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getInstance",
          "return": "java.util.Calendar",
          "parameters": [
            "java.util.TimeZone"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getInstance",
          "return": "java.util.Calendar",
          "parameters": [
            "java.util.TimeZone",
            "java.util.Locale"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.Calendar",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "after",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "before",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "clear",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.util.Calendar"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "get",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getActualMaximum",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getActualMinimum",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getCalendarType",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "int",
            "int",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getDisplayNames",
          "return": "java.util.Map",
          "parameters": [
            "int",
            "int",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getFirstDayOfWeek",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getGreatestMinimum",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getLeastMaximum",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getMaximum",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getMinimalDaysInFirstWeek",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getMinimum",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getTime",
          "return": "java.util.Date",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getTimeInMillis",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getTimeZone",
          "return": "java.util.TimeZone",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getWeekYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getWeeksInWeekYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "isLenient",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "isSet",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "isWeekDateSupported",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "roll",
          "return": "void",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "set",
          "return": "void",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "set",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "set",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "set",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "setFirstDayOfWeek",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "setLenient",
          "return": "void",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "setMinimalDaysInFirstWeek",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "setTime",
          "return": "void",
          "parameters": [
            "java.util.Date"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "setTimeInMillis",
          "return": "void",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "setTimeZone",
          "return": "void",
          "parameters": [
            "java.util.TimeZone"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "setWeekDate",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "toInstant",
          "return": "java.time.Instant",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.util.Calendar",
          "name": "ALL_STYLES",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "AM",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "AM_PM",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "APRIL",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "AUGUST",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "DATE",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "DAY_OF_MONTH",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "DAY_OF_WEEK",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "DAY_OF_WEEK_IN_MONTH",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "DAY_OF_YEAR",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "DECEMBER",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "DST_OFFSET",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "ERA",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "FEBRUARY",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "FIELD_COUNT",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "FRIDAY",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "HOUR",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "HOUR_OF_DAY",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "JANUARY",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "JULY",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "JUNE",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "LONG",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "LONG_FORMAT",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "LONG_STANDALONE",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "MARCH",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "MAY",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "MILLISECOND",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "MINUTE",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "MONDAY",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "MONTH",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "NARROW_FORMAT",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "NARROW_STANDALONE",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "NOVEMBER",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "OCTOBER",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "PM",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "SATURDAY",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "SECOND",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "SEPTEMBER",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "SHORT",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "SHORT_FORMAT",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "SHORT_STANDALONE",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "SUNDAY",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "THURSDAY",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "TUESDAY",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "UNDECIMBER",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "WEDNESDAY",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "WEEK_OF_MONTH",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "WEEK_OF_YEAR",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "YEAR",
          "type": "int"
        },
        {
          "declaring": "java.util.Calendar",
          "name": "ZONE_OFFSET",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.util.Calendar$Builder",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.Calendar$Builder",
          "parameters": []
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Calendar$Builder",
          "name": "build",
          "return": "java.util.Calendar",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar$Builder",
          "name": "set",
          "return": "java.util.Calendar$Builder",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar$Builder",
          "name": "setCalendarType",
          "return": "java.util.Calendar$Builder",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Calendar$Builder",
          "name": "setDate",
          "return": "java.util.Calendar$Builder",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar$Builder",
          "name": "setFields",
          "return": "java.util.Calendar$Builder",
          "parameters": [
            "[I"
          ]
        },
        {
          "declaring": "java.util.Calendar$Builder",
          "name": "setInstant",
          "return": "java.util.Calendar$Builder",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.Calendar$Builder",
          "name": "setLenient",
          "return": "java.util.Calendar$Builder",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.util.Calendar$Builder",
          "name": "setLocale",
          "return": "java.util.Calendar$Builder",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.Calendar$Builder",
          "name": "setTimeOfDay",
          "return": "java.util.Calendar$Builder",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar$Builder",
          "name": "setTimeOfDay",
          "return": "java.util.Calendar$Builder",
          "parameters": [
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar$Builder",
          "name": "setTimeZone",
          "return": "java.util.Calendar$Builder",
          "parameters": [
            "java.util.TimeZone"
          ]
        },
        {
          "declaring": "java.util.Calendar$Builder",
          "name": "setWeekDate",
          "return": "java.util.Calendar$Builder",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar$Builder",
          "name": "setWeekDefinition",
          "return": "java.util.Calendar$Builder",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Collection",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Collections",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.Collections",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection",
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "asLifoQueue",
          "return": "java.util.Queue",
          "parameters": [
            "java.util.Deque"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "binarySearch",
          "return": "int",
          "parameters": [
            "java.util.List",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "binarySearch",
          "return": "int",
          "parameters": [
            "java.util.List",
            "org.elasticsearch.painless.lookup.def",
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "copy",
          "return": "void",
          "parameters": [
            "java.util.List",
            "java.util.List"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "disjoint",
          "return": "boolean",
          "parameters": [
            "java.util.Collection",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "emptyEnumeration",
          "return": "java.util.Enumeration",
          "parameters": []
        },
        {
          "declaring": "java.util.Collections",
          "name": "emptyIterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collections",
          "name": "emptyList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collections",
          "name": "emptyListIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collections",
          "name": "emptyMap",
          "return": "java.util.Map",
          "parameters": []
        },
        {
          "declaring": "java.util.Collections",
          "name": "emptyNavigableMap",
          "return": "java.util.NavigableMap",
          "parameters": []
        },
        {
          "declaring": "java.util.Collections",
          "name": "emptyNavigableSet",
          "return": "java.util.NavigableSet",
          "parameters": []
        },
        {
          "declaring": "java.util.Collections",
          "name": "emptySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Collections",
          "name": "emptySortedMap",
          "return": "java.util.SortedMap",
          "parameters": []
        },
        {
          "declaring": "java.util.Collections",
          "name": "emptySortedSet",
          "return": "java.util.SortedSet",
          "parameters": []
        },
        {
          "declaring": "java.util.Collections",
          "name": "enumeration",
          "return": "java.util.Enumeration",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "fill",
          "return": "void",
          "parameters": [
            "java.util.List",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "frequency",
          "return": "int",
          "parameters": [
            "java.util.Collection",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "indexOfSubList",
          "return": "int",
          "parameters": [
            "java.util.List",
            "java.util.List"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "lastIndexOfSubList",
          "return": "int",
          "parameters": [
            "java.util.List",
            "java.util.List"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "list",
          "return": "java.util.ArrayList",
          "parameters": [
            "java.util.Enumeration"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "max",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "max",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "min",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "min",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "nCopies",
          "return": "java.util.List",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "newSetFromMap",
          "return": "java.util.Set",
          "parameters": [
            "java.util.Map"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "replaceAll",
          "return": "boolean",
          "parameters": [
            "java.util.List",
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "reverse",
          "return": "void",
          "parameters": [
            "java.util.List"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "reverseOrder",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collections",
          "name": "reverseOrder",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "rotate",
          "return": "void",
          "parameters": [
            "java.util.List",
            "int"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "shuffle",
          "return": "void",
          "parameters": [
            "java.util.List"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "shuffle",
          "return": "void",
          "parameters": [
            "java.util.List",
            "java.util.Random"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "singleton",
          "return": "java.util.Set",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "singletonList",
          "return": "java.util.List",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "singletonMap",
          "return": "java.util.Map",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.List"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.List",
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "swap",
          "return": "void",
          "parameters": [
            "java.util.List",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "unmodifiableCollection",
          "return": "java.util.Collection",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "unmodifiableList",
          "return": "java.util.List",
          "parameters": [
            "java.util.List"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "unmodifiableMap",
          "return": "java.util.Map",
          "parameters": [
            "java.util.Map"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "unmodifiableNavigableMap",
          "return": "java.util.NavigableMap",
          "parameters": [
            "java.util.NavigableMap"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "unmodifiableNavigableSet",
          "return": "java.util.NavigableSet",
          "parameters": [
            "java.util.NavigableSet"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "unmodifiableSet",
          "return": "java.util.Set",
          "parameters": [
            "java.util.Set"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "unmodifiableSortedMap",
          "return": "java.util.SortedMap",
          "parameters": [
            "java.util.SortedMap"
          ]
        },
        {
          "declaring": "java.util.Collections",
          "name": "unmodifiableSortedSet",
          "return": "java.util.SortedSet",
          "parameters": [
            "java.util.SortedSet"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.util.Collections",
          "name": "EMPTY_LIST",
          "type": "java.util.List"
        },
        {
          "declaring": "java.util.Collections",
          "name": "EMPTY_MAP",
          "type": "java.util.Map"
        },
        {
          "declaring": "java.util.Collections",
          "name": "EMPTY_SET",
          "type": "java.util.Set"
        }
      ],
      "fields": []
    },
    {
      "name": "java.util.Comparator",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.Comparator",
          "name": "comparing",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "comparing",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.Function",
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "comparingDouble",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "comparingInt",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.ToIntFunction"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "comparingLong",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.ToLongFunction"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "naturalOrder",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Comparator",
          "name": "nullsFirst",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "nullsLast",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "reverseOrder",
          "return": "java.util.Comparator",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.util.Comparator",
          "name": "compare",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Comparator",
          "name": "reversed",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Comparator",
          "name": "thenComparing",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "thenComparing",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.Function",
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "thenComparingDouble",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "thenComparingInt",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.ToIntFunction"
          ]
        },
        {
          "declaring": "java.util.Comparator",
          "name": "thenComparingLong",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.function.ToLongFunction"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.ConcurrentModificationException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.ConcurrentModificationException",
          "parameters": []
        },
        {
          "declaring": "java.util.ConcurrentModificationException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Currency",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.Currency",
          "name": "getAvailableCurrencies",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Currency",
          "name": "getInstance",
          "return": "java.util.Currency",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Currency",
          "name": "getCurrencyCode",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Currency",
          "name": "getDefaultFractionDigits",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Currency",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Currency",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.Currency",
          "name": "getNumericCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Currency",
          "name": "getSymbol",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Currency",
          "name": "getSymbol",
          "return": "java.lang.String",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Date",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.Date",
          "parameters": []
        },
        {
          "declaring": "java.util.Date",
          "parameters": [
            "long"
          ]
        }
      ],
      "static_methods": [
        {
          "declaring": "java.util.Date",
          "name": "from",
          "return": "java.util.Date",
          "parameters": [
            "java.time.Instant"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.Date",
          "name": "after",
          "return": "boolean",
          "parameters": [
            "java.util.Date"
          ]
        },
        {
          "declaring": "java.util.Date",
          "name": "before",
          "return": "boolean",
          "parameters": [
            "java.util.Date"
          ]
        },
        {
          "declaring": "java.util.Date",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Date",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.util.Date"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Date",
          "name": "getTime",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Date",
          "name": "setTime",
          "return": "void",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Deque",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "addFirst",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "addLast",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "descendingIterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "element",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "getFirst",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "getLast",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "offer",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "offerFirst",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "offerLast",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "peek",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "peekFirst",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "peekLast",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Queue",
          "name": "poll",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "pollFirst",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "pollLast",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "pop",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "push",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "removeFirst",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "removeFirstOccurrence",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "removeLast",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "removeLastOccurrence",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Dictionary",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Dictionary",
          "name": "elements",
          "return": "java.util.Enumeration",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Dictionary",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Dictionary",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Dictionary",
          "name": "keys",
          "return": "java.util.Enumeration",
          "parameters": []
        },
        {
          "declaring": "java.util.Dictionary",
          "name": "put",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Dictionary",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Dictionary",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.DoubleSummaryStatistics",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.DoubleSummaryStatistics",
          "parameters": []
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.DoubleConsumer",
          "name": "accept",
          "return": "void",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.util.function.DoubleConsumer",
          "name": "andThen",
          "return": "java.util.function.DoubleConsumer",
          "parameters": [
            "java.util.function.DoubleConsumer"
          ]
        },
        {
          "declaring": "java.util.DoubleSummaryStatistics",
          "name": "combine",
          "return": "void",
          "parameters": [
            "java.util.DoubleSummaryStatistics"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.DoubleSummaryStatistics",
          "name": "getAverage",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.util.DoubleSummaryStatistics",
          "name": "getCount",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.DoubleSummaryStatistics",
          "name": "getMax",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.util.DoubleSummaryStatistics",
          "name": "getMin",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.util.DoubleSummaryStatistics",
          "name": "getSum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.DuplicateFormatFlagsException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.DuplicateFormatFlagsException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.DuplicateFormatFlagsException",
          "name": "getFlags",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.EmptyStackException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.EmptyStackException",
          "parameters": []
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Enumeration",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Enumeration",
          "name": "hasMoreElements",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Enumeration",
          "name": "nextElement",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.EventListener",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.EventListenerProxy",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.EventListenerProxy",
          "name": "getListener",
          "return": "java.util.EventListener",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.EventObject",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.EventObject",
          "parameters": [
            "java.lang.Object"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.EventObject",
          "name": "getSource",
          "return": "java.lang.Object",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.FormatFlagsConversionMismatchException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.FormatFlagsConversionMismatchException",
          "parameters": [
            "java.lang.String",
            "char"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.FormatFlagsConversionMismatchException",
          "name": "getConversion",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.util.FormatFlagsConversionMismatchException",
          "name": "getFlags",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Formattable",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Formattable",
          "name": "formatTo",
          "return": "void",
          "parameters": [
            "java.util.Formatter",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.FormattableFlags",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.util.FormattableFlags",
          "name": "ALTERNATE",
          "type": "int"
        },
        {
          "declaring": "java.util.FormattableFlags",
          "name": "LEFT_JUSTIFY",
          "type": "int"
        },
        {
          "declaring": "java.util.FormattableFlags",
          "name": "UPPERCASE",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.util.Formatter",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.Formatter",
          "parameters": []
        },
        {
          "declaring": "java.util.Formatter",
          "parameters": [
            "java.lang.Appendable"
          ]
        },
        {
          "declaring": "java.util.Formatter",
          "parameters": [
            "java.lang.Appendable",
            "java.util.Locale"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Formatter",
          "name": "format",
          "return": "java.util.Formatter",
          "parameters": [
            "java.lang.String",
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.util.Formatter",
          "name": "format",
          "return": "java.util.Formatter",
          "parameters": [
            "java.util.Locale",
            "java.lang.String",
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Formatter",
          "name": "locale",
          "return": "java.util.Locale",
          "parameters": []
        },
        {
          "declaring": "java.util.Formatter",
          "name": "out",
          "return": "java.lang.Appendable",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Formatter$BigDecimalLayoutForm",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.util.Formatter$BigDecimalLayoutForm",
          "name": "DECIMAL_FLOAT",
          "type": "java.util.Formatter$BigDecimalLayoutForm"
        },
        {
          "declaring": "java.util.Formatter$BigDecimalLayoutForm",
          "name": "SCIENTIFIC",
          "type": "java.util.Formatter$BigDecimalLayoutForm"
        }
      ],
      "fields": []
    },
    {
      "name": "java.util.FormatterClosedException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.FormatterClosedException",
          "parameters": []
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.GregorianCalendar",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.GregorianCalendar",
          "parameters": []
        },
        {
          "declaring": "java.util.GregorianCalendar",
          "parameters": [
            "java.util.TimeZone"
          ]
        },
        {
          "declaring": "java.util.GregorianCalendar",
          "parameters": [
            "java.util.TimeZone",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.GregorianCalendar",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.GregorianCalendar",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.GregorianCalendar",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
          ]
        }
      ],
      "static_methods": [
        {
          "declaring": "java.util.GregorianCalendar",
          "name": "from",
          "return": "java.util.GregorianCalendar",
          "parameters": [
            "java.time.ZonedDateTime"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.Calendar",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "after",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "before",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "clear",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.util.Calendar"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "get",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getActualMaximum",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getActualMinimum",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getCalendarType",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "int",
            "int",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getDisplayNames",
          "return": "java.util.Map",
          "parameters": [
            "int",
            "int",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getFirstDayOfWeek",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getGreatestMinimum",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.GregorianCalendar",
          "name": "getGregorianChange",
          "return": "java.util.Date",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getLeastMaximum",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getMaximum",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getMinimalDaysInFirstWeek",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getMinimum",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getTime",
          "return": "java.util.Date",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getTimeInMillis",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getTimeZone",
          "return": "java.util.TimeZone",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getWeekYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "getWeeksInWeekYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.GregorianCalendar",
          "name": "isLeapYear",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "isLenient",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "isSet",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "isWeekDateSupported",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Calendar",
          "name": "roll",
          "return": "void",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "set",
          "return": "void",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "set",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "set",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "set",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "setFirstDayOfWeek",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.GregorianCalendar",
          "name": "setGregorianChange",
          "return": "void",
          "parameters": [
            "java.util.Date"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "setLenient",
          "return": "void",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "setMinimalDaysInFirstWeek",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "setTime",
          "return": "void",
          "parameters": [
            "java.util.Date"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "setTimeInMillis",
          "return": "void",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "setTimeZone",
          "return": "void",
          "parameters": [
            "java.util.TimeZone"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "setWeekDate",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Calendar",
          "name": "toInstant",
          "return": "java.time.Instant",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.GregorianCalendar",
          "name": "toZonedDateTime",
          "return": "java.time.ZonedDateTime",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.util.GregorianCalendar",
          "name": "AD",
          "type": "int"
        },
        {
          "declaring": "java.util.GregorianCalendar",
          "name": "BC",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.util.HashMap",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.HashMap",
          "parameters": []
        },
        {
          "declaring": "java.util.HashMap",
          "parameters": [
            "java.util.Map"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Map",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.HashMap",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "compute",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfPresent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsKey",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsValue",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "count",
          "return": "int",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "entrySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "java.util.Map$Entry",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "getOrDefault",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "keySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "merge",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "put",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putAll",
          "return": "void",
          "parameters": [
            "java.util.Map"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "values",
          "return": "java.util.Collection",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.HashSet",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.HashSet",
          "parameters": []
        },
        {
          "declaring": "java.util.HashSet",
          "parameters": [
            "java.util.Collection"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.HashSet",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Hashtable",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.Hashtable",
          "parameters": []
        },
        {
          "declaring": "java.util.Hashtable",
          "parameters": [
            "java.util.Map"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Map",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.Hashtable",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "compute",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfPresent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsKey",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsValue",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "count",
          "return": "int",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Dictionary",
          "name": "elements",
          "return": "java.util.Enumeration",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "entrySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "java.util.Map$Entry",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "getOrDefault",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "keySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Dictionary",
          "name": "keys",
          "return": "java.util.Enumeration",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "merge",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "put",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putAll",
          "return": "void",
          "parameters": [
            "java.util.Map"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "values",
          "return": "java.util.Collection",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.IdentityHashMap",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.IdentityHashMap",
          "parameters": []
        },
        {
          "declaring": "java.util.IdentityHashMap",
          "parameters": [
            "java.util.Map"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Map",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.IdentityHashMap",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "compute",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfPresent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsKey",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsValue",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "count",
          "return": "int",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "entrySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "java.util.Map$Entry",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "getOrDefault",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "keySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "merge",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "put",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putAll",
          "return": "void",
          "parameters": [
            "java.util.Map"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "values",
          "return": "java.util.Collection",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.IllegalFormatCodePointException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.IllegalFormatCodePointException",
          "parameters": [
            "int"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.IllegalFormatCodePointException",
          "name": "getCodePoint",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.IllegalFormatConversionException",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.IllegalFormatConversionException",
          "name": "getConversion",
          "return": "char",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.IllegalFormatException",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.IllegalFormatFlagsException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.IllegalFormatFlagsException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.IllegalFormatFlagsException",
          "name": "getFlags",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.IllegalFormatPrecisionException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.IllegalFormatPrecisionException",
          "parameters": [
            "int"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.IllegalFormatPrecisionException",
          "name": "getPrecision",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.IllegalFormatWidthException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.IllegalFormatWidthException",
          "parameters": [
            "int"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.util.IllegalFormatWidthException",
          "name": "getWidth",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.IllformedLocaleException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.IllformedLocaleException",
          "parameters": []
        },
        {
          "declaring": "java.util.IllformedLocaleException",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.IllformedLocaleException",
          "parameters": [
            "java.lang.String",
            "int"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.IllformedLocaleException",
          "name": "getErrorIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.InputMismatchException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.InputMismatchException",
          "parameters": []
        },
        {
          "declaring": "java.util.InputMismatchException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.IntSummaryStatistics",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.IntSummaryStatistics",
          "parameters": []
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.IntConsumer",
          "name": "accept",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.function.IntConsumer",
          "name": "andThen",
          "return": "java.util.function.IntConsumer",
          "parameters": [
            "java.util.function.IntConsumer"
          ]
        },
        {
          "declaring": "java.util.IntSummaryStatistics",
          "name": "combine",
          "return": "void",
          "parameters": [
            "java.util.IntSummaryStatistics"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.IntSummaryStatistics",
          "name": "getAverage",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.util.IntSummaryStatistics",
          "name": "getCount",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.IntSummaryStatistics",
          "name": "getMax",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.IntSummaryStatistics",
          "name": "getMin",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.IntSummaryStatistics",
          "name": "getSum",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Iterator",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Iterator",
          "name": "forEachRemaining",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.Iterator",
          "name": "hasNext",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Iterator",
          "name": "next",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Iterator",
          "name": "remove",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.LinkedHashMap",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.LinkedHashMap",
          "parameters": []
        },
        {
          "declaring": "java.util.LinkedHashMap",
          "parameters": [
            "java.util.Map"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Map",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.HashMap",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "compute",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfPresent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsKey",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsValue",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "count",
          "return": "int",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "entrySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "java.util.Map$Entry",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "getOrDefault",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "keySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "merge",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "put",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putAll",
          "return": "void",
          "parameters": [
            "java.util.Map"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "values",
          "return": "java.util.Collection",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.LinkedHashSet",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.LinkedHashSet",
          "parameters": []
        },
        {
          "declaring": "java.util.LinkedHashSet",
          "parameters": [
            "java.util.Collection"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.HashSet",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.LinkedList",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.LinkedList",
          "parameters": []
        },
        {
          "declaring": "java.util.LinkedList",
          "parameters": [
            "java.util.Collection"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "addFirst",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "addLast",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.LinkedList",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "descendingIterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "element",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "getFirst",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "getLast",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "offer",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "offerFirst",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "offerLast",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "peek",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "peekFirst",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "peekLast",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Queue",
          "name": "poll",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "pollFirst",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "pollLast",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "pop",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "push",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "removeFirst",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "removeFirstOccurrence",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Deque",
          "name": "removeLast",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Deque",
          "name": "removeLastOccurrence",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.List",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.ListIterator",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.ListIterator",
          "name": "add",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Iterator",
          "name": "forEachRemaining",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.Iterator",
          "name": "hasNext",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.ListIterator",
          "name": "hasPrevious",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Iterator",
          "name": "next",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.ListIterator",
          "name": "nextIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.ListIterator",
          "name": "previousIndex",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Iterator",
          "name": "remove",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.ListIterator",
          "name": "set",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Locale",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.Locale",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale",
          "parameters": [
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale",
          "parameters": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [
        {
          "declaring": "java.util.Locale",
          "name": "filter",
          "return": "java.util.List",
          "parameters": [
            "java.util.List",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Locale",
          "name": "filterTags",
          "return": "java.util.List",
          "parameters": [
            "java.util.List",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Locale",
          "name": "forLanguageTag",
          "return": "java.util.Locale",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale",
          "name": "getAvailableLocales",
          "return": "[Ljava.util.Locale;",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getDefault",
          "return": "java.util.Locale",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getDefault",
          "return": "java.util.Locale",
          "parameters": [
            "java.util.Locale$Category"
          ]
        },
        {
          "declaring": "java.util.Locale",
          "name": "getISOCountries",
          "return": "[Ljava.lang.String;",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getISOLanguages",
          "return": "[Ljava.lang.String;",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "lookup",
          "return": "java.util.Locale",
          "parameters": [
            "java.util.List",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Locale",
          "name": "lookupTag",
          "return": "java.lang.String",
          "parameters": [
            "java.util.List",
            "java.util.Collection"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.Locale",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Locale",
          "name": "getCountry",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getDisplayCountry",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getDisplayCountry",
          "return": "java.lang.String",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.Locale",
          "name": "getDisplayLanguage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getDisplayLanguage",
          "return": "java.lang.String",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.Locale",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.Locale",
          "name": "getDisplayScript",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getDisplayScript",
          "return": "java.lang.String",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.Locale",
          "name": "getDisplayVariant",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getDisplayVariant",
          "return": "java.lang.String",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.Locale",
          "name": "getExtension",
          "return": "java.lang.String",
          "parameters": [
            "char"
          ]
        },
        {
          "declaring": "java.util.Locale",
          "name": "getExtensionKeys",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getISO3Country",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getISO3Language",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getLanguage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getScript",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getUnicodeLocaleAttributes",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getUnicodeLocaleKeys",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "getUnicodeLocaleType",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale",
          "name": "getVariant",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "hasExtensions",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "stripExtensions",
          "return": "java.util.Locale",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale",
          "name": "toLanguageTag",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.util.Locale",
          "name": "CANADA",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "CANADA_FRENCH",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "CHINA",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "CHINESE",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "ENGLISH",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "FRANCE",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "FRENCH",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "GERMAN",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "GERMANY",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "ITALIAN",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "ITALY",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "JAPAN",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "JAPANESE",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "KOREA",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "KOREAN",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "PRC",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "PRIVATE_USE_EXTENSION",
          "type": "char"
        },
        {
          "declaring": "java.util.Locale",
          "name": "ROOT",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "SIMPLIFIED_CHINESE",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "TAIWAN",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "TRADITIONAL_CHINESE",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "UK",
          "type": "java.util.Locale"
        },
        {
          "declaring": "java.util.Locale",
          "name": "UNICODE_LOCALE_EXTENSION",
          "type": "char"
        },
        {
          "declaring": "java.util.Locale",
          "name": "US",
          "type": "java.util.Locale"
        }
      ],
      "fields": []
    },
    {
      "name": "java.util.Locale$Builder",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.Locale$Builder",
          "parameters": []
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Locale$Builder",
          "name": "addUnicodeLocaleAttribute",
          "return": "java.util.Locale$Builder",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale$Builder",
          "name": "build",
          "return": "java.util.Locale",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale$Builder",
          "name": "clear",
          "return": "java.util.Locale$Builder",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale$Builder",
          "name": "clearExtensions",
          "return": "java.util.Locale$Builder",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale$Builder",
          "name": "removeUnicodeLocaleAttribute",
          "return": "java.util.Locale$Builder",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale$Builder",
          "name": "setExtension",
          "return": "java.util.Locale$Builder",
          "parameters": [
            "char",
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale$Builder",
          "name": "setLanguage",
          "return": "java.util.Locale$Builder",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale$Builder",
          "name": "setLanguageTag",
          "return": "java.util.Locale$Builder",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale$Builder",
          "name": "setLocale",
          "return": "java.util.Locale$Builder",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.Locale$Builder",
          "name": "setRegion",
          "return": "java.util.Locale$Builder",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale$Builder",
          "name": "setScript",
          "return": "java.util.Locale$Builder",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale$Builder",
          "name": "setUnicodeLocaleKeyword",
          "return": "java.util.Locale$Builder",
          "parameters": [
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale$Builder",
          "name": "setVariant",
          "return": "java.util.Locale$Builder",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Locale$Category",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.Locale$Category",
          "name": "valueOf",
          "return": "java.util.Locale$Category",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale$Category",
          "name": "values",
          "return": "[Ljava.util.Locale$Category;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.util.Locale$Category",
          "name": "DISPLAY",
          "type": "java.util.Locale$Category"
        },
        {
          "declaring": "java.util.Locale$Category",
          "name": "FORMAT",
          "type": "java.util.Locale$Category"
        }
      ],
      "fields": []
    },
    {
      "name": "java.util.Locale$FilteringMode",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.Locale$FilteringMode",
          "name": "valueOf",
          "return": "java.util.Locale$FilteringMode",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale$FilteringMode",
          "name": "values",
          "return": "[Ljava.util.Locale$FilteringMode;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.util.Locale$FilteringMode",
          "name": "AUTOSELECT_FILTERING",
          "type": "java.util.Locale$FilteringMode"
        },
        {
          "declaring": "java.util.Locale$FilteringMode",
          "name": "EXTENDED_FILTERING",
          "type": "java.util.Locale$FilteringMode"
        },
        {
          "declaring": "java.util.Locale$FilteringMode",
          "name": "IGNORE_EXTENDED_RANGES",
          "type": "java.util.Locale$FilteringMode"
        },
        {
          "declaring": "java.util.Locale$FilteringMode",
          "name": "MAP_EXTENDED_RANGES",
          "type": "java.util.Locale$FilteringMode"
        },
        {
          "declaring": "java.util.Locale$FilteringMode",
          "name": "REJECT_EXTENDED_RANGES",
          "type": "java.util.Locale$FilteringMode"
        }
      ],
      "fields": []
    },
    {
      "name": "java.util.Locale$LanguageRange",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.Locale$LanguageRange",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale$LanguageRange",
          "parameters": [
            "java.lang.String",
            "double"
          ]
        }
      ],
      "static_methods": [
        {
          "declaring": "java.util.Locale$LanguageRange",
          "name": "mapEquivalents",
          "return": "java.util.List",
          "parameters": [
            "java.util.List",
            "java.util.Map"
          ]
        },
        {
          "declaring": "java.util.Locale$LanguageRange",
          "name": "parse",
          "return": "java.util.List",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Locale$LanguageRange",
          "name": "parse",
          "return": "java.util.List",
          "parameters": [
            "java.lang.String",
            "java.util.Map"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Locale$LanguageRange",
          "name": "getRange",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Locale$LanguageRange",
          "name": "getWeight",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.util.Locale$LanguageRange",
          "name": "MAX_WEIGHT",
          "type": "double"
        },
        {
          "declaring": "java.util.Locale$LanguageRange",
          "name": "MIN_WEIGHT",
          "type": "double"
        }
      ],
      "fields": []
    },
    {
      "name": "java.util.LongSummaryStatistics",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.LongSummaryStatistics",
          "parameters": []
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.LongConsumer",
          "name": "accept",
          "return": "void",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.function.LongConsumer",
          "name": "andThen",
          "return": "java.util.function.LongConsumer",
          "parameters": [
            "java.util.function.LongConsumer"
          ]
        },
        {
          "declaring": "java.util.LongSummaryStatistics",
          "name": "combine",
          "return": "void",
          "parameters": [
            "java.util.LongSummaryStatistics"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.LongSummaryStatistics",
          "name": "getAverage",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.util.LongSummaryStatistics",
          "name": "getCount",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.LongSummaryStatistics",
          "name": "getMax",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.LongSummaryStatistics",
          "name": "getMin",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.LongSummaryStatistics",
          "name": "getSum",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Map",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Map",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "compute",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfPresent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsKey",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsValue",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "count",
          "return": "int",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "entrySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "java.util.Map$Entry",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "getOrDefault",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "keySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "merge",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "put",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putAll",
          "return": "void",
          "parameters": [
            "java.util.Map"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "values",
          "return": "java.util.Collection",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Map$Entry",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.Map$Entry",
          "name": "comparingByKey",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Map$Entry",
          "name": "comparingByKey",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Map$Entry",
          "name": "comparingByValue",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Map$Entry",
          "name": "comparingByValue",
          "return": "java.util.Comparator",
          "parameters": [
            "java.util.Comparator"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.Map$Entry",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Map$Entry",
          "name": "getKey",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Map$Entry",
          "name": "getValue",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Map$Entry",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Map$Entry",
          "name": "setValue",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.MissingFormatArgumentException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.MissingFormatArgumentException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.MissingFormatArgumentException",
          "name": "getFormatSpecifier",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.MissingFormatWidthException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.MissingFormatWidthException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.MissingFormatWidthException",
          "name": "getFormatSpecifier",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.MissingResourceException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.MissingResourceException",
          "parameters": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.MissingResourceException",
          "name": "getClassName",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.MissingResourceException",
          "name": "getKey",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.NavigableMap",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.NavigableMap",
          "name": "ceilingEntry",
          "return": "java.util.Map$Entry",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "ceilingKey",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "comparator",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "compute",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfPresent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsKey",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsValue",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "count",
          "return": "int",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "descendingKeySet",
          "return": "java.util.NavigableSet",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "descendingMap",
          "return": "java.util.NavigableMap",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "entrySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "java.util.Map$Entry",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "firstEntry",
          "return": "java.util.Map$Entry",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "firstKey",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "floorEntry",
          "return": "java.util.Map$Entry",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "floorKey",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "getOrDefault",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "headMap",
          "return": "java.util.SortedMap",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "headMap",
          "return": "java.util.NavigableMap",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "boolean"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "higherEntry",
          "return": "java.util.Map$Entry",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "higherKey",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "keySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "lastEntry",
          "return": "java.util.Map$Entry",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "lastKey",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "lowerEntry",
          "return": "java.util.Map$Entry",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "merge",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "navigableKeySet",
          "return": "java.util.NavigableSet",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "pollFirstEntry",
          "return": "java.util.Map$Entry",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "pollLastEntry",
          "return": "java.util.Map$Entry",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "put",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putAll",
          "return": "void",
          "parameters": [
            "java.util.Map"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "subMap",
          "return": "java.util.SortedMap",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "subMap",
          "return": "java.util.NavigableMap",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "boolean",
            "org.elasticsearch.painless.lookup.def",
            "boolean"
          ]
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "tailMap",
          "return": "java.util.SortedMap",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "tailMap",
          "return": "java.util.NavigableMap",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "boolean"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "values",
          "return": "java.util.Collection",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.NavigableSet",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "ceiling",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "comparator",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "descendingIterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "descendingSet",
          "return": "java.util.NavigableSet",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "first",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "floor",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "headSet",
          "return": "java.util.SortedSet",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "headSet",
          "return": "java.util.NavigableSet",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "boolean"
          ]
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "higher",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "last",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "lower",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "pollFirst",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "pollLast",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Set",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "subSet",
          "return": "java.util.SortedSet",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "subSet",
          "return": "java.util.NavigableSet",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "boolean",
            "org.elasticsearch.painless.lookup.def",
            "boolean"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "tailSet",
          "return": "java.util.SortedSet",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "tailSet",
          "return": "java.util.NavigableSet",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "boolean"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.NoSuchElementException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.NoSuchElementException",
          "parameters": []
        },
        {
          "declaring": "java.util.NoSuchElementException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Objects",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.Objects",
          "name": "compare",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.Objects",
          "name": "deepEquals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Objects",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Objects",
          "name": "hash",
          "return": "int",
          "parameters": [
            "[Ljava.lang.Object;"
          ]
        },
        {
          "declaring": "java.util.Objects",
          "name": "hashCode",
          "return": "int",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Objects",
          "name": "isNull",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Objects",
          "name": "nonNull",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Objects",
          "name": "requireNonNull",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Objects",
          "name": "requireNonNull",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Objects",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Objects",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object",
            "java.lang.String"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Observable",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.Observable",
          "parameters": []
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Observable",
          "name": "addObserver",
          "return": "void",
          "parameters": [
            "java.util.Observer"
          ]
        },
        {
          "declaring": "java.util.Observable",
          "name": "countObservers",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Observable",
          "name": "deleteObserver",
          "return": "void",
          "parameters": [
            "java.util.Observer"
          ]
        },
        {
          "declaring": "java.util.Observable",
          "name": "deleteObservers",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Observable",
          "name": "hasChanged",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Observable",
          "name": "notifyObservers",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.Observable",
          "name": "notifyObservers",
          "return": "void",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Observer",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Observer",
          "name": "update",
          "return": "void",
          "parameters": [
            "java.util.Observable",
            "java.lang.Object"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Optional",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.Optional",
          "name": "empty",
          "return": "java.util.Optional",
          "parameters": []
        },
        {
          "declaring": "java.util.Optional",
          "name": "of",
          "return": "java.util.Optional",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Optional",
          "name": "ofNullable",
          "return": "java.util.Optional",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Optional",
          "name": "filter",
          "return": "java.util.Optional",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Optional",
          "name": "flatMap",
          "return": "java.util.Optional",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Optional",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Optional",
          "name": "ifPresent",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.Optional",
          "name": "isPresent",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Optional",
          "name": "map",
          "return": "java.util.Optional",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Optional",
          "name": "orElse",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Optional",
          "name": "orElseGet",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Supplier"
          ]
        },
        {
          "declaring": "java.util.Optional",
          "name": "orElseThrow",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Supplier"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.OptionalDouble",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.OptionalDouble",
          "name": "empty",
          "return": "java.util.OptionalDouble",
          "parameters": []
        },
        {
          "declaring": "java.util.OptionalDouble",
          "name": "of",
          "return": "java.util.OptionalDouble",
          "parameters": [
            "double"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.OptionalDouble",
          "name": "getAsDouble",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.OptionalDouble",
          "name": "ifPresent",
          "return": "void",
          "parameters": [
            "java.util.function.DoubleConsumer"
          ]
        },
        {
          "declaring": "java.util.OptionalDouble",
          "name": "isPresent",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.OptionalDouble",
          "name": "orElse",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.util.OptionalDouble",
          "name": "orElseGet",
          "return": "double",
          "parameters": [
            "java.util.function.DoubleSupplier"
          ]
        },
        {
          "declaring": "java.util.OptionalDouble",
          "name": "orElseThrow",
          "return": "double",
          "parameters": [
            "java.util.function.Supplier"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.OptionalInt",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.OptionalInt",
          "name": "empty",
          "return": "java.util.OptionalInt",
          "parameters": []
        },
        {
          "declaring": "java.util.OptionalInt",
          "name": "of",
          "return": "java.util.OptionalInt",
          "parameters": [
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.OptionalInt",
          "name": "getAsInt",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.OptionalInt",
          "name": "ifPresent",
          "return": "void",
          "parameters": [
            "java.util.function.IntConsumer"
          ]
        },
        {
          "declaring": "java.util.OptionalInt",
          "name": "isPresent",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.OptionalInt",
          "name": "orElse",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.OptionalInt",
          "name": "orElseGet",
          "return": "int",
          "parameters": [
            "java.util.function.IntSupplier"
          ]
        },
        {
          "declaring": "java.util.OptionalInt",
          "name": "orElseThrow",
          "return": "int",
          "parameters": [
            "java.util.function.Supplier"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.OptionalLong",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.OptionalLong",
          "name": "empty",
          "return": "java.util.OptionalLong",
          "parameters": []
        },
        {
          "declaring": "java.util.OptionalLong",
          "name": "of",
          "return": "java.util.OptionalLong",
          "parameters": [
            "long"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.OptionalLong",
          "name": "getAsLong",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.OptionalLong",
          "name": "ifPresent",
          "return": "void",
          "parameters": [
            "java.util.function.LongConsumer"
          ]
        },
        {
          "declaring": "java.util.OptionalLong",
          "name": "isPresent",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.OptionalLong",
          "name": "orElse",
          "return": "long",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.OptionalLong",
          "name": "orElseGet",
          "return": "long",
          "parameters": [
            "java.util.function.LongSupplier"
          ]
        },
        {
          "declaring": "java.util.OptionalLong",
          "name": "orElseThrow",
          "return": "long",
          "parameters": [
            "java.util.function.Supplier"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.PrimitiveIterator",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.PrimitiveIterator",
          "name": "forEachRemaining",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Iterator",
          "name": "hasNext",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Iterator",
          "name": "next",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Iterator",
          "name": "remove",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.PrimitiveIterator$OfDouble",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.PrimitiveIterator",
          "name": "forEachRemaining",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Iterator",
          "name": "hasNext",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.PrimitiveIterator$OfDouble",
          "name": "next",
          "return": "java.lang.Double",
          "parameters": []
        },
        {
          "declaring": "java.util.PrimitiveIterator$OfDouble",
          "name": "nextDouble",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.util.Iterator",
          "name": "remove",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.PrimitiveIterator$OfInt",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.PrimitiveIterator",
          "name": "forEachRemaining",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Iterator",
          "name": "hasNext",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.PrimitiveIterator$OfInt",
          "name": "next",
          "return": "java.lang.Integer",
          "parameters": []
        },
        {
          "declaring": "java.util.PrimitiveIterator$OfInt",
          "name": "nextInt",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Iterator",
          "name": "remove",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.PrimitiveIterator$OfLong",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.PrimitiveIterator",
          "name": "forEachRemaining",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Iterator",
          "name": "hasNext",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.PrimitiveIterator$OfLong",
          "name": "next",
          "return": "java.lang.Long",
          "parameters": []
        },
        {
          "declaring": "java.util.PrimitiveIterator$OfLong",
          "name": "nextLong",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.Iterator",
          "name": "remove",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.PriorityQueue",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.PriorityQueue",
          "parameters": []
        },
        {
          "declaring": "java.util.PriorityQueue",
          "parameters": [
            "java.util.Comparator"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "element",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "offer",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "peek",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Queue",
          "name": "poll",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Queue",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Queue",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "element",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "offer",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Queue",
          "name": "peek",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Queue",
          "name": "poll",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Queue",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Random",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.Random",
          "parameters": []
        },
        {
          "declaring": "java.util.Random",
          "parameters": [
            "long"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Random",
          "name": "doubles",
          "return": "java.util.stream.DoubleStream",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.Random",
          "name": "doubles",
          "return": "java.util.stream.DoubleStream",
          "parameters": [
            "long",
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Random",
          "name": "ints",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.Random",
          "name": "ints",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "long",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.Random",
          "name": "longs",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.Random",
          "name": "longs",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "long",
            "long",
            "long"
          ]
        },
        {
          "declaring": "java.util.Random",
          "name": "nextBoolean",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Random",
          "name": "nextBytes",
          "return": "void",
          "parameters": [
            "[B"
          ]
        },
        {
          "declaring": "java.util.Random",
          "name": "nextDouble",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.util.Random",
          "name": "nextFloat",
          "return": "float",
          "parameters": []
        },
        {
          "declaring": "java.util.Random",
          "name": "nextGaussian",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.util.Random",
          "name": "nextInt",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Random",
          "name": "nextInt",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Random",
          "name": "nextLong",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.Random",
          "name": "setSeed",
          "return": "void",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.RandomAccess",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Set",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.SimpleTimeZone",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.SimpleTimeZone",
          "parameters": [
            "int",
            "java.lang.String",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.SimpleTimeZone",
          "parameters": [
            "int",
            "java.lang.String",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.SimpleTimeZone",
          "parameters": [
            "int",
            "java.lang.String",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.SimpleTimeZone",
          "parameters": [
            "int",
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.TimeZone",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.SimpleTimeZone",
          "name": "getDSTSavings",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "boolean",
            "int"
          ]
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "boolean",
            "int",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getID",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getOffset",
          "return": "int",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getOffset",
          "return": "int",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getRawOffset",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "hasSameRules",
          "return": "boolean",
          "parameters": [
            "java.util.TimeZone"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "inDaylightTime",
          "return": "boolean",
          "parameters": [
            "java.util.Date"
          ]
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "observesDaylightTime",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.SimpleTimeZone",
          "name": "setDSTSavings",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.SimpleTimeZone",
          "name": "setEndRule",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.SimpleTimeZone",
          "name": "setEndRule",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.SimpleTimeZone",
          "name": "setEndRule",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "boolean"
          ]
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "setRawOffset",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.SimpleTimeZone",
          "name": "setStartRule",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.SimpleTimeZone",
          "name": "setStartRule",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.SimpleTimeZone",
          "name": "setStartRule",
          "return": "void",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "boolean"
          ]
        },
        {
          "declaring": "java.util.SimpleTimeZone",
          "name": "setStartYear",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "toZoneId",
          "return": "java.time.ZoneId",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "useDaylightTime",
          "return": "boolean",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.util.SimpleTimeZone",
          "name": "STANDARD_TIME",
          "type": "int"
        },
        {
          "declaring": "java.util.SimpleTimeZone",
          "name": "UTC_TIME",
          "type": "int"
        },
        {
          "declaring": "java.util.SimpleTimeZone",
          "name": "WALL_TIME",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.util.SortedMap",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Map",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "comparator",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "compute",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfPresent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsKey",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsValue",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "count",
          "return": "int",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "entrySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "java.util.Map$Entry",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "firstKey",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "getOrDefault",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "headMap",
          "return": "java.util.SortedMap",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "keySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "lastKey",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "merge",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "put",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putAll",
          "return": "void",
          "parameters": [
            "java.util.Map"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "subMap",
          "return": "java.util.SortedMap",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "tailMap",
          "return": "java.util.SortedMap",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "values",
          "return": "java.util.Collection",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.SortedSet",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "comparator",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "first",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "headSet",
          "return": "java.util.SortedSet",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "last",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Set",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "subSet",
          "return": "java.util.SortedSet",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "tailSet",
          "return": "java.util.SortedSet",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Spliterator",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Spliterator",
          "name": "characteristics",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "estimateSize",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "forEachRemaining",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "getComparator",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "getExactSizeIfKnown",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "hasCharacteristics",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "tryAdvance",
          "return": "boolean",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "trySplit",
          "return": "java.util.Spliterator",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.util.Spliterator",
          "name": "CONCURRENT",
          "type": "int"
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "DISTINCT",
          "type": "int"
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "IMMUTABLE",
          "type": "int"
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "NONNULL",
          "type": "int"
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "ORDERED",
          "type": "int"
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "SIZED",
          "type": "int"
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "SORTED",
          "type": "int"
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "SUBSIZED",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.util.Spliterator$OfDouble",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Spliterator",
          "name": "characteristics",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "estimateSize",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator$OfPrimitive",
          "name": "forEachRemaining",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "getComparator",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "getExactSizeIfKnown",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "hasCharacteristics",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator$OfPrimitive",
          "name": "tryAdvance",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Spliterator$OfDouble",
          "name": "trySplit",
          "return": "java.util.Spliterator$OfDouble",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Spliterator$OfInt",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Spliterator",
          "name": "characteristics",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "estimateSize",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator$OfPrimitive",
          "name": "forEachRemaining",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "getComparator",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "getExactSizeIfKnown",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "hasCharacteristics",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator$OfPrimitive",
          "name": "tryAdvance",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Spliterator$OfInt",
          "name": "trySplit",
          "return": "java.util.Spliterator$OfInt",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Spliterator$OfLong",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Spliterator",
          "name": "characteristics",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "estimateSize",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator$OfPrimitive",
          "name": "forEachRemaining",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "getComparator",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "getExactSizeIfKnown",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "hasCharacteristics",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator$OfPrimitive",
          "name": "tryAdvance",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Spliterator$OfLong",
          "name": "trySplit",
          "return": "java.util.Spliterator$OfLong",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Spliterator$OfPrimitive",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Spliterator",
          "name": "characteristics",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "estimateSize",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator$OfPrimitive",
          "name": "forEachRemaining",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "getComparator",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "getExactSizeIfKnown",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator",
          "name": "hasCharacteristics",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterator$OfPrimitive",
          "name": "tryAdvance",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Spliterator$OfPrimitive",
          "name": "trySplit",
          "return": "java.util.Spliterator$OfPrimitive",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Spliterators",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.Spliterators",
          "name": "emptyDoubleSpliterator",
          "return": "java.util.Spliterator$OfDouble",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterators",
          "name": "emptyIntSpliterator",
          "return": "java.util.Spliterator$OfInt",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterators",
          "name": "emptyLongSpliterator",
          "return": "java.util.Spliterator$OfLong",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterators",
          "name": "emptySpliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Spliterators",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": [
            "java.util.Spliterator"
          ]
        },
        {
          "declaring": "java.util.Spliterators",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": [
            "java.util.Collection",
            "int"
          ]
        },
        {
          "declaring": "java.util.Spliterators",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": [
            "java.util.Iterator",
            "long",
            "int"
          ]
        },
        {
          "declaring": "java.util.Spliterators",
          "name": "spliteratorUnknownSize",
          "return": "java.util.Spliterator",
          "parameters": [
            "java.util.Iterator",
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Stack",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.Stack",
          "parameters": []
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "addElement",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.Vector",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "copyInto",
          "return": "void",
          "parameters": [
            "[Ljava.lang.Object;"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "elementAt",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "elements",
          "return": "java.util.Enumeration",
          "parameters": []
        },
        {
          "declaring": "java.util.Stack",
          "name": "empty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "firstElement",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "insertElementAt",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "lastElement",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "int"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Stack",
          "name": "peek",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Stack",
          "name": "pop",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Stack",
          "name": "push",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "removeAllElements",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.Vector",
          "name": "removeElement",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "removeElementAt",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Stack",
          "name": "search",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "setElementAt",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.StringJoiner",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.StringJoiner",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.util.StringJoiner",
          "parameters": [
            "java.lang.CharSequence",
            "java.lang.CharSequence",
            "java.lang.CharSequence"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.StringJoiner",
          "name": "add",
          "return": "java.util.StringJoiner",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.StringJoiner",
          "name": "length",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.StringJoiner",
          "name": "merge",
          "return": "java.util.StringJoiner",
          "parameters": [
            "java.util.StringJoiner"
          ]
        },
        {
          "declaring": "java.util.StringJoiner",
          "name": "setEmptyValue",
          "return": "java.util.StringJoiner",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.StringTokenizer",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.StringTokenizer",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.StringTokenizer",
          "parameters": [
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.StringTokenizer",
          "parameters": [
            "java.lang.String",
            "java.lang.String",
            "boolean"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.StringTokenizer",
          "name": "countTokens",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Enumeration",
          "name": "hasMoreElements",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.StringTokenizer",
          "name": "hasMoreTokens",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.Enumeration",
          "name": "nextElement",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.StringTokenizer",
          "name": "nextToken",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.StringTokenizer",
          "name": "nextToken",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.TimeZone",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.TimeZone",
          "name": "getAvailableIDs",
          "return": "[Ljava.lang.String;",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getAvailableIDs",
          "return": "[Ljava.lang.String;",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getDefault",
          "return": "java.util.TimeZone",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getTimeZone",
          "return": "java.util.TimeZone",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.TimeZone",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getDSTSavings",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "boolean",
            "int"
          ]
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getDisplayName",
          "return": "java.lang.String",
          "parameters": [
            "boolean",
            "int",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getID",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getOffset",
          "return": "int",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getOffset",
          "return": "int",
          "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "getRawOffset",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "hasSameRules",
          "return": "boolean",
          "parameters": [
            "java.util.TimeZone"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "inDaylightTime",
          "return": "boolean",
          "parameters": [
            "java.util.Date"
          ]
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "observesDaylightTime",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "setRawOffset",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "toZoneId",
          "return": "java.time.ZoneId",
          "parameters": []
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "useDaylightTime",
          "return": "boolean",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.util.TimeZone",
          "name": "LONG",
          "type": "int"
        },
        {
          "declaring": "java.util.TimeZone",
          "name": "SHORT",
          "type": "int"
        }
      ],
      "fields": []
    },
    {
      "name": "java.util.TooManyListenersException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.TooManyListenersException",
          "parameters": []
        },
        {
          "declaring": "java.util.TooManyListenersException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.TreeMap",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.TreeMap",
          "parameters": []
        },
        {
          "declaring": "java.util.TreeMap",
          "parameters": [
            "java.util.Comparator"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.NavigableMap",
          "name": "ceilingEntry",
          "return": "java.util.Map$Entry",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "ceilingKey",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.TreeMap",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "comparator",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "compute",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "computeIfPresent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsKey",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "containsValue",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "count",
          "return": "int",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "descendingKeySet",
          "return": "java.util.NavigableSet",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "descendingMap",
          "return": "java.util.NavigableMap",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "entrySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "java.util.Map$Entry",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "firstEntry",
          "return": "java.util.Map$Entry",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "firstKey",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "floorEntry",
          "return": "java.util.Map$Entry",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "floorKey",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "getOrDefault",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "headMap",
          "return": "java.util.SortedMap",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "headMap",
          "return": "java.util.NavigableMap",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "boolean"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "higherEntry",
          "return": "java.util.Map$Entry",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "higherKey",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "keySet",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "lastEntry",
          "return": "java.util.Map$Entry",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "lastKey",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "lowerEntry",
          "return": "java.util.Map$Entry",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "merge",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "navigableKeySet",
          "return": "java.util.NavigableSet",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "pollFirstEntry",
          "return": "java.util.Map$Entry",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "pollLastEntry",
          "return": "java.util.Map$Entry",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "put",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putAll",
          "return": "void",
          "parameters": [
            "java.util.Map"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "putIfAbsent",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replace",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.BiFunction"
          ]
        },
        {
          "declaring": "java.util.Map",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "subMap",
          "return": "java.util.SortedMap",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "subMap",
          "return": "java.util.NavigableMap",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "boolean",
            "org.elasticsearch.painless.lookup.def",
            "boolean"
          ]
        },
        {
          "declaring": "java.util.SortedMap",
          "name": "tailMap",
          "return": "java.util.SortedMap",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableMap",
          "name": "tailMap",
          "return": "java.util.NavigableMap",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "boolean"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.Map",
          "name": "values",
          "return": "java.util.Collection",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.TreeSet",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.TreeSet",
          "parameters": []
        },
        {
          "declaring": "java.util.TreeSet",
          "parameters": [
            "java.util.Comparator"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "ceiling",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.TreeSet",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "comparator",
          "return": "java.util.Comparator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "descendingIterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "descendingSet",
          "return": "java.util.NavigableSet",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "first",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "floor",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Set",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "headSet",
          "return": "java.util.SortedSet",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "headSet",
          "return": "java.util.NavigableSet",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "boolean"
          ]
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "higher",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "last",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "lower",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "pollFirst",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "pollLast",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.Set",
          "name": "remove",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "subSet",
          "return": "java.util.SortedSet",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "subSet",
          "return": "java.util.NavigableSet",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "boolean",
            "org.elasticsearch.painless.lookup.def",
            "boolean"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.SortedSet",
          "name": "tailSet",
          "return": "java.util.SortedSet",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.NavigableSet",
          "name": "tailSet",
          "return": "java.util.NavigableSet",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "boolean"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.UUID",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.UUID",
          "parameters": [
            "long",
            "long"
          ]
        }
      ],
      "static_methods": [
        {
          "declaring": "java.util.UUID",
          "name": "fromString",
          "return": "java.util.UUID",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.UUID",
          "name": "nameUUIDFromBytes",
          "return": "java.util.UUID",
          "parameters": [
            "[B"
          ]
        },
        {
          "declaring": "java.util.UUID",
          "name": "randomUUID",
          "return": "java.util.UUID",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.util.UUID",
          "name": "clockSequence",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.UUID",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.util.UUID"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.UUID",
          "name": "getLeastSignificantBits",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.UUID",
          "name": "getMostSignificantBits",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.UUID",
          "name": "node",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.UUID",
          "name": "timestamp",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.UUID",
          "name": "variant",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.UUID",
          "name": "version",
          "return": "int",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.UnknownFormatConversionException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.UnknownFormatConversionException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.UnknownFormatConversionException",
          "name": "getConversion",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.UnknownFormatFlagsException",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.UnknownFormatFlagsException",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.UnknownFormatFlagsException",
          "name": "getFlags",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getLocalizedMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getMessage",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Throwable",
          "name": "getStackTrace",
          "return": "[Ljava.lang.StackTraceElement;",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.Vector",
      "imported": true,
      "constructors": [
        {
          "declaring": "java.util.Vector",
          "parameters": []
        },
        {
          "declaring": "java.util.Vector",
          "parameters": [
            "java.util.Collection"
          ]
        }
      ],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "addElement",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.Vector",
          "name": "clone",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "copyInto",
          "return": "void",
          "parameters": [
            "[Ljava.lang.Object;"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "elementAt",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "elements",
          "return": "java.util.Enumeration",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "firstElement",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "insertElementAt",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "lastElement",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "int"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "removeAllElements",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.Vector",
          "name": "removeElement",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "removeElementAt",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Vector",
          "name": "setElementAt",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.BiConsumer",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.BiConsumer",
          "name": "accept",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.function.BiConsumer",
          "name": "andThen",
          "return": "java.util.function.BiConsumer",
          "parameters": [
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.BiFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.BiFunction",
          "name": "andThen",
          "return": "java.util.function.BiFunction",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.function.BiFunction",
          "name": "apply",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.BiPredicate",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.BiPredicate",
          "name": "and",
          "return": "java.util.function.BiPredicate",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.function.BiPredicate",
          "name": "negate",
          "return": "java.util.function.BiPredicate",
          "parameters": []
        },
        {
          "declaring": "java.util.function.BiPredicate",
          "name": "or",
          "return": "java.util.function.BiPredicate",
          "parameters": [
            "java.util.function.BiPredicate"
          ]
        },
        {
          "declaring": "java.util.function.BiPredicate",
          "name": "test",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.BinaryOperator",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.function.BinaryOperator",
          "name": "maxBy",
          "return": "java.util.function.BinaryOperator",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.function.BinaryOperator",
          "name": "minBy",
          "return": "java.util.function.BinaryOperator",
          "parameters": [
            "java.util.Comparator"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.function.BiFunction",
          "name": "andThen",
          "return": "java.util.function.BiFunction",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.function.BiFunction",
          "name": "apply",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.BooleanSupplier",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.function.BooleanSupplier",
          "name": "getAsBoolean",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.Consumer",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.Consumer",
          "name": "accept",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.function.Consumer",
          "name": "andThen",
          "return": "java.util.function.Consumer",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.DoubleBinaryOperator",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.DoubleBinaryOperator",
          "name": "applyAsDouble",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.DoubleConsumer",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.DoubleConsumer",
          "name": "accept",
          "return": "void",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.util.function.DoubleConsumer",
          "name": "andThen",
          "return": "java.util.function.DoubleConsumer",
          "parameters": [
            "java.util.function.DoubleConsumer"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.DoubleFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.DoubleFunction",
          "name": "apply",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.DoublePredicate",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.DoublePredicate",
          "name": "and",
          "return": "java.util.function.DoublePredicate",
          "parameters": [
            "java.util.function.DoublePredicate"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.function.DoublePredicate",
          "name": "negate",
          "return": "java.util.function.DoublePredicate",
          "parameters": []
        },
        {
          "declaring": "java.util.function.DoublePredicate",
          "name": "or",
          "return": "java.util.function.DoublePredicate",
          "parameters": [
            "java.util.function.DoublePredicate"
          ]
        },
        {
          "declaring": "java.util.function.DoublePredicate",
          "name": "test",
          "return": "boolean",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.DoubleSupplier",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.function.DoubleSupplier",
          "name": "getAsDouble",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.DoubleToIntFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.DoubleToIntFunction",
          "name": "applyAsInt",
          "return": "int",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.DoubleToLongFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.DoubleToLongFunction",
          "name": "applyAsLong",
          "return": "long",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.DoubleUnaryOperator",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.function.DoubleUnaryOperator",
          "name": "identity",
          "return": "java.util.function.DoubleUnaryOperator",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.util.function.DoubleUnaryOperator",
          "name": "andThen",
          "return": "java.util.function.DoubleUnaryOperator",
          "parameters": [
            "java.util.function.DoubleUnaryOperator"
          ]
        },
        {
          "declaring": "java.util.function.DoubleUnaryOperator",
          "name": "applyAsDouble",
          "return": "double",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.util.function.DoubleUnaryOperator",
          "name": "compose",
          "return": "java.util.function.DoubleUnaryOperator",
          "parameters": [
            "java.util.function.DoubleUnaryOperator"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.Function",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.function.Function",
          "name": "identity",
          "return": "java.util.function.Function",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.util.function.Function",
          "name": "andThen",
          "return": "java.util.function.Function",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.function.Function",
          "name": "apply",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.function.Function",
          "name": "compose",
          "return": "java.util.function.Function",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.IntBinaryOperator",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.IntBinaryOperator",
          "name": "applyAsInt",
          "return": "int",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.IntConsumer",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.IntConsumer",
          "name": "accept",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.function.IntConsumer",
          "name": "andThen",
          "return": "java.util.function.IntConsumer",
          "parameters": [
            "java.util.function.IntConsumer"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.IntFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.IntFunction",
          "name": "apply",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.IntPredicate",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.IntPredicate",
          "name": "and",
          "return": "java.util.function.IntPredicate",
          "parameters": [
            "java.util.function.IntPredicate"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.function.IntPredicate",
          "name": "negate",
          "return": "java.util.function.IntPredicate",
          "parameters": []
        },
        {
          "declaring": "java.util.function.IntPredicate",
          "name": "or",
          "return": "java.util.function.IntPredicate",
          "parameters": [
            "java.util.function.IntPredicate"
          ]
        },
        {
          "declaring": "java.util.function.IntPredicate",
          "name": "test",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.IntSupplier",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.function.IntSupplier",
          "name": "getAsInt",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.IntToDoubleFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.IntToDoubleFunction",
          "name": "applyAsDouble",
          "return": "double",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.IntToLongFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.IntToLongFunction",
          "name": "applyAsLong",
          "return": "long",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.IntUnaryOperator",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.function.IntUnaryOperator",
          "name": "identity",
          "return": "java.util.function.IntUnaryOperator",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.util.function.IntUnaryOperator",
          "name": "andThen",
          "return": "java.util.function.IntUnaryOperator",
          "parameters": [
            "java.util.function.IntUnaryOperator"
          ]
        },
        {
          "declaring": "java.util.function.IntUnaryOperator",
          "name": "applyAsInt",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.function.IntUnaryOperator",
          "name": "compose",
          "return": "java.util.function.IntUnaryOperator",
          "parameters": [
            "java.util.function.IntUnaryOperator"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.LongBinaryOperator",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.LongBinaryOperator",
          "name": "applyAsLong",
          "return": "long",
          "parameters": [
            "long",
            "long"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.LongConsumer",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.LongConsumer",
          "name": "accept",
          "return": "void",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.function.LongConsumer",
          "name": "andThen",
          "return": "java.util.function.LongConsumer",
          "parameters": [
            "java.util.function.LongConsumer"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.LongFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.LongFunction",
          "name": "apply",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.LongPredicate",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.LongPredicate",
          "name": "and",
          "return": "java.util.function.LongPredicate",
          "parameters": [
            "java.util.function.LongPredicate"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.function.LongPredicate",
          "name": "negate",
          "return": "java.util.function.LongPredicate",
          "parameters": []
        },
        {
          "declaring": "java.util.function.LongPredicate",
          "name": "or",
          "return": "java.util.function.LongPredicate",
          "parameters": [
            "java.util.function.LongPredicate"
          ]
        },
        {
          "declaring": "java.util.function.LongPredicate",
          "name": "test",
          "return": "boolean",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.LongSupplier",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.function.LongSupplier",
          "name": "getAsLong",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.LongToDoubleFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.LongToDoubleFunction",
          "name": "applyAsDouble",
          "return": "double",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.LongToIntFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.LongToIntFunction",
          "name": "applyAsInt",
          "return": "int",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.LongUnaryOperator",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.function.LongUnaryOperator",
          "name": "identity",
          "return": "java.util.function.LongUnaryOperator",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.util.function.LongUnaryOperator",
          "name": "andThen",
          "return": "java.util.function.LongUnaryOperator",
          "parameters": [
            "java.util.function.LongUnaryOperator"
          ]
        },
        {
          "declaring": "java.util.function.LongUnaryOperator",
          "name": "applyAsLong",
          "return": "long",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.function.LongUnaryOperator",
          "name": "compose",
          "return": "java.util.function.LongUnaryOperator",
          "parameters": [
            "java.util.function.LongUnaryOperator"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.ObjDoubleConsumer",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.ObjDoubleConsumer",
          "name": "accept",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "double"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.ObjIntConsumer",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.ObjIntConsumer",
          "name": "accept",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.ObjLongConsumer",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.ObjLongConsumer",
          "name": "accept",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "long"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.Predicate",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.function.Predicate",
          "name": "isEqual",
          "return": "java.util.function.Predicate",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.function.Predicate",
          "name": "and",
          "return": "java.util.function.Predicate",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.function.Predicate",
          "name": "negate",
          "return": "java.util.function.Predicate",
          "parameters": []
        },
        {
          "declaring": "java.util.function.Predicate",
          "name": "or",
          "return": "java.util.function.Predicate",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.function.Predicate",
          "name": "test",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.Supplier",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.function.Supplier",
          "name": "get",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.ToDoubleBiFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.ToDoubleBiFunction",
          "name": "applyAsDouble",
          "return": "double",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.ToDoubleFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.ToDoubleFunction",
          "name": "applyAsDouble",
          "return": "double",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.ToIntBiFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.ToIntBiFunction",
          "name": "applyAsInt",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.ToIntFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.ToIntFunction",
          "name": "applyAsInt",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.ToLongBiFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.ToLongBiFunction",
          "name": "applyAsLong",
          "return": "long",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.ToLongFunction",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.ToLongFunction",
          "name": "applyAsLong",
          "return": "long",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.function.UnaryOperator",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.function.UnaryOperator",
          "name": "identity",
          "return": "java.util.function.UnaryOperator",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.util.function.Function",
          "name": "andThen",
          "return": "java.util.function.Function",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.function.Function",
          "name": "apply",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.function.Function",
          "name": "compose",
          "return": "java.util.function.Function",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.regex.Matcher",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.regex.Matcher",
          "name": "quoteReplacement",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.regex.Matcher",
          "name": "end",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "end",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "find",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "find",
          "return": "boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "group",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "group",
          "return": "java.lang.String",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "groupCount",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "hasAnchoringBounds",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "hasTransparentBounds",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "hitEnd",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "lookingAt",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "matches",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "namedGroup",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "pattern",
          "return": "java.util.regex.Pattern",
          "parameters": []
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "region",
          "return": "java.util.regex.Matcher",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "regionEnd",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "regionStart",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "replaceAll",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "replaceFirst",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "requireEnd",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "reset",
          "return": "java.util.regex.Matcher",
          "parameters": []
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "start",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "start",
          "return": "int",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "useAnchoringBounds",
          "return": "java.util.regex.Matcher",
          "parameters": [
            "boolean"
          ]
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "usePattern",
          "return": "java.util.regex.Matcher",
          "parameters": [
            "java.util.regex.Pattern"
          ]
        },
        {
          "declaring": "java.util.regex.Matcher",
          "name": "useTransparentBounds",
          "return": "java.util.regex.Matcher",
          "parameters": [
            "boolean"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.regex.Pattern",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.regex.Pattern",
          "name": "quote",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.regex.Pattern",
          "name": "asPredicate",
          "return": "java.util.function.Predicate",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.regex.Pattern",
          "name": "flags",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "matcher",
          "return": "java.util.regex.Matcher",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.util.regex.Pattern",
          "name": "pattern",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "[Ljava.lang.String;",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "[Ljava.lang.String;",
          "parameters": [
            "java.lang.CharSequence",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "splitAsStream",
          "return": "java.util.stream.Stream",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.stream.BaseStream",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "close",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "isParallel",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "sequential",
          "return": "java.util.stream.BaseStream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "unordered",
          "return": "java.util.stream.BaseStream",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.stream.Collector",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.stream.Collector",
          "name": "of",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.Supplier",
            "java.util.function.BiConsumer",
            "java.util.function.BinaryOperator",
            "[Ljava.util.stream.Collector$Characteristics;"
          ]
        },
        {
          "declaring": "java.util.stream.Collector",
          "name": "of",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.Supplier",
            "java.util.function.BiConsumer",
            "java.util.function.BinaryOperator",
            "java.util.function.Function",
            "[Ljava.util.stream.Collector$Characteristics;"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.stream.Collector",
          "name": "accumulator",
          "return": "java.util.function.BiConsumer",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Collector",
          "name": "characteristics",
          "return": "java.util.Set",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Collector",
          "name": "combiner",
          "return": "java.util.function.BinaryOperator",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.stream.Collector",
          "name": "finisher",
          "return": "java.util.function.Function",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Collector",
          "name": "supplier",
          "return": "java.util.function.Supplier",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.stream.Collector$Characteristics",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.stream.Collector$Characteristics",
          "name": "valueOf",
          "return": "java.util.stream.Collector$Characteristics",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.stream.Collector$Characteristics",
          "name": "values",
          "return": "[Ljava.util.stream.Collector$Characteristics;",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Enum",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.lang.Enum"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "name",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.lang.Enum",
          "name": "ordinal",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [
        {
          "declaring": "java.util.stream.Collector$Characteristics",
          "name": "CONCURRENT",
          "type": "java.util.stream.Collector$Characteristics"
        },
        {
          "declaring": "java.util.stream.Collector$Characteristics",
          "name": "IDENTITY_FINISH",
          "type": "java.util.stream.Collector$Characteristics"
        },
        {
          "declaring": "java.util.stream.Collector$Characteristics",
          "name": "UNORDERED",
          "type": "java.util.stream.Collector$Characteristics"
        }
      ],
      "fields": []
    },
    {
      "name": "java.util.stream.Collectors",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.stream.Collectors",
          "name": "averagingDouble",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "averagingInt",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.ToIntFunction"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "averagingLong",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.ToLongFunction"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "collectingAndThen",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.stream.Collector",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "counting",
          "return": "java.util.stream.Collector",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "groupingBy",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "groupingBy",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.Function",
            "java.util.stream.Collector"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "groupingBy",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.Function",
            "java.util.function.Supplier",
            "java.util.stream.Collector"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "joining",
          "return": "java.util.stream.Collector",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "joining",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "joining",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.lang.CharSequence",
            "java.lang.CharSequence",
            "java.lang.CharSequence"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "mapping",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.Function",
            "java.util.stream.Collector"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "maxBy",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "minBy",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "partitioningBy",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "partitioningBy",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.Predicate",
            "java.util.stream.Collector"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "reducing",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.BinaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "reducing",
          "return": "java.util.stream.Collector",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BinaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "reducing",
          "return": "java.util.stream.Collector",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function",
            "java.util.function.BinaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "summarizingDouble",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "summarizingInt",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.ToIntFunction"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "summarizingLong",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.ToLongFunction"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "summingDouble",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "summingInt",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.ToIntFunction"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "summingLong",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.ToLongFunction"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "toCollection",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.Supplier"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "toList",
          "return": "java.util.stream.Collector",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "toMap",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.Function",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "toMap",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.Function",
            "java.util.function.Function",
            "java.util.function.BinaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "toMap",
          "return": "java.util.stream.Collector",
          "parameters": [
            "java.util.function.Function",
            "java.util.function.Function",
            "java.util.function.BinaryOperator",
            "java.util.function.Supplier"
          ]
        },
        {
          "declaring": "java.util.stream.Collectors",
          "name": "toSet",
          "return": "java.util.stream.Collector",
          "parameters": []
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.stream.DoubleStream",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "builder",
          "return": "java.util.stream.DoubleStream$Builder",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "concat",
          "return": "java.util.stream.DoubleStream",
          "parameters": [
            "java.util.stream.DoubleStream",
            "java.util.stream.DoubleStream"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "empty",
          "return": "java.util.stream.DoubleStream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "of",
          "return": "java.util.stream.DoubleStream",
          "parameters": [
            "[D"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "allMatch",
          "return": "boolean",
          "parameters": [
            "java.util.function.DoublePredicate"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "anyMatch",
          "return": "boolean",
          "parameters": [
            "java.util.function.DoublePredicate"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "average",
          "return": "java.util.OptionalDouble",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "boxed",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "close",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Supplier",
            "java.util.function.ObjDoubleConsumer",
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "count",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "distinct",
          "return": "java.util.stream.DoubleStream",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "filter",
          "return": "java.util.stream.DoubleStream",
          "parameters": [
            "java.util.function.DoublePredicate"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "findAny",
          "return": "java.util.OptionalDouble",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "findFirst",
          "return": "java.util.OptionalDouble",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "flatMap",
          "return": "java.util.stream.DoubleStream",
          "parameters": [
            "java.util.function.DoubleFunction"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.DoubleConsumer"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "forEachOrdered",
          "return": "void",
          "parameters": [
            "java.util.function.DoubleConsumer"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "isParallel",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "iterator",
          "return": "java.util.PrimitiveIterator$OfDouble",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "limit",
          "return": "java.util.stream.DoubleStream",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "map",
          "return": "java.util.stream.DoubleStream",
          "parameters": [
            "java.util.function.DoubleUnaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "mapToInt",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "java.util.function.DoubleToIntFunction"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "mapToLong",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "java.util.function.DoubleToLongFunction"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "mapToObj",
          "return": "java.util.stream.Stream",
          "parameters": [
            "java.util.function.DoubleFunction"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "max",
          "return": "java.util.OptionalDouble",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "min",
          "return": "java.util.OptionalDouble",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "noneMatch",
          "return": "boolean",
          "parameters": [
            "java.util.function.DoublePredicate"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "peek",
          "return": "java.util.stream.DoubleStream",
          "parameters": [
            "java.util.function.DoubleConsumer"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "reduce",
          "return": "java.util.OptionalDouble",
          "parameters": [
            "java.util.function.DoubleBinaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "reduce",
          "return": "double",
          "parameters": [
            "double",
            "java.util.function.DoubleBinaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "sequential",
          "return": "java.util.stream.DoubleStream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "skip",
          "return": "java.util.stream.DoubleStream",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "sorted",
          "return": "java.util.stream.DoubleStream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "spliterator",
          "return": "java.util.Spliterator$OfDouble",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "summaryStatistics",
          "return": "java.util.DoubleSummaryStatistics",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.DoubleStream",
          "name": "toArray",
          "return": "[D",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "unordered",
          "return": "java.util.stream.BaseStream",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.stream.DoubleStream$Builder",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.DoubleConsumer",
          "name": "accept",
          "return": "void",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream$Builder",
          "name": "add",
          "return": "java.util.stream.DoubleStream$Builder",
          "parameters": [
            "double"
          ]
        },
        {
          "declaring": "java.util.function.DoubleConsumer",
          "name": "andThen",
          "return": "java.util.function.DoubleConsumer",
          "parameters": [
            "java.util.function.DoubleConsumer"
          ]
        },
        {
          "declaring": "java.util.stream.DoubleStream$Builder",
          "name": "build",
          "return": "java.util.stream.DoubleStream",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.stream.IntStream",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.stream.IntStream",
          "name": "builder",
          "return": "java.util.stream.IntStream$Builder",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "concat",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "java.util.stream.IntStream",
            "java.util.stream.IntStream"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "empty",
          "return": "java.util.stream.IntStream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "of",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "[I"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "range",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "rangeClosed",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "int",
            "int"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.stream.IntStream",
          "name": "allMatch",
          "return": "boolean",
          "parameters": [
            "java.util.function.IntPredicate"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "anyMatch",
          "return": "boolean",
          "parameters": [
            "java.util.function.IntPredicate"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "asDoubleStream",
          "return": "java.util.stream.DoubleStream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "asLongStream",
          "return": "java.util.stream.LongStream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "average",
          "return": "java.util.OptionalDouble",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "boxed",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "close",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Supplier",
            "java.util.function.ObjIntConsumer",
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "count",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "distinct",
          "return": "java.util.stream.IntStream",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "filter",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "java.util.function.IntPredicate"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "findAny",
          "return": "java.util.OptionalInt",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "findFirst",
          "return": "java.util.OptionalInt",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "flatMap",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "java.util.function.IntFunction"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.IntConsumer"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "forEachOrdered",
          "return": "void",
          "parameters": [
            "java.util.function.IntConsumer"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "isParallel",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "iterator",
          "return": "java.util.PrimitiveIterator$OfInt",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "limit",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "map",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "java.util.function.IntUnaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "mapToDouble",
          "return": "java.util.stream.DoubleStream",
          "parameters": [
            "java.util.function.IntToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "mapToLong",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "java.util.function.IntToLongFunction"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "mapToObj",
          "return": "java.util.stream.Stream",
          "parameters": [
            "java.util.function.IntFunction"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "max",
          "return": "java.util.OptionalInt",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "min",
          "return": "java.util.OptionalInt",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "noneMatch",
          "return": "boolean",
          "parameters": [
            "java.util.function.IntPredicate"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "peek",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "java.util.function.IntConsumer"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "reduce",
          "return": "java.util.OptionalInt",
          "parameters": [
            "java.util.function.IntBinaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "reduce",
          "return": "int",
          "parameters": [
            "int",
            "java.util.function.IntBinaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "sequential",
          "return": "java.util.stream.IntStream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "skip",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "sorted",
          "return": "java.util.stream.IntStream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "spliterator",
          "return": "java.util.Spliterator$OfInt",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "sum",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "summaryStatistics",
          "return": "java.util.IntSummaryStatistics",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.IntStream",
          "name": "toArray",
          "return": "[I",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "unordered",
          "return": "java.util.stream.BaseStream",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.stream.IntStream$Builder",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.IntConsumer",
          "name": "accept",
          "return": "void",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream$Builder",
          "name": "add",
          "return": "java.util.stream.IntStream$Builder",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.function.IntConsumer",
          "name": "andThen",
          "return": "java.util.function.IntConsumer",
          "parameters": [
            "java.util.function.IntConsumer"
          ]
        },
        {
          "declaring": "java.util.stream.IntStream$Builder",
          "name": "build",
          "return": "java.util.stream.IntStream",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.stream.LongStream",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.stream.LongStream",
          "name": "builder",
          "return": "java.util.stream.LongStream$Builder",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "concat",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "java.util.stream.LongStream",
            "java.util.stream.LongStream"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "empty",
          "return": "java.util.stream.LongStream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "of",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "[J"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "range",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "long",
            "long"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "rangeClosed",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "long",
            "long"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.stream.LongStream",
          "name": "allMatch",
          "return": "boolean",
          "parameters": [
            "java.util.function.LongPredicate"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "anyMatch",
          "return": "boolean",
          "parameters": [
            "java.util.function.LongPredicate"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "asDoubleStream",
          "return": "java.util.stream.DoubleStream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "average",
          "return": "java.util.OptionalDouble",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "boxed",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "close",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Supplier",
            "java.util.function.ObjLongConsumer",
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "count",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "distinct",
          "return": "java.util.stream.LongStream",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "filter",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "java.util.function.LongPredicate"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "findAny",
          "return": "java.util.OptionalLong",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "findFirst",
          "return": "java.util.OptionalLong",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "flatMap",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "java.util.function.LongFunction"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.LongConsumer"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "forEachOrdered",
          "return": "void",
          "parameters": [
            "java.util.function.LongConsumer"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "isParallel",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "iterator",
          "return": "java.util.PrimitiveIterator$OfLong",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "limit",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "map",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "java.util.function.LongUnaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "mapToDouble",
          "return": "java.util.stream.DoubleStream",
          "parameters": [
            "java.util.function.LongToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "mapToInt",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "java.util.function.LongToIntFunction"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "mapToObj",
          "return": "java.util.stream.Stream",
          "parameters": [
            "java.util.function.LongFunction"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "max",
          "return": "java.util.OptionalLong",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "min",
          "return": "java.util.OptionalLong",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "noneMatch",
          "return": "boolean",
          "parameters": [
            "java.util.function.LongPredicate"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "peek",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "java.util.function.LongConsumer"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "reduce",
          "return": "java.util.OptionalLong",
          "parameters": [
            "java.util.function.LongBinaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "reduce",
          "return": "long",
          "parameters": [
            "long",
            "java.util.function.LongBinaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "sequential",
          "return": "java.util.stream.LongStream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "skip",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "sorted",
          "return": "java.util.stream.LongStream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "spliterator",
          "return": "java.util.Spliterator$OfLong",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "sum",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "summaryStatistics",
          "return": "java.util.LongSummaryStatistics",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.LongStream",
          "name": "toArray",
          "return": "[J",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "unordered",
          "return": "java.util.stream.BaseStream",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.stream.LongStream$Builder",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.LongConsumer",
          "name": "accept",
          "return": "void",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream$Builder",
          "name": "add",
          "return": "java.util.stream.LongStream$Builder",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.function.LongConsumer",
          "name": "andThen",
          "return": "java.util.function.LongConsumer",
          "parameters": [
            "java.util.function.LongConsumer"
          ]
        },
        {
          "declaring": "java.util.stream.LongStream$Builder",
          "name": "build",
          "return": "java.util.stream.LongStream",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.stream.Stream",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "java.util.stream.Stream",
          "name": "builder",
          "return": "java.util.stream.Stream$Builder",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "concat",
          "return": "java.util.stream.Stream",
          "parameters": [
            "java.util.stream.Stream",
            "java.util.stream.Stream"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "empty",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "of",
          "return": "java.util.stream.Stream",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.util.stream.Stream",
          "name": "allMatch",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "anyMatch",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "close",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.stream.Collector"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Supplier",
            "java.util.function.BiConsumer",
            "java.util.function.BiConsumer"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "count",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "distinct",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "filter",
          "return": "java.util.stream.Stream",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "findAny",
          "return": "java.util.Optional",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "findFirst",
          "return": "java.util.Optional",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "flatMap",
          "return": "java.util.stream.Stream",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "flatMapToDouble",
          "return": "java.util.stream.DoubleStream",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "flatMapToInt",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "flatMapToLong",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "forEachOrdered",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "isParallel",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "limit",
          "return": "java.util.stream.Stream",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "map",
          "return": "java.util.stream.Stream",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "mapToDouble",
          "return": "java.util.stream.DoubleStream",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "mapToInt",
          "return": "java.util.stream.IntStream",
          "parameters": [
            "java.util.function.ToIntFunction"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "mapToLong",
          "return": "java.util.stream.LongStream",
          "parameters": [
            "java.util.function.ToLongFunction"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "max",
          "return": "java.util.Optional",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "min",
          "return": "java.util.Optional",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "noneMatch",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "peek",
          "return": "java.util.stream.Stream",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "reduce",
          "return": "java.util.Optional",
          "parameters": [
            "java.util.function.BinaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "reduce",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BinaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "reduce",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.BiFunction",
            "java.util.function.BinaryOperator"
          ]
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "sequential",
          "return": "java.util.stream.BaseStream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "skip",
          "return": "java.util.stream.Stream",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "sorted",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "sorted",
          "return": "java.util.stream.Stream",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.Stream",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "java.util.function.IntFunction"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "java.util.stream.BaseStream",
          "name": "unordered",
          "return": "java.util.stream.BaseStream",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "java.util.stream.Stream$Builder",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.function.Consumer",
          "name": "accept",
          "return": "void",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.stream.Stream$Builder",
          "name": "add",
          "return": "java.util.stream.Stream$Builder",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.function.Consumer",
          "name": "andThen",
          "return": "java.util.function.Consumer",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "java.util.stream.Stream$Builder",
          "name": "build",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "long",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.apache.lucene.util.BytesRef",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "org.apache.lucene.util.BytesRef",
          "name": "bytesEquals",
          "return": "boolean",
          "parameters": [
            "org.apache.lucene.util.BytesRef"
          ]
        },
        {
          "declaring": "java.lang.Comparable",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "org.apache.lucene.util.BytesRef",
          "name": "utf8ToString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": [
        {
          "declaring": "org.apache.lucene.util.BytesRef",
          "name": "bytes",
          "type": "[B"
        },
        {
          "declaring": "org.apache.lucene.util.BytesRef",
          "name": "length",
          "type": "int"
        },
        {
          "declaring": "org.apache.lucene.util.BytesRef",
          "name": "offset",
          "type": "int"
        }
      ]
    },
    {
      "name": "org.elasticsearch.common.geo.GeoPoint",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.common.geo.GeoPoint",
          "name": "getLat",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.common.geo.GeoPoint",
          "name": "getLon",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.index.fielddata.ScriptDocValues$Booleans",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$Booleans",
          "name": "get",
          "return": "java.lang.Boolean",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$Booleans",
          "name": "getValue",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.index.fielddata.ScriptDocValues$BytesRefs",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$BytesRefs",
          "name": "get",
          "return": "org.apache.lucene.util.BytesRef",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$BytesRefs",
          "name": "getValue",
          "return": "org.apache.lucene.util.BytesRef",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.index.fielddata.ScriptDocValues$Dates",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$Dates",
          "name": "get",
          "return": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$Dates",
          "name": "getValue",
          "return": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.index.fielddata.ScriptDocValues$Doubles",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$Doubles",
          "name": "get",
          "return": "java.lang.Double",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$Doubles",
          "name": "getValue",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.index.fielddata.ScriptDocValues$GeoPoints",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$GeoPoints",
          "name": "arcDistance",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$GeoPoints",
          "name": "arcDistanceWithDefault",
          "return": "double",
          "parameters": [
            "double",
            "double",
            "double"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$GeoPoints",
          "name": "geohashDistance",
          "return": "double",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$GeoPoints",
          "name": "geohashDistanceWithDefault",
          "return": "double",
          "parameters": [
            "java.lang.String",
            "double"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$GeoPoints",
          "name": "get",
          "return": "org.elasticsearch.common.geo.GeoPoint",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$GeoPoints",
          "name": "getLat",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$GeoPoints",
          "name": "getLats",
          "return": "[D",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$GeoPoints",
          "name": "getLon",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$GeoPoints",
          "name": "getLons",
          "return": "[D",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$GeoPoints",
          "name": "getValue",
          "return": "org.elasticsearch.common.geo.GeoPoint",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$GeoPoints",
          "name": "planeDistance",
          "return": "double",
          "parameters": [
            "double",
            "double"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$GeoPoints",
          "name": "planeDistanceWithDefault",
          "return": "double",
          "parameters": [
            "double",
            "double",
            "double"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.index.fielddata.ScriptDocValues$Longs",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$Longs",
          "name": "get",
          "return": "java.lang.Long",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$Longs",
          "name": "getValue",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.index.fielddata.ScriptDocValues$Strings",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$Strings",
          "name": "get",
          "return": "java.lang.String",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.fielddata.ScriptDocValues$Strings",
          "name": "getValue",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.index.mapper.IpFieldMapper$IpFieldType$IpScriptDocValues",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.mapper.IpFieldMapper$IpFieldType$IpScriptDocValues",
          "name": "get",
          "return": "java.lang.String",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.mapper.IpFieldMapper$IpFieldType$IpScriptDocValues",
          "name": "getValue",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.index.query.IntervalFilterScript$Interval",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.query.IntervalFilterScript$Interval",
          "name": "getEnd",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.query.IntervalFilterScript$Interval",
          "name": "getGaps",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.query.IntervalFilterScript$Interval",
          "name": "getStart",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.index.similarity.ScriptedSimilarity$Doc",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.similarity.ScriptedSimilarity$Doc",
          "name": "getFreq",
          "return": "float",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.similarity.ScriptedSimilarity$Doc",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.index.similarity.ScriptedSimilarity$Field",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.similarity.ScriptedSimilarity$Field",
          "name": "getDocCount",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.similarity.ScriptedSimilarity$Field",
          "name": "getSumDocFreq",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.similarity.ScriptedSimilarity$Field",
          "name": "getSumTotalTermFreq",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.index.similarity.ScriptedSimilarity$Query",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.similarity.ScriptedSimilarity$Query",
          "name": "getBoost",
          "return": "float",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.index.similarity.ScriptedSimilarity$Term",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.index.similarity.ScriptedSimilarity$Term",
          "name": "getDocFreq",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.index.similarity.ScriptedSimilarity$Term",
          "name": "getTotalTermFreq",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.painless.api.Debug",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "org.elasticsearch.painless.api.Debug",
          "name": "explain",
          "return": "void",
          "parameters": [
            "java.lang.Object"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "compareTo",
          "return": "int",
          "parameters": [
            "java.time.chrono.ChronoZonedDateTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.time.format.DateTimeFormatter"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "get",
          "return": "int",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getCenturyOfEra",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "getChronology",
          "return": "java.time.chrono.Chronology",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getDayOfMonth",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getDayOfWeek",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getDayOfWeekEnum",
          "return": "java.time.DayOfWeek",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getDayOfYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getEra",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getHour",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getHourOfDay",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "getLong",
          "return": "long",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getMillis",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getMillisOfDay",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getMillisOfSecond",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getMinute",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getMinuteOfDay",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getMinuteOfHour",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getMonth",
          "return": "java.time.Month",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getMonthOfYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getMonthValue",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getNano",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "getOffset",
          "return": "java.time.ZoneOffset",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getSecond",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getSecondOfDay",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getSecondOfMinute",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getWeekOfWeekyear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getWeekyear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getYear",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getYearOfCentury",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "getYearOfEra",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "getZone",
          "return": "java.time.ZoneId",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "isAfter",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoZonedDateTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "isBefore",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoZonedDateTime"
          ]
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "isEqual",
          "return": "boolean",
          "parameters": [
            "java.time.chrono.ChronoZonedDateTime"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "isSupported",
          "return": "boolean",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "minus",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "minus",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "minusDays",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "minusHours",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "minusMinutes",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "minusMonths",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "minusNanos",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "minusSeconds",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "minusWeeks",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "minusYears",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "plus",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAmount"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "plus",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "plusDays",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "plusHours",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "plusMinutes",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "plusMonths",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "plusNanos",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "plusSeconds",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "plusWeeks",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "plusYears",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "long"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "query",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.time.temporal.TemporalQuery"
          ]
        },
        {
          "declaring": "java.time.temporal.TemporalAccessor",
          "name": "range",
          "return": "java.time.temporal.ValueRange",
          "parameters": [
            "java.time.temporal.TemporalField"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "toEpochMilli",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "toEpochSecond",
          "return": "long",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "toInstant",
          "return": "java.time.Instant",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "toLocalDate",
          "return": "java.time.LocalDate",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "toLocalDateTime",
          "return": "java.time.LocalDateTime",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "toLocalTime",
          "return": "java.time.LocalTime",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "toOffsetDateTime",
          "return": "java.time.OffsetDateTime",
          "parameters": []
        },
        {
          "declaring": "java.time.chrono.ChronoZonedDateTime",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String",
            "java.util.Locale"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "truncatedTo",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "java.time.temporal.Temporal",
          "name": "until",
          "return": "long",
          "parameters": [
            "java.time.temporal.Temporal",
            "java.time.temporal.TemporalUnit"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "with",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalAdjuster"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "with",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.temporal.TemporalField",
            "long"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "withDayOfMonth",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "withDayOfYear",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "withEarlierOffsetAtOverlap",
          "return": "java.time.ZonedDateTime",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "withFixedOffsetZone",
          "return": "java.time.ZonedDateTime",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "withHour",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "withLaterOffsetAtOverlap",
          "return": "java.time.ZonedDateTime",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "withMinute",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "withMonth",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "withNano",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "withSecond",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "withYear",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "withZoneSameInstant",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.ZoneId"
          ]
        },
        {
          "declaring": "org.elasticsearch.script.JodaCompatibleZonedDateTime",
          "name": "withZoneSameLocal",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.time.ZoneId"
          ]
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.script.ScoreScript$ExplanationHolder",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.script.ScoreScript$ExplanationHolder",
          "name": "set",
          "return": "void",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.search.lookup.FieldLookup",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.search.lookup.FieldLookup",
          "name": "getValue",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.search.lookup.FieldLookup",
          "name": "getValues",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.search.lookup.FieldLookup",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.xpack.eql.expression.function.scalar.whitelist.InternalEqlScriptUtils",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "org.elasticsearch.xpack.eql.expression.function.scalar.whitelist.InternalEqlScriptUtils",
          "name": "between",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.String",
            "java.lang.Boolean",
            "java.lang.Boolean"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.eql.expression.function.scalar.whitelist.InternalEqlScriptUtils",
          "name": "cidrMatch",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.String",
            "java.util.List"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.eql.expression.function.scalar.whitelist.InternalEqlScriptUtils",
          "name": "concat",
          "return": "java.lang.String",
          "parameters": [
            "java.util.List"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.eql.expression.function.scalar.whitelist.InternalEqlScriptUtils",
          "name": "endsWith",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.Boolean"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.eql.expression.function.scalar.whitelist.InternalEqlScriptUtils",
          "name": "indexOf",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.Number",
            "java.lang.Boolean"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.eql.expression.function.scalar.whitelist.InternalEqlScriptUtils",
          "name": "length",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.eql.expression.function.scalar.whitelist.InternalEqlScriptUtils",
          "name": "number",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.String",
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.eql.expression.function.scalar.whitelist.InternalEqlScriptUtils",
          "name": "seq",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.eql.expression.function.scalar.whitelist.InternalEqlScriptUtils",
          "name": "sneq",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.eql.expression.function.scalar.whitelist.InternalEqlScriptUtils",
          "name": "string",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.eql.expression.function.scalar.whitelist.InternalEqlScriptUtils",
          "name": "stringContains",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.Boolean"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.eql.expression.function.scalar.whitelist.InternalEqlScriptUtils",
          "name": "substring",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String",
            "java.lang.Number",
            "java.lang.Number"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "add",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number",
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "and",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.Boolean",
            "java.lang.Boolean"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "div",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number",
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "docValue",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Map",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "eq",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "gt",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "gte",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "in",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.Object",
            "java.util.List"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "isNotNull",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "isNull",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "lt",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "lte",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "mod",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number",
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "mul",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number",
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "neg",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "neq",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "not",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.Boolean"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "nullSafeFilter",
          "return": "boolean",
          "parameters": [
            "java.lang.Boolean"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "nullSafeSortNumeric",
          "return": "double",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "nullSafeSortString",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "nulleq",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "or",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.Boolean",
            "java.lang.Boolean"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "regex",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "startsWith",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.Boolean"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "sub",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number",
            "java.lang.Number"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
      "imported": true,
      "constructors": [],
      "static_methods": [
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "abs",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "acos",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "add",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "asDateTime",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "asTime",
          "return": "java.time.OffsetTime",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "ascii",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "asin",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "atan",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "atan2",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number",
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "bitLength",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "cast",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.lang.Object",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "cbrt",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "ceil",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "charLength",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "character",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "coalesce",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.List"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "concat",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "cos",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "cosh",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "cot",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "dateAdd",
          "return": "java.time.ZonedDateTime",
          "parameters": [
            "java.lang.String",
            "java.lang.Integer",
            "java.lang.Object",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "dateDiff",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.String",
            "java.lang.Object",
            "java.lang.Object",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "dateParse",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "datePart",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.String",
            "java.lang.Object",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "dateTimeChrono",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.Object",
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "dateTimeFormat",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object",
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "dateTimeParse",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "dateTrunc",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.lang.String",
            "java.lang.Object",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "dayName",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "dayOfWeek",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.Object",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "degrees",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "div",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "e",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "exp",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "expm1",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "floor",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "format",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object",
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "geoDocValue",
          "return": "org.elasticsearch.xpack.sql.expression.literal.geo.GeoShape",
          "parameters": [
            "java.util.Map",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "greatest",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.List"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "insert",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String",
            "java.lang.Number",
            "java.lang.Number",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "intervalDayTime",
          "return": "org.elasticsearch.xpack.sql.expression.literal.interval.IntervalDayTime",
          "parameters": [
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "intervalYearMonth",
          "return": "org.elasticsearch.xpack.sql.expression.literal.interval.IntervalYearMonth",
          "parameters": [
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "lcase",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "least",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.List"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "left",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String",
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "length",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "locate",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "locate",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "log",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "log10",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "ltrim",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "mod",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "monthName",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "mul",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "neg",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "nullif",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "octetLength",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "pi",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "position",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "power",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number",
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "quarter",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.Object",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "radians",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "random",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils",
          "name": "regex",
          "return": "java.lang.Boolean",
          "parameters": [
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "repeat",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String",
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "replace",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "right",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String",
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "round",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number",
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "rtrim",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "sign",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "sin",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "sinh",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "space",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "sqrt",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "stAswkt",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "stDistance",
          "return": "java.lang.Double",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "stGeometryType",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "stWktToSql",
          "return": "org.elasticsearch.xpack.sql.expression.literal.geo.GeoShape",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "stX",
          "return": "java.lang.Double",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "stY",
          "return": "java.lang.Double",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "stZ",
          "return": "java.lang.Double",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "sub",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.lang.Object",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "substring",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String",
            "java.lang.Number",
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "tan",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "timeParse",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "trim",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "truncate",
          "return": "java.lang.Number",
          "parameters": [
            "java.lang.Number",
            "java.lang.Number"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "ucase",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils",
          "name": "weekOfYear",
          "return": "java.lang.Integer",
          "parameters": [
            "java.lang.Object",
            "java.lang.String"
          ]
        }
      ],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.xpack.sql.expression.literal.geo.GeoShape",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.xpack.sql.expression.literal.interval.IntervalDayTime",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.xpack.sql.expression.literal.interval.IntervalYearMonth",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.lang.Object",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "org.elasticsearch.xpack.unsignedlong.UnsignedLongScriptDocValues",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [
        {
          "declaring": "java.util.Collection",
          "name": "add",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "add",
          "return": "void",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "addAll",
          "return": "boolean",
          "parameters": [
            "int",
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "any",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asCollection",
          "return": "java.util.Collection",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "asList",
          "return": "java.util.List",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "clear",
          "return": "void",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "collect",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.Collection",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "contains",
          "return": "boolean",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "containsAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "each",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "eachWithIndex",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.ObjIntConsumer"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "equals",
          "return": "boolean",
          "parameters": [
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "every",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "find",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findAll",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResult",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "org.elasticsearch.painless.lookup.def",
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "findResults",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "forEach",
          "return": "void",
          "parameters": [
            "java.util.function.Consumer"
          ]
        },
        {
          "declaring": "org.elasticsearch.xpack.unsignedlong.UnsignedLongScriptDocValues",
          "name": "get",
          "return": "java.lang.Number",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getByPath",
          "return": "java.lang.Object",
          "parameters": [
            "java.lang.String",
            "java.lang.Object"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "getLength",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.xpack.unsignedlong.UnsignedLongScriptDocValues",
          "name": "getValue",
          "return": "java.lang.Number",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "groupBy",
          "return": "java.util.Map",
          "parameters": [
            "java.util.function.Function"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "hashCode",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "indexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "isEmpty",
          "return": "boolean",
          "parameters": []
        },
        {
          "declaring": "java.lang.Iterable",
          "name": "iterator",
          "return": "java.util.Iterator",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "join",
          "return": "java.lang.String",
          "parameters": [
            "java.lang.String"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "lastIndexOf",
          "return": "int",
          "parameters": [
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "listIterator",
          "return": "java.util.ListIterator",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "remove",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "removeIf",
          "return": "boolean",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "replaceAll",
          "return": "void",
          "parameters": [
            "java.util.function.UnaryOperator"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "retainAll",
          "return": "boolean",
          "parameters": [
            "java.util.Collection"
          ]
        },
        {
          "declaring": "java.util.List",
          "name": "set",
          "return": "org.elasticsearch.painless.lookup.def",
          "parameters": [
            "int",
            "org.elasticsearch.painless.lookup.def"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "size",
          "return": "int",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "sort",
          "return": "void",
          "parameters": [
            "java.util.Comparator"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "split",
          "return": "java.util.List",
          "parameters": [
            "java.util.function.Predicate"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "spliterator",
          "return": "java.util.Spliterator",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "stream",
          "return": "java.util.stream.Stream",
          "parameters": []
        },
        {
          "declaring": "java.util.List",
          "name": "subList",
          "return": "java.util.List",
          "parameters": [
            "int",
            "int"
          ]
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": []
        },
        {
          "declaring": "org.elasticsearch.painless.api.Augmentation",
          "name": "sum",
          "return": "double",
          "parameters": [
            "java.util.function.ToDoubleFunction"
          ]
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": []
        },
        {
          "declaring": "java.util.Collection",
          "name": "toArray",
          "return": "[Lorg.elasticsearch.painless.lookup.def;",
          "parameters": [
            "[Lorg.elasticsearch.painless.lookup.def;"
          ]
        },
        {
          "declaring": "java.lang.Object",
          "name": "toString",
          "return": "java.lang.String",
          "parameters": []
        }
      ],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "short",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [],
      "static_fields": [],
      "fields": []
    },
    {
      "name": "void",
      "imported": true,
      "constructors": [],
      "static_methods": [],
      "methods": [],
      "static_fields": [],
      "fields": []
    }
  ],
  "imported_methods": [],
  "class_bindings": [],
  "instance_bindings": []
}
